
[14] Counter_Mode_Basic_Digital_Counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080028e8  080028e8  000128e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002958  08002958  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08002958  08002958  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002958  08002958  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002958  08002958  00012958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800295c  0800295c  0001295c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08002960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000094  080029f4  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  080029f4  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000959c  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001740  00000000  00000000  00029659  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000af8  00000000  00000000  0002ada0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a30  00000000  00000000  0002b898  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000137a4  00000000  00000000  0002c2c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007664  00000000  00000000  0003fa6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006f66c  00000000  00000000  000470d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b673c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030d0  00000000  00000000  000b67b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	080028d0 	.word	0x080028d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	080028d0 	.word	0x080028d0

0800014c <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, END_MSG, sizeof(END_MSG), 100);
 8000154:	2364      	movs	r3, #100	; 0x64
 8000156:	2223      	movs	r2, #35	; 0x23
 8000158:	4903      	ldr	r1, [pc, #12]	; (8000168 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800015a:	4804      	ldr	r0, [pc, #16]	; (800016c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800015c:	f001 fdb7 	bl	8001cce <HAL_UART_Transmit>
}
 8000160:	bf00      	nop
 8000162:	3708      	adds	r7, #8
 8000164:	46bd      	mov	sp, r7
 8000166:	bd80      	pop	{r7, pc}
 8000168:	20000000 	.word	0x20000000
 800016c:	200000bc 	.word	0x200000bc

08000170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t MSG[20] = {'\0'};
 8000176:	463b      	mov	r3, r7
 8000178:	2200      	movs	r2, #0
 800017a:	601a      	str	r2, [r3, #0]
 800017c:	605a      	str	r2, [r3, #4]
 800017e:	609a      	str	r2, [r3, #8]
 8000180:	60da      	str	r2, [r3, #12]
 8000182:	611a      	str	r2, [r3, #16]
	uint16_t CounterTicks = 0;
 8000184:	2300      	movs	r3, #0
 8000186:	82fb      	strh	r3, [r7, #22]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000188:	f000 fab4 	bl	80006f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018c:	f000 f824 	bl	80001d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000190:	f000 f8e4 	bl	800035c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000194:	f000 f866 	bl	8000264 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000198:	f000 f8b6 	bl	8000308 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800019c:	480b      	ldr	r0, [pc, #44]	; (80001cc <main+0x5c>)
 800019e:	f001 f9f4 	bl	800158a <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CounterTicks = TIM2 -> CNT;
 80001a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001a8:	82fb      	strh	r3, [r7, #22]
	  sprintf(MSG, "Ticks = %d\n\r", CounterTicks);
 80001aa:	8afa      	ldrh	r2, [r7, #22]
 80001ac:	463b      	mov	r3, r7
 80001ae:	4908      	ldr	r1, [pc, #32]	; (80001d0 <main+0x60>)
 80001b0:	4618      	mov	r0, r3
 80001b2:	f001 ff7b 	bl	80020ac <siprintf>
	  HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);
 80001b6:	4639      	mov	r1, r7
 80001b8:	2364      	movs	r3, #100	; 0x64
 80001ba:	2214      	movs	r2, #20
 80001bc:	4805      	ldr	r0, [pc, #20]	; (80001d4 <main+0x64>)
 80001be:	f001 fd86 	bl	8001cce <HAL_UART_Transmit>
	  HAL_Delay(100);
 80001c2:	2064      	movs	r0, #100	; 0x64
 80001c4:	f000 faf8 	bl	80007b8 <HAL_Delay>
  {
 80001c8:	e7eb      	b.n	80001a2 <main+0x32>
 80001ca:	bf00      	nop
 80001cc:	200000fc 	.word	0x200000fc
 80001d0:	080028e8 	.word	0x080028e8
 80001d4:	200000bc 	.word	0x200000bc

080001d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b090      	sub	sp, #64	; 0x40
 80001dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001de:	f107 0318 	add.w	r3, r7, #24
 80001e2:	2228      	movs	r2, #40	; 0x28
 80001e4:	2100      	movs	r1, #0
 80001e6:	4618      	mov	r0, r3
 80001e8:	f001 ff58 	bl	800209c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ec:	1d3b      	adds	r3, r7, #4
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]
 80001f2:	605a      	str	r2, [r3, #4]
 80001f4:	609a      	str	r2, [r3, #8]
 80001f6:	60da      	str	r2, [r3, #12]
 80001f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001fa:	2301      	movs	r3, #1
 80001fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000202:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000204:	2300      	movs	r3, #0
 8000206:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000208:	2301      	movs	r3, #1
 800020a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800020c:	2302      	movs	r3, #2
 800020e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000210:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000214:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000216:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800021a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021c:	f107 0318 	add.w	r3, r7, #24
 8000220:	4618      	mov	r0, r3
 8000222:	f000 fd6b 	bl	8000cfc <HAL_RCC_OscConfig>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d001      	beq.n	8000230 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800022c:	f000 f8d6 	bl	80003dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000230:	230f      	movs	r3, #15
 8000232:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000234:	2302      	movs	r3, #2
 8000236:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000238:	2300      	movs	r3, #0
 800023a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800023c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000240:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	2102      	movs	r1, #2
 800024a:	4618      	mov	r0, r3
 800024c:	f000 ffd6 	bl	80011fc <HAL_RCC_ClockConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000256:	f000 f8c1 	bl	80003dc <Error_Handler>
  }
}
 800025a:	bf00      	nop
 800025c:	3740      	adds	r7, #64	; 0x40
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
	...

08000264 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b086      	sub	sp, #24
 8000268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800026a:	f107 0308 	add.w	r3, r7, #8
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000278:	463b      	mov	r3, r7
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000280:	4b20      	ldr	r3, [pc, #128]	; (8000304 <MX_TIM2_Init+0xa0>)
 8000282:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000286:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000288:	4b1e      	ldr	r3, [pc, #120]	; (8000304 <MX_TIM2_Init+0xa0>)
 800028a:	2200      	movs	r2, #0
 800028c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800028e:	4b1d      	ldr	r3, [pc, #116]	; (8000304 <MX_TIM2_Init+0xa0>)
 8000290:	2200      	movs	r2, #0
 8000292:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20;
 8000294:	4b1b      	ldr	r3, [pc, #108]	; (8000304 <MX_TIM2_Init+0xa0>)
 8000296:	2214      	movs	r2, #20
 8000298:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800029a:	4b1a      	ldr	r3, [pc, #104]	; (8000304 <MX_TIM2_Init+0xa0>)
 800029c:	2200      	movs	r2, #0
 800029e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80002a0:	4b18      	ldr	r3, [pc, #96]	; (8000304 <MX_TIM2_Init+0xa0>)
 80002a2:	2280      	movs	r2, #128	; 0x80
 80002a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002a6:	4817      	ldr	r0, [pc, #92]	; (8000304 <MX_TIM2_Init+0xa0>)
 80002a8:	f001 f944 	bl	8001534 <HAL_TIM_Base_Init>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80002b2:	f000 f893 	bl	80003dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80002b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002ba:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80002bc:	2300      	movs	r3, #0
 80002be:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 15;
 80002c4:	230f      	movs	r3, #15
 80002c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002c8:	f107 0308 	add.w	r3, r7, #8
 80002cc:	4619      	mov	r1, r3
 80002ce:	480d      	ldr	r0, [pc, #52]	; (8000304 <MX_TIM2_Init+0xa0>)
 80002d0:	f001 fa86 	bl	80017e0 <HAL_TIM_ConfigClockSource>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80002da:	f000 f87f 	bl	80003dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002de:	2300      	movs	r3, #0
 80002e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002e2:	2300      	movs	r3, #0
 80002e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002e6:	463b      	mov	r3, r7
 80002e8:	4619      	mov	r1, r3
 80002ea:	4806      	ldr	r0, [pc, #24]	; (8000304 <MX_TIM2_Init+0xa0>)
 80002ec:	f001 fc4c 	bl	8001b88 <HAL_TIMEx_MasterConfigSynchronization>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80002f6:	f000 f871 	bl	80003dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002fa:	bf00      	nop
 80002fc:	3718      	adds	r7, #24
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	200000fc 	.word	0x200000fc

08000308 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800030c:	4b11      	ldr	r3, [pc, #68]	; (8000354 <MX_USART1_UART_Init+0x4c>)
 800030e:	4a12      	ldr	r2, [pc, #72]	; (8000358 <MX_USART1_UART_Init+0x50>)
 8000310:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000312:	4b10      	ldr	r3, [pc, #64]	; (8000354 <MX_USART1_UART_Init+0x4c>)
 8000314:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000318:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800031a:	4b0e      	ldr	r3, [pc, #56]	; (8000354 <MX_USART1_UART_Init+0x4c>)
 800031c:	2200      	movs	r2, #0
 800031e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000320:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <MX_USART1_UART_Init+0x4c>)
 8000322:	2200      	movs	r2, #0
 8000324:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000326:	4b0b      	ldr	r3, [pc, #44]	; (8000354 <MX_USART1_UART_Init+0x4c>)
 8000328:	2200      	movs	r2, #0
 800032a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800032c:	4b09      	ldr	r3, [pc, #36]	; (8000354 <MX_USART1_UART_Init+0x4c>)
 800032e:	220c      	movs	r2, #12
 8000330:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000332:	4b08      	ldr	r3, [pc, #32]	; (8000354 <MX_USART1_UART_Init+0x4c>)
 8000334:	2200      	movs	r2, #0
 8000336:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000338:	4b06      	ldr	r3, [pc, #24]	; (8000354 <MX_USART1_UART_Init+0x4c>)
 800033a:	2200      	movs	r2, #0
 800033c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800033e:	4805      	ldr	r0, [pc, #20]	; (8000354 <MX_USART1_UART_Init+0x4c>)
 8000340:	f001 fc78 	bl	8001c34 <HAL_UART_Init>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800034a:	f000 f847 	bl	80003dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	200000bc 	.word	0x200000bc
 8000358:	40013800 	.word	0x40013800

0800035c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b086      	sub	sp, #24
 8000360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000362:	f107 0308 	add.w	r3, r7, #8
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000370:	4b18      	ldr	r3, [pc, #96]	; (80003d4 <MX_GPIO_Init+0x78>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a17      	ldr	r2, [pc, #92]	; (80003d4 <MX_GPIO_Init+0x78>)
 8000376:	f043 0320 	orr.w	r3, r3, #32
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <MX_GPIO_Init+0x78>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0320 	and.w	r3, r3, #32
 8000384:	607b      	str	r3, [r7, #4]
 8000386:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000388:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <MX_GPIO_Init+0x78>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a11      	ldr	r2, [pc, #68]	; (80003d4 <MX_GPIO_Init+0x78>)
 800038e:	f043 0304 	orr.w	r3, r3, #4
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <MX_GPIO_Init+0x78>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0304 	and.w	r3, r3, #4
 800039c:	603b      	str	r3, [r7, #0]
 800039e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a6:	480c      	ldr	r0, [pc, #48]	; (80003d8 <MX_GPIO_Init+0x7c>)
 80003a8:	f000 fc90 	bl	8000ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80003ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b2:	2301      	movs	r3, #1
 80003b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b6:	2300      	movs	r3, #0
 80003b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ba:	2302      	movs	r3, #2
 80003bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003be:	f107 0308 	add.w	r3, r7, #8
 80003c2:	4619      	mov	r1, r3
 80003c4:	4804      	ldr	r0, [pc, #16]	; (80003d8 <MX_GPIO_Init+0x7c>)
 80003c6:	f000 fb27 	bl	8000a18 <HAL_GPIO_Init>

}
 80003ca:	bf00      	nop
 80003cc:	3718      	adds	r7, #24
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	40021000 	.word	0x40021000
 80003d8:	40010800 	.word	0x40010800

080003dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003e0:	bf00      	nop
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr

080003e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ee:	4b15      	ldr	r3, [pc, #84]	; (8000444 <HAL_MspInit+0x5c>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	4a14      	ldr	r2, [pc, #80]	; (8000444 <HAL_MspInit+0x5c>)
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	6193      	str	r3, [r2, #24]
 80003fa:	4b12      	ldr	r3, [pc, #72]	; (8000444 <HAL_MspInit+0x5c>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	f003 0301 	and.w	r3, r3, #1
 8000402:	60bb      	str	r3, [r7, #8]
 8000404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000406:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <HAL_MspInit+0x5c>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	4a0e      	ldr	r2, [pc, #56]	; (8000444 <HAL_MspInit+0x5c>)
 800040c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000410:	61d3      	str	r3, [r2, #28]
 8000412:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <HAL_MspInit+0x5c>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800041e:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <HAL_MspInit+0x60>)
 8000420:	685b      	ldr	r3, [r3, #4]
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	4a04      	ldr	r2, [pc, #16]	; (8000448 <HAL_MspInit+0x60>)
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800043a:	bf00      	nop
 800043c:	3714      	adds	r7, #20
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr
 8000444:	40021000 	.word	0x40021000
 8000448:	40010000 	.word	0x40010000

0800044c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b088      	sub	sp, #32
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000454:	f107 0310 	add.w	r3, r7, #16
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
 800045c:	605a      	str	r2, [r3, #4]
 800045e:	609a      	str	r2, [r3, #8]
 8000460:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800046a:	d12b      	bne.n	80004c4 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800046c:	4b17      	ldr	r3, [pc, #92]	; (80004cc <HAL_TIM_Base_MspInit+0x80>)
 800046e:	69db      	ldr	r3, [r3, #28]
 8000470:	4a16      	ldr	r2, [pc, #88]	; (80004cc <HAL_TIM_Base_MspInit+0x80>)
 8000472:	f043 0301 	orr.w	r3, r3, #1
 8000476:	61d3      	str	r3, [r2, #28]
 8000478:	4b14      	ldr	r3, [pc, #80]	; (80004cc <HAL_TIM_Base_MspInit+0x80>)
 800047a:	69db      	ldr	r3, [r3, #28]
 800047c:	f003 0301 	and.w	r3, r3, #1
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000484:	4b11      	ldr	r3, [pc, #68]	; (80004cc <HAL_TIM_Base_MspInit+0x80>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a10      	ldr	r2, [pc, #64]	; (80004cc <HAL_TIM_Base_MspInit+0x80>)
 800048a:	f043 0304 	orr.w	r3, r3, #4
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <HAL_TIM_Base_MspInit+0x80>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f003 0304 	and.w	r3, r3, #4
 8000498:	60bb      	str	r3, [r7, #8]
 800049a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800049c:	2301      	movs	r3, #1
 800049e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004a0:	2300      	movs	r3, #0
 80004a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	2300      	movs	r3, #0
 80004a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a8:	f107 0310 	add.w	r3, r7, #16
 80004ac:	4619      	mov	r1, r3
 80004ae:	4808      	ldr	r0, [pc, #32]	; (80004d0 <HAL_TIM_Base_MspInit+0x84>)
 80004b0:	f000 fab2 	bl	8000a18 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80004b4:	2200      	movs	r2, #0
 80004b6:	2100      	movs	r1, #0
 80004b8:	201c      	movs	r0, #28
 80004ba:	f000 fa76 	bl	80009aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80004be:	201c      	movs	r0, #28
 80004c0:	f000 fa8f 	bl	80009e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80004c4:	bf00      	nop
 80004c6:	3720      	adds	r7, #32
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40010800 	.word	0x40010800

080004d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b088      	sub	sp, #32
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004dc:	f107 0310 	add.w	r3, r7, #16
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a1c      	ldr	r2, [pc, #112]	; (8000560 <HAL_UART_MspInit+0x8c>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d131      	bne.n	8000558 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004f4:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <HAL_UART_MspInit+0x90>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	4a1a      	ldr	r2, [pc, #104]	; (8000564 <HAL_UART_MspInit+0x90>)
 80004fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004fe:	6193      	str	r3, [r2, #24]
 8000500:	4b18      	ldr	r3, [pc, #96]	; (8000564 <HAL_UART_MspInit+0x90>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800050c:	4b15      	ldr	r3, [pc, #84]	; (8000564 <HAL_UART_MspInit+0x90>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a14      	ldr	r2, [pc, #80]	; (8000564 <HAL_UART_MspInit+0x90>)
 8000512:	f043 0304 	orr.w	r3, r3, #4
 8000516:	6193      	str	r3, [r2, #24]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_UART_MspInit+0x90>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	f003 0304 	and.w	r3, r3, #4
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000524:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000528:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800052a:	2302      	movs	r3, #2
 800052c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800052e:	2303      	movs	r3, #3
 8000530:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000532:	f107 0310 	add.w	r3, r7, #16
 8000536:	4619      	mov	r1, r3
 8000538:	480b      	ldr	r0, [pc, #44]	; (8000568 <HAL_UART_MspInit+0x94>)
 800053a:	f000 fa6d 	bl	8000a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800053e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000542:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	2300      	movs	r3, #0
 800054a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054c:	f107 0310 	add.w	r3, r7, #16
 8000550:	4619      	mov	r1, r3
 8000552:	4805      	ldr	r0, [pc, #20]	; (8000568 <HAL_UART_MspInit+0x94>)
 8000554:	f000 fa60 	bl	8000a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000558:	bf00      	nop
 800055a:	3720      	adds	r7, #32
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40013800 	.word	0x40013800
 8000564:	40021000 	.word	0x40021000
 8000568:	40010800 	.word	0x40010800

0800056c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr

08000578 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800057c:	e7fe      	b.n	800057c <HardFault_Handler+0x4>

0800057e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000582:	e7fe      	b.n	8000582 <MemManage_Handler+0x4>

08000584 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000588:	e7fe      	b.n	8000588 <BusFault_Handler+0x4>

0800058a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800058e:	e7fe      	b.n	800058e <UsageFault_Handler+0x4>

08000590 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr

0800059c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr

080005a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr

080005b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b8:	f000 f8e2 	bl	8000780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80005c4:	4802      	ldr	r0, [pc, #8]	; (80005d0 <TIM2_IRQHandler+0x10>)
 80005c6:	f001 f803 	bl	80015d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200000fc 	.word	0x200000fc

080005d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005dc:	4a14      	ldr	r2, [pc, #80]	; (8000630 <_sbrk+0x5c>)
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <_sbrk+0x60>)
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <_sbrk+0x64>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d102      	bne.n	80005f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <_sbrk+0x64>)
 80005f2:	4a12      	ldr	r2, [pc, #72]	; (800063c <_sbrk+0x68>)
 80005f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <_sbrk+0x64>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	693a      	ldr	r2, [r7, #16]
 8000600:	429a      	cmp	r2, r3
 8000602:	d207      	bcs.n	8000614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000604:	f001 fd20 	bl	8002048 <__errno>
 8000608:	4602      	mov	r2, r0
 800060a:	230c      	movs	r3, #12
 800060c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800060e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000612:	e009      	b.n	8000628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <_sbrk+0x64>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800061a:	4b07      	ldr	r3, [pc, #28]	; (8000638 <_sbrk+0x64>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4413      	add	r3, r2
 8000622:	4a05      	ldr	r2, [pc, #20]	; (8000638 <_sbrk+0x64>)
 8000624:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000626:	68fb      	ldr	r3, [r7, #12]
}
 8000628:	4618      	mov	r0, r3
 800062a:	3718      	adds	r7, #24
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20005000 	.word	0x20005000
 8000634:	00000400 	.word	0x00000400
 8000638:	200000b0 	.word	0x200000b0
 800063c:	20000148 	.word	0x20000148

08000640 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000644:	4b15      	ldr	r3, [pc, #84]	; (800069c <SystemInit+0x5c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a14      	ldr	r2, [pc, #80]	; (800069c <SystemInit+0x5c>)
 800064a:	f043 0301 	orr.w	r3, r3, #1
 800064e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <SystemInit+0x5c>)
 8000652:	685a      	ldr	r2, [r3, #4]
 8000654:	4911      	ldr	r1, [pc, #68]	; (800069c <SystemInit+0x5c>)
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <SystemInit+0x60>)
 8000658:	4013      	ands	r3, r2
 800065a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <SystemInit+0x5c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a0e      	ldr	r2, [pc, #56]	; (800069c <SystemInit+0x5c>)
 8000662:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800066a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800066c:	4b0b      	ldr	r3, [pc, #44]	; (800069c <SystemInit+0x5c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a0a      	ldr	r2, [pc, #40]	; (800069c <SystemInit+0x5c>)
 8000672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000676:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <SystemInit+0x5c>)
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	4a07      	ldr	r2, [pc, #28]	; (800069c <SystemInit+0x5c>)
 800067e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000682:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <SystemInit+0x5c>)
 8000686:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800068a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800068c:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <SystemInit+0x64>)
 800068e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000692:	609a      	str	r2, [r3, #8]
#endif 
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr
 800069c:	40021000 	.word	0x40021000
 80006a0:	f8ff0000 	.word	0xf8ff0000
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006aa:	e003      	b.n	80006b4 <LoopCopyDataInit>

080006ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006ac:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80006ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006b2:	3104      	adds	r1, #4

080006b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006b4:	480a      	ldr	r0, [pc, #40]	; (80006e0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80006b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006bc:	d3f6      	bcc.n	80006ac <CopyDataInit>
  ldr r2, =_sbss
 80006be:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006c0:	e002      	b.n	80006c8 <LoopFillZerobss>

080006c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006c4:	f842 3b04 	str.w	r3, [r2], #4

080006c8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006cc:	d3f9      	bcc.n	80006c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ce:	f7ff ffb7 	bl	8000640 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006d2:	f001 fcbf 	bl	8002054 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d6:	f7ff fd4b 	bl	8000170 <main>
  bx lr
 80006da:	4770      	bx	lr
  ldr r3, =_sidata
 80006dc:	08002960 	.word	0x08002960
  ldr r0, =_sdata
 80006e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006e4:	20000094 	.word	0x20000094
  ldr r2, =_sbss
 80006e8:	20000094 	.word	0x20000094
  ldr r3, = _ebss
 80006ec:	20000144 	.word	0x20000144

080006f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f0:	e7fe      	b.n	80006f0 <ADC1_2_IRQHandler>
	...

080006f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <HAL_Init+0x28>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a07      	ldr	r2, [pc, #28]	; (800071c <HAL_Init+0x28>)
 80006fe:	f043 0310 	orr.w	r3, r3, #16
 8000702:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000704:	2003      	movs	r0, #3
 8000706:	f000 f945 	bl	8000994 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800070a:	2000      	movs	r0, #0
 800070c:	f000 f808 	bl	8000720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000710:	f7ff fe6a 	bl	80003e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000714:	2300      	movs	r3, #0
}
 8000716:	4618      	mov	r0, r3
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40022000 	.word	0x40022000

08000720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <HAL_InitTick+0x54>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <HAL_InitTick+0x58>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	4619      	mov	r1, r3
 8000732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000736:	fbb3 f3f1 	udiv	r3, r3, r1
 800073a:	fbb2 f3f3 	udiv	r3, r2, r3
 800073e:	4618      	mov	r0, r3
 8000740:	f000 f95d 	bl	80009fe <HAL_SYSTICK_Config>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800074a:	2301      	movs	r3, #1
 800074c:	e00e      	b.n	800076c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2b0f      	cmp	r3, #15
 8000752:	d80a      	bhi.n	800076a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000754:	2200      	movs	r2, #0
 8000756:	6879      	ldr	r1, [r7, #4]
 8000758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800075c:	f000 f925 	bl	80009aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000760:	4a06      	ldr	r2, [pc, #24]	; (800077c <HAL_InitTick+0x5c>)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000766:	2300      	movs	r3, #0
 8000768:	e000      	b.n	800076c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800076a:	2301      	movs	r3, #1
}
 800076c:	4618      	mov	r0, r3
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000024 	.word	0x20000024
 8000778:	2000002c 	.word	0x2000002c
 800077c:	20000028 	.word	0x20000028

08000780 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <HAL_IncTick+0x1c>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	461a      	mov	r2, r3
 800078a:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <HAL_IncTick+0x20>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4413      	add	r3, r2
 8000790:	4a03      	ldr	r2, [pc, #12]	; (80007a0 <HAL_IncTick+0x20>)
 8000792:	6013      	str	r3, [r2, #0]
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	2000002c 	.word	0x2000002c
 80007a0:	2000013c 	.word	0x2000013c

080007a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  return uwTick;
 80007a8:	4b02      	ldr	r3, [pc, #8]	; (80007b4 <HAL_GetTick+0x10>)
 80007aa:	681b      	ldr	r3, [r3, #0]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	2000013c 	.word	0x2000013c

080007b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007c0:	f7ff fff0 	bl	80007a4 <HAL_GetTick>
 80007c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007d0:	d005      	beq.n	80007de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <HAL_Delay+0x40>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	461a      	mov	r2, r3
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	4413      	add	r3, r2
 80007dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007de:	bf00      	nop
 80007e0:	f7ff ffe0 	bl	80007a4 <HAL_GetTick>
 80007e4:	4602      	mov	r2, r0
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	1ad3      	subs	r3, r2, r3
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d8f7      	bhi.n	80007e0 <HAL_Delay+0x28>
  {
  }
}
 80007f0:	bf00      	nop
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	2000002c 	.word	0x2000002c

080007fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f003 0307 	and.w	r3, r3, #7
 800080a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <__NVIC_SetPriorityGrouping+0x44>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000812:	68ba      	ldr	r2, [r7, #8]
 8000814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000818:	4013      	ands	r3, r2
 800081a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800082c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800082e:	4a04      	ldr	r2, [pc, #16]	; (8000840 <__NVIC_SetPriorityGrouping+0x44>)
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	60d3      	str	r3, [r2, #12]
}
 8000834:	bf00      	nop
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <__NVIC_GetPriorityGrouping+0x18>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	0a1b      	lsrs	r3, r3, #8
 800084e:	f003 0307 	and.w	r3, r3, #7
}
 8000852:	4618      	mov	r0, r3
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086e:	2b00      	cmp	r3, #0
 8000870:	db0b      	blt.n	800088a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	f003 021f 	and.w	r2, r3, #31
 8000878:	4906      	ldr	r1, [pc, #24]	; (8000894 <__NVIC_EnableIRQ+0x34>)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	095b      	lsrs	r3, r3, #5
 8000880:	2001      	movs	r0, #1
 8000882:	fa00 f202 	lsl.w	r2, r0, r2
 8000886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	e000e100 	.word	0xe000e100

08000898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	6039      	str	r1, [r7, #0]
 80008a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	db0a      	blt.n	80008c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	490c      	ldr	r1, [pc, #48]	; (80008e4 <__NVIC_SetPriority+0x4c>)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	0112      	lsls	r2, r2, #4
 80008b8:	b2d2      	uxtb	r2, r2
 80008ba:	440b      	add	r3, r1
 80008bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c0:	e00a      	b.n	80008d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	4908      	ldr	r1, [pc, #32]	; (80008e8 <__NVIC_SetPriority+0x50>)
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	f003 030f 	and.w	r3, r3, #15
 80008ce:	3b04      	subs	r3, #4
 80008d0:	0112      	lsls	r2, r2, #4
 80008d2:	b2d2      	uxtb	r2, r2
 80008d4:	440b      	add	r3, r1
 80008d6:	761a      	strb	r2, [r3, #24]
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000e100 	.word	0xe000e100
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b089      	sub	sp, #36	; 0x24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	f1c3 0307 	rsb	r3, r3, #7
 8000906:	2b04      	cmp	r3, #4
 8000908:	bf28      	it	cs
 800090a:	2304      	movcs	r3, #4
 800090c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	3304      	adds	r3, #4
 8000912:	2b06      	cmp	r3, #6
 8000914:	d902      	bls.n	800091c <NVIC_EncodePriority+0x30>
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	3b03      	subs	r3, #3
 800091a:	e000      	b.n	800091e <NVIC_EncodePriority+0x32>
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000920:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	43da      	mvns	r2, r3
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	401a      	ands	r2, r3
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000934:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	fa01 f303 	lsl.w	r3, r1, r3
 800093e:	43d9      	mvns	r1, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000944:	4313      	orrs	r3, r2
         );
}
 8000946:	4618      	mov	r0, r3
 8000948:	3724      	adds	r7, #36	; 0x24
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr

08000950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3b01      	subs	r3, #1
 800095c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000960:	d301      	bcc.n	8000966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000962:	2301      	movs	r3, #1
 8000964:	e00f      	b.n	8000986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000966:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <SysTick_Config+0x40>)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3b01      	subs	r3, #1
 800096c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800096e:	210f      	movs	r1, #15
 8000970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000974:	f7ff ff90 	bl	8000898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <SysTick_Config+0x40>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800097e:	4b04      	ldr	r3, [pc, #16]	; (8000990 <SysTick_Config+0x40>)
 8000980:	2207      	movs	r2, #7
 8000982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	e000e010 	.word	0xe000e010

08000994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff ff2d 	bl	80007fc <__NVIC_SetPriorityGrouping>
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b086      	sub	sp, #24
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	4603      	mov	r3, r0
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]
 80009b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009bc:	f7ff ff42 	bl	8000844 <__NVIC_GetPriorityGrouping>
 80009c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	68b9      	ldr	r1, [r7, #8]
 80009c6:	6978      	ldr	r0, [r7, #20]
 80009c8:	f7ff ff90 	bl	80008ec <NVIC_EncodePriority>
 80009cc:	4602      	mov	r2, r0
 80009ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009d2:	4611      	mov	r1, r2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff ff5f 	bl	8000898 <__NVIC_SetPriority>
}
 80009da:	bf00      	nop
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	4603      	mov	r3, r0
 80009ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff35 	bl	8000860 <__NVIC_EnableIRQ>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f7ff ffa2 	bl	8000950 <SysTick_Config>
 8000a0c:	4603      	mov	r3, r0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b08b      	sub	sp, #44	; 0x2c
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a2a:	e127      	b.n	8000c7c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	69fa      	ldr	r2, [r7, #28]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	f040 8116 	bne.w	8000c76 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	2b12      	cmp	r3, #18
 8000a50:	d034      	beq.n	8000abc <HAL_GPIO_Init+0xa4>
 8000a52:	2b12      	cmp	r3, #18
 8000a54:	d80d      	bhi.n	8000a72 <HAL_GPIO_Init+0x5a>
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d02b      	beq.n	8000ab2 <HAL_GPIO_Init+0x9a>
 8000a5a:	2b02      	cmp	r3, #2
 8000a5c:	d804      	bhi.n	8000a68 <HAL_GPIO_Init+0x50>
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d031      	beq.n	8000ac6 <HAL_GPIO_Init+0xae>
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d01c      	beq.n	8000aa0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a66:	e048      	b.n	8000afa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a68:	2b03      	cmp	r3, #3
 8000a6a:	d043      	beq.n	8000af4 <HAL_GPIO_Init+0xdc>
 8000a6c:	2b11      	cmp	r3, #17
 8000a6e:	d01b      	beq.n	8000aa8 <HAL_GPIO_Init+0x90>
          break;
 8000a70:	e043      	b.n	8000afa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a72:	4a89      	ldr	r2, [pc, #548]	; (8000c98 <HAL_GPIO_Init+0x280>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d026      	beq.n	8000ac6 <HAL_GPIO_Init+0xae>
 8000a78:	4a87      	ldr	r2, [pc, #540]	; (8000c98 <HAL_GPIO_Init+0x280>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d806      	bhi.n	8000a8c <HAL_GPIO_Init+0x74>
 8000a7e:	4a87      	ldr	r2, [pc, #540]	; (8000c9c <HAL_GPIO_Init+0x284>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d020      	beq.n	8000ac6 <HAL_GPIO_Init+0xae>
 8000a84:	4a86      	ldr	r2, [pc, #536]	; (8000ca0 <HAL_GPIO_Init+0x288>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d01d      	beq.n	8000ac6 <HAL_GPIO_Init+0xae>
          break;
 8000a8a:	e036      	b.n	8000afa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a8c:	4a85      	ldr	r2, [pc, #532]	; (8000ca4 <HAL_GPIO_Init+0x28c>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d019      	beq.n	8000ac6 <HAL_GPIO_Init+0xae>
 8000a92:	4a85      	ldr	r2, [pc, #532]	; (8000ca8 <HAL_GPIO_Init+0x290>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d016      	beq.n	8000ac6 <HAL_GPIO_Init+0xae>
 8000a98:	4a84      	ldr	r2, [pc, #528]	; (8000cac <HAL_GPIO_Init+0x294>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d013      	beq.n	8000ac6 <HAL_GPIO_Init+0xae>
          break;
 8000a9e:	e02c      	b.n	8000afa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	623b      	str	r3, [r7, #32]
          break;
 8000aa6:	e028      	b.n	8000afa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	3304      	adds	r3, #4
 8000aae:	623b      	str	r3, [r7, #32]
          break;
 8000ab0:	e023      	b.n	8000afa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	3308      	adds	r3, #8
 8000ab8:	623b      	str	r3, [r7, #32]
          break;
 8000aba:	e01e      	b.n	8000afa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	330c      	adds	r3, #12
 8000ac2:	623b      	str	r3, [r7, #32]
          break;
 8000ac4:	e019      	b.n	8000afa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d102      	bne.n	8000ad4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ace:	2304      	movs	r3, #4
 8000ad0:	623b      	str	r3, [r7, #32]
          break;
 8000ad2:	e012      	b.n	8000afa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d105      	bne.n	8000ae8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000adc:	2308      	movs	r3, #8
 8000ade:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	69fa      	ldr	r2, [r7, #28]
 8000ae4:	611a      	str	r2, [r3, #16]
          break;
 8000ae6:	e008      	b.n	8000afa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ae8:	2308      	movs	r3, #8
 8000aea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	69fa      	ldr	r2, [r7, #28]
 8000af0:	615a      	str	r2, [r3, #20]
          break;
 8000af2:	e002      	b.n	8000afa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
          break;
 8000af8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	2bff      	cmp	r3, #255	; 0xff
 8000afe:	d801      	bhi.n	8000b04 <HAL_GPIO_Init+0xec>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	e001      	b.n	8000b08 <HAL_GPIO_Init+0xf0>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3304      	adds	r3, #4
 8000b08:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	2bff      	cmp	r3, #255	; 0xff
 8000b0e:	d802      	bhi.n	8000b16 <HAL_GPIO_Init+0xfe>
 8000b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	e002      	b.n	8000b1c <HAL_GPIO_Init+0x104>
 8000b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b18:	3b08      	subs	r3, #8
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	210f      	movs	r1, #15
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	401a      	ands	r2, r3
 8000b2e:	6a39      	ldr	r1, [r7, #32]
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	fa01 f303 	lsl.w	r3, r1, r3
 8000b36:	431a      	orrs	r2, r3
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	f000 8096 	beq.w	8000c76 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b4a:	4b59      	ldr	r3, [pc, #356]	; (8000cb0 <HAL_GPIO_Init+0x298>)
 8000b4c:	699b      	ldr	r3, [r3, #24]
 8000b4e:	4a58      	ldr	r2, [pc, #352]	; (8000cb0 <HAL_GPIO_Init+0x298>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6193      	str	r3, [r2, #24]
 8000b56:	4b56      	ldr	r3, [pc, #344]	; (8000cb0 <HAL_GPIO_Init+0x298>)
 8000b58:	699b      	ldr	r3, [r3, #24]
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b62:	4a54      	ldr	r2, [pc, #336]	; (8000cb4 <HAL_GPIO_Init+0x29c>)
 8000b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b66:	089b      	lsrs	r3, r3, #2
 8000b68:	3302      	adds	r3, #2
 8000b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b6e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b72:	f003 0303 	and.w	r3, r3, #3
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	220f      	movs	r2, #15
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	68fa      	ldr	r2, [r7, #12]
 8000b82:	4013      	ands	r3, r2
 8000b84:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a4b      	ldr	r2, [pc, #300]	; (8000cb8 <HAL_GPIO_Init+0x2a0>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d013      	beq.n	8000bb6 <HAL_GPIO_Init+0x19e>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a4a      	ldr	r2, [pc, #296]	; (8000cbc <HAL_GPIO_Init+0x2a4>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d00d      	beq.n	8000bb2 <HAL_GPIO_Init+0x19a>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a49      	ldr	r2, [pc, #292]	; (8000cc0 <HAL_GPIO_Init+0x2a8>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d007      	beq.n	8000bae <HAL_GPIO_Init+0x196>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a48      	ldr	r2, [pc, #288]	; (8000cc4 <HAL_GPIO_Init+0x2ac>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d101      	bne.n	8000baa <HAL_GPIO_Init+0x192>
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	e006      	b.n	8000bb8 <HAL_GPIO_Init+0x1a0>
 8000baa:	2304      	movs	r3, #4
 8000bac:	e004      	b.n	8000bb8 <HAL_GPIO_Init+0x1a0>
 8000bae:	2302      	movs	r3, #2
 8000bb0:	e002      	b.n	8000bb8 <HAL_GPIO_Init+0x1a0>
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e000      	b.n	8000bb8 <HAL_GPIO_Init+0x1a0>
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bba:	f002 0203 	and.w	r2, r2, #3
 8000bbe:	0092      	lsls	r2, r2, #2
 8000bc0:	4093      	lsls	r3, r2
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bc8:	493a      	ldr	r1, [pc, #232]	; (8000cb4 <HAL_GPIO_Init+0x29c>)
 8000bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bcc:	089b      	lsrs	r3, r3, #2
 8000bce:	3302      	adds	r3, #2
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d006      	beq.n	8000bf0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000be2:	4b39      	ldr	r3, [pc, #228]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	4938      	ldr	r1, [pc, #224]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	600b      	str	r3, [r1, #0]
 8000bee:	e006      	b.n	8000bfe <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bf0:	4b35      	ldr	r3, [pc, #212]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	4933      	ldr	r1, [pc, #204]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d006      	beq.n	8000c18 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c0a:	4b2f      	ldr	r3, [pc, #188]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	492e      	ldr	r1, [pc, #184]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	604b      	str	r3, [r1, #4]
 8000c16:	e006      	b.n	8000c26 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c18:	4b2b      	ldr	r3, [pc, #172]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c1a:	685a      	ldr	r2, [r3, #4]
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	4929      	ldr	r1, [pc, #164]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c22:	4013      	ands	r3, r2
 8000c24:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d006      	beq.n	8000c40 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c32:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c34:	689a      	ldr	r2, [r3, #8]
 8000c36:	4924      	ldr	r1, [pc, #144]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	608b      	str	r3, [r1, #8]
 8000c3e:	e006      	b.n	8000c4e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c40:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c42:	689a      	ldr	r2, [r3, #8]
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	43db      	mvns	r3, r3
 8000c48:	491f      	ldr	r1, [pc, #124]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d006      	beq.n	8000c68 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c5c:	68da      	ldr	r2, [r3, #12]
 8000c5e:	491a      	ldr	r1, [pc, #104]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	60cb      	str	r3, [r1, #12]
 8000c66:	e006      	b.n	8000c76 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c6a:	68da      	ldr	r2, [r3, #12]
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	4915      	ldr	r1, [pc, #84]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c72:	4013      	ands	r3, r2
 8000c74:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c78:	3301      	adds	r3, #1
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c82:	fa22 f303 	lsr.w	r3, r2, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f47f aed0 	bne.w	8000a2c <HAL_GPIO_Init+0x14>
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	372c      	adds	r7, #44	; 0x2c
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	10210000 	.word	0x10210000
 8000c9c:	10110000 	.word	0x10110000
 8000ca0:	10120000 	.word	0x10120000
 8000ca4:	10310000 	.word	0x10310000
 8000ca8:	10320000 	.word	0x10320000
 8000cac:	10220000 	.word	0x10220000
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40010000 	.word	0x40010000
 8000cb8:	40010800 	.word	0x40010800
 8000cbc:	40010c00 	.word	0x40010c00
 8000cc0:	40011000 	.word	0x40011000
 8000cc4:	40011400 	.word	0x40011400
 8000cc8:	40010400 	.word	0x40010400

08000ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	807b      	strh	r3, [r7, #2]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cdc:	787b      	ldrb	r3, [r7, #1]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d003      	beq.n	8000cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ce2:	887a      	ldrh	r2, [r7, #2]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ce8:	e003      	b.n	8000cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cea:	887b      	ldrh	r3, [r7, #2]
 8000cec:	041a      	lsls	r2, r3, #16
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	611a      	str	r2, [r3, #16]
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d101      	bne.n	8000d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e26c      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f000 8087 	beq.w	8000e2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d1c:	4b92      	ldr	r3, [pc, #584]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 030c 	and.w	r3, r3, #12
 8000d24:	2b04      	cmp	r3, #4
 8000d26:	d00c      	beq.n	8000d42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d28:	4b8f      	ldr	r3, [pc, #572]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 030c 	and.w	r3, r3, #12
 8000d30:	2b08      	cmp	r3, #8
 8000d32:	d112      	bne.n	8000d5a <HAL_RCC_OscConfig+0x5e>
 8000d34:	4b8c      	ldr	r3, [pc, #560]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d40:	d10b      	bne.n	8000d5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d42:	4b89      	ldr	r3, [pc, #548]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d06c      	beq.n	8000e28 <HAL_RCC_OscConfig+0x12c>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d168      	bne.n	8000e28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e246      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d62:	d106      	bne.n	8000d72 <HAL_RCC_OscConfig+0x76>
 8000d64:	4b80      	ldr	r3, [pc, #512]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a7f      	ldr	r2, [pc, #508]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d6e:	6013      	str	r3, [r2, #0]
 8000d70:	e02e      	b.n	8000dd0 <HAL_RCC_OscConfig+0xd4>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d10c      	bne.n	8000d94 <HAL_RCC_OscConfig+0x98>
 8000d7a:	4b7b      	ldr	r3, [pc, #492]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a7a      	ldr	r2, [pc, #488]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d84:	6013      	str	r3, [r2, #0]
 8000d86:	4b78      	ldr	r3, [pc, #480]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a77      	ldr	r2, [pc, #476]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d90:	6013      	str	r3, [r2, #0]
 8000d92:	e01d      	b.n	8000dd0 <HAL_RCC_OscConfig+0xd4>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d9c:	d10c      	bne.n	8000db8 <HAL_RCC_OscConfig+0xbc>
 8000d9e:	4b72      	ldr	r3, [pc, #456]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a71      	ldr	r2, [pc, #452]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da8:	6013      	str	r3, [r2, #0]
 8000daa:	4b6f      	ldr	r3, [pc, #444]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a6e      	ldr	r2, [pc, #440]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	e00b      	b.n	8000dd0 <HAL_RCC_OscConfig+0xd4>
 8000db8:	4b6b      	ldr	r3, [pc, #428]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a6a      	ldr	r2, [pc, #424]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dc2:	6013      	str	r3, [r2, #0]
 8000dc4:	4b68      	ldr	r3, [pc, #416]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a67      	ldr	r2, [pc, #412]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d013      	beq.n	8000e00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd8:	f7ff fce4 	bl	80007a4 <HAL_GetTick>
 8000ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dde:	e008      	b.n	8000df2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000de0:	f7ff fce0 	bl	80007a4 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b64      	cmp	r3, #100	; 0x64
 8000dec:	d901      	bls.n	8000df2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e1fa      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000df2:	4b5d      	ldr	r3, [pc, #372]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d0f0      	beq.n	8000de0 <HAL_RCC_OscConfig+0xe4>
 8000dfe:	e014      	b.n	8000e2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e00:	f7ff fcd0 	bl	80007a4 <HAL_GetTick>
 8000e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e06:	e008      	b.n	8000e1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e08:	f7ff fccc 	bl	80007a4 <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	2b64      	cmp	r3, #100	; 0x64
 8000e14:	d901      	bls.n	8000e1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e16:	2303      	movs	r3, #3
 8000e18:	e1e6      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e1a:	4b53      	ldr	r3, [pc, #332]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1f0      	bne.n	8000e08 <HAL_RCC_OscConfig+0x10c>
 8000e26:	e000      	b.n	8000e2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d063      	beq.n	8000efe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e36:	4b4c      	ldr	r3, [pc, #304]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f003 030c 	and.w	r3, r3, #12
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d00b      	beq.n	8000e5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e42:	4b49      	ldr	r3, [pc, #292]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 030c 	and.w	r3, r3, #12
 8000e4a:	2b08      	cmp	r3, #8
 8000e4c:	d11c      	bne.n	8000e88 <HAL_RCC_OscConfig+0x18c>
 8000e4e:	4b46      	ldr	r3, [pc, #280]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d116      	bne.n	8000e88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e5a:	4b43      	ldr	r3, [pc, #268]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d005      	beq.n	8000e72 <HAL_RCC_OscConfig+0x176>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	691b      	ldr	r3, [r3, #16]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d001      	beq.n	8000e72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e1ba      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e72:	4b3d      	ldr	r3, [pc, #244]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	695b      	ldr	r3, [r3, #20]
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	4939      	ldr	r1, [pc, #228]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000e82:	4313      	orrs	r3, r2
 8000e84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e86:	e03a      	b.n	8000efe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	691b      	ldr	r3, [r3, #16]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d020      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e90:	4b36      	ldr	r3, [pc, #216]	; (8000f6c <HAL_RCC_OscConfig+0x270>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e96:	f7ff fc85 	bl	80007a4 <HAL_GetTick>
 8000e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e9c:	e008      	b.n	8000eb0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e9e:	f7ff fc81 	bl	80007a4 <HAL_GetTick>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d901      	bls.n	8000eb0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000eac:	2303      	movs	r3, #3
 8000eae:	e19b      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eb0:	4b2d      	ldr	r3, [pc, #180]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f003 0302 	and.w	r3, r3, #2
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d0f0      	beq.n	8000e9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ebc:	4b2a      	ldr	r3, [pc, #168]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	4927      	ldr	r1, [pc, #156]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	600b      	str	r3, [r1, #0]
 8000ed0:	e015      	b.n	8000efe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ed2:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <HAL_RCC_OscConfig+0x270>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed8:	f7ff fc64 	bl	80007a4 <HAL_GetTick>
 8000edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ede:	e008      	b.n	8000ef2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ee0:	f7ff fc60 	bl	80007a4 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d901      	bls.n	8000ef2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e17a      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d1f0      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0308 	and.w	r3, r3, #8
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d03a      	beq.n	8000f80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d019      	beq.n	8000f46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f18:	f7ff fc44 	bl	80007a4 <HAL_GetTick>
 8000f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f1e:	e008      	b.n	8000f32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f20:	f7ff fc40 	bl	80007a4 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d901      	bls.n	8000f32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e15a      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d0f0      	beq.n	8000f20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f000 fada 	bl	80014f8 <RCC_Delay>
 8000f44:	e01c      	b.n	8000f80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_RCC_OscConfig+0x274>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f4c:	f7ff fc2a 	bl	80007a4 <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f52:	e00f      	b.n	8000f74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f54:	f7ff fc26 	bl	80007a4 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d908      	bls.n	8000f74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e140      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
 8000f66:	bf00      	nop
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	42420000 	.word	0x42420000
 8000f70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f74:	4b9e      	ldr	r3, [pc, #632]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8000f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1e9      	bne.n	8000f54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0304 	and.w	r3, r3, #4
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f000 80a6 	beq.w	80010da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f92:	4b97      	ldr	r3, [pc, #604]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10d      	bne.n	8000fba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f9e:	4b94      	ldr	r3, [pc, #592]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	4a93      	ldr	r2, [pc, #588]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8000fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	61d3      	str	r3, [r2, #28]
 8000faa:	4b91      	ldr	r3, [pc, #580]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fba:	4b8e      	ldr	r3, [pc, #568]	; (80011f4 <HAL_RCC_OscConfig+0x4f8>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d118      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fc6:	4b8b      	ldr	r3, [pc, #556]	; (80011f4 <HAL_RCC_OscConfig+0x4f8>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a8a      	ldr	r2, [pc, #552]	; (80011f4 <HAL_RCC_OscConfig+0x4f8>)
 8000fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fd2:	f7ff fbe7 	bl	80007a4 <HAL_GetTick>
 8000fd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd8:	e008      	b.n	8000fec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fda:	f7ff fbe3 	bl	80007a4 <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b64      	cmp	r3, #100	; 0x64
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e0fd      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fec:	4b81      	ldr	r3, [pc, #516]	; (80011f4 <HAL_RCC_OscConfig+0x4f8>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d0f0      	beq.n	8000fda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d106      	bne.n	800100e <HAL_RCC_OscConfig+0x312>
 8001000:	4b7b      	ldr	r3, [pc, #492]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8001002:	6a1b      	ldr	r3, [r3, #32]
 8001004:	4a7a      	ldr	r2, [pc, #488]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6213      	str	r3, [r2, #32]
 800100c:	e02d      	b.n	800106a <HAL_RCC_OscConfig+0x36e>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d10c      	bne.n	8001030 <HAL_RCC_OscConfig+0x334>
 8001016:	4b76      	ldr	r3, [pc, #472]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8001018:	6a1b      	ldr	r3, [r3, #32]
 800101a:	4a75      	ldr	r2, [pc, #468]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 800101c:	f023 0301 	bic.w	r3, r3, #1
 8001020:	6213      	str	r3, [r2, #32]
 8001022:	4b73      	ldr	r3, [pc, #460]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8001024:	6a1b      	ldr	r3, [r3, #32]
 8001026:	4a72      	ldr	r2, [pc, #456]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8001028:	f023 0304 	bic.w	r3, r3, #4
 800102c:	6213      	str	r3, [r2, #32]
 800102e:	e01c      	b.n	800106a <HAL_RCC_OscConfig+0x36e>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	2b05      	cmp	r3, #5
 8001036:	d10c      	bne.n	8001052 <HAL_RCC_OscConfig+0x356>
 8001038:	4b6d      	ldr	r3, [pc, #436]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 800103a:	6a1b      	ldr	r3, [r3, #32]
 800103c:	4a6c      	ldr	r2, [pc, #432]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 800103e:	f043 0304 	orr.w	r3, r3, #4
 8001042:	6213      	str	r3, [r2, #32]
 8001044:	4b6a      	ldr	r3, [pc, #424]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8001046:	6a1b      	ldr	r3, [r3, #32]
 8001048:	4a69      	ldr	r2, [pc, #420]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6213      	str	r3, [r2, #32]
 8001050:	e00b      	b.n	800106a <HAL_RCC_OscConfig+0x36e>
 8001052:	4b67      	ldr	r3, [pc, #412]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8001054:	6a1b      	ldr	r3, [r3, #32]
 8001056:	4a66      	ldr	r2, [pc, #408]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8001058:	f023 0301 	bic.w	r3, r3, #1
 800105c:	6213      	str	r3, [r2, #32]
 800105e:	4b64      	ldr	r3, [pc, #400]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8001060:	6a1b      	ldr	r3, [r3, #32]
 8001062:	4a63      	ldr	r2, [pc, #396]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8001064:	f023 0304 	bic.w	r3, r3, #4
 8001068:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d015      	beq.n	800109e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001072:	f7ff fb97 	bl	80007a4 <HAL_GetTick>
 8001076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001078:	e00a      	b.n	8001090 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800107a:	f7ff fb93 	bl	80007a4 <HAL_GetTick>
 800107e:	4602      	mov	r2, r0
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	f241 3288 	movw	r2, #5000	; 0x1388
 8001088:	4293      	cmp	r3, r2
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e0ab      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001090:	4b57      	ldr	r3, [pc, #348]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0ee      	beq.n	800107a <HAL_RCC_OscConfig+0x37e>
 800109c:	e014      	b.n	80010c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800109e:	f7ff fb81 	bl	80007a4 <HAL_GetTick>
 80010a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a4:	e00a      	b.n	80010bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010a6:	f7ff fb7d 	bl	80007a4 <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e095      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010bc:	4b4c      	ldr	r3, [pc, #304]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 80010be:	6a1b      	ldr	r3, [r3, #32]
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1ee      	bne.n	80010a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010c8:	7dfb      	ldrb	r3, [r7, #23]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d105      	bne.n	80010da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010ce:	4b48      	ldr	r3, [pc, #288]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	4a47      	ldr	r2, [pc, #284]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 80010d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 8081 	beq.w	80011e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010e4:	4b42      	ldr	r3, [pc, #264]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 030c 	and.w	r3, r3, #12
 80010ec:	2b08      	cmp	r3, #8
 80010ee:	d061      	beq.n	80011b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69db      	ldr	r3, [r3, #28]
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d146      	bne.n	8001186 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010f8:	4b3f      	ldr	r3, [pc, #252]	; (80011f8 <HAL_RCC_OscConfig+0x4fc>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fe:	f7ff fb51 	bl	80007a4 <HAL_GetTick>
 8001102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001104:	e008      	b.n	8001118 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001106:	f7ff fb4d 	bl	80007a4 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e067      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001118:	4b35      	ldr	r3, [pc, #212]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1f0      	bne.n	8001106 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800112c:	d108      	bne.n	8001140 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800112e:	4b30      	ldr	r3, [pc, #192]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	492d      	ldr	r1, [pc, #180]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 800113c:	4313      	orrs	r3, r2
 800113e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001140:	4b2b      	ldr	r3, [pc, #172]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a19      	ldr	r1, [r3, #32]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001150:	430b      	orrs	r3, r1
 8001152:	4927      	ldr	r1, [pc, #156]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 8001154:	4313      	orrs	r3, r2
 8001156:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001158:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <HAL_RCC_OscConfig+0x4fc>)
 800115a:	2201      	movs	r2, #1
 800115c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115e:	f7ff fb21 	bl	80007a4 <HAL_GetTick>
 8001162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001164:	e008      	b.n	8001178 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001166:	f7ff fb1d 	bl	80007a4 <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d901      	bls.n	8001178 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e037      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001178:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d0f0      	beq.n	8001166 <HAL_RCC_OscConfig+0x46a>
 8001184:	e02f      	b.n	80011e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001186:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <HAL_RCC_OscConfig+0x4fc>)
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118c:	f7ff fb0a 	bl	80007a4 <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001194:	f7ff fb06 	bl	80007a4 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e020      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011a6:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1f0      	bne.n	8001194 <HAL_RCC_OscConfig+0x498>
 80011b2:	e018      	b.n	80011e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69db      	ldr	r3, [r3, #28]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d101      	bne.n	80011c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e013      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <HAL_RCC_OscConfig+0x4f4>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d106      	bne.n	80011e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011de:	429a      	cmp	r2, r3
 80011e0:	d001      	beq.n	80011e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40007000 	.word	0x40007000
 80011f8:	42420060 	.word	0x42420060

080011fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d101      	bne.n	8001210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e0d0      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001210:	4b6a      	ldr	r3, [pc, #424]	; (80013bc <HAL_RCC_ClockConfig+0x1c0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0307 	and.w	r3, r3, #7
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	429a      	cmp	r2, r3
 800121c:	d910      	bls.n	8001240 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800121e:	4b67      	ldr	r3, [pc, #412]	; (80013bc <HAL_RCC_ClockConfig+0x1c0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f023 0207 	bic.w	r2, r3, #7
 8001226:	4965      	ldr	r1, [pc, #404]	; (80013bc <HAL_RCC_ClockConfig+0x1c0>)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	4313      	orrs	r3, r2
 800122c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800122e:	4b63      	ldr	r3, [pc, #396]	; (80013bc <HAL_RCC_ClockConfig+0x1c0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	429a      	cmp	r2, r3
 800123a:	d001      	beq.n	8001240 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e0b8      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d020      	beq.n	800128e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	2b00      	cmp	r3, #0
 8001256:	d005      	beq.n	8001264 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001258:	4b59      	ldr	r3, [pc, #356]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	4a58      	ldr	r2, [pc, #352]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 800125e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001262:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	2b00      	cmp	r3, #0
 800126e:	d005      	beq.n	800127c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001270:	4b53      	ldr	r3, [pc, #332]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	4a52      	ldr	r2, [pc, #328]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001276:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800127a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800127c:	4b50      	ldr	r3, [pc, #320]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	494d      	ldr	r1, [pc, #308]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 800128a:	4313      	orrs	r3, r2
 800128c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b00      	cmp	r3, #0
 8001298:	d040      	beq.n	800131c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d107      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a2:	4b47      	ldr	r3, [pc, #284]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d115      	bne.n	80012da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e07f      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d107      	bne.n	80012ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ba:	4b41      	ldr	r3, [pc, #260]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d109      	bne.n	80012da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e073      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ca:	4b3d      	ldr	r3, [pc, #244]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e06b      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012da:	4b39      	ldr	r3, [pc, #228]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f023 0203 	bic.w	r2, r3, #3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	4936      	ldr	r1, [pc, #216]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012ec:	f7ff fa5a 	bl	80007a4 <HAL_GetTick>
 80012f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012f2:	e00a      	b.n	800130a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012f4:	f7ff fa56 	bl	80007a4 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001302:	4293      	cmp	r3, r2
 8001304:	d901      	bls.n	800130a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e053      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800130a:	4b2d      	ldr	r3, [pc, #180]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 020c 	and.w	r2, r3, #12
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	429a      	cmp	r2, r3
 800131a:	d1eb      	bne.n	80012f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800131c:	4b27      	ldr	r3, [pc, #156]	; (80013bc <HAL_RCC_ClockConfig+0x1c0>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	429a      	cmp	r2, r3
 8001328:	d210      	bcs.n	800134c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800132a:	4b24      	ldr	r3, [pc, #144]	; (80013bc <HAL_RCC_ClockConfig+0x1c0>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f023 0207 	bic.w	r2, r3, #7
 8001332:	4922      	ldr	r1, [pc, #136]	; (80013bc <HAL_RCC_ClockConfig+0x1c0>)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	4313      	orrs	r3, r2
 8001338:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800133a:	4b20      	ldr	r3, [pc, #128]	; (80013bc <HAL_RCC_ClockConfig+0x1c0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	429a      	cmp	r2, r3
 8001346:	d001      	beq.n	800134c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e032      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	2b00      	cmp	r3, #0
 8001356:	d008      	beq.n	800136a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001358:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	4916      	ldr	r1, [pc, #88]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001366:	4313      	orrs	r3, r2
 8001368:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	2b00      	cmp	r3, #0
 8001374:	d009      	beq.n	800138a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001376:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	490e      	ldr	r1, [pc, #56]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001386:	4313      	orrs	r3, r2
 8001388:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800138a:	f000 f821 	bl	80013d0 <HAL_RCC_GetSysClockFreq>
 800138e:	4601      	mov	r1, r0
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	091b      	lsrs	r3, r3, #4
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <HAL_RCC_ClockConfig+0x1c8>)
 800139c:	5cd3      	ldrb	r3, [r2, r3]
 800139e:	fa21 f303 	lsr.w	r3, r1, r3
 80013a2:	4a09      	ldr	r2, [pc, #36]	; (80013c8 <HAL_RCC_ClockConfig+0x1cc>)
 80013a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_RCC_ClockConfig+0x1d0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff f9b8 	bl	8000720 <HAL_InitTick>

  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40022000 	.word	0x40022000
 80013c0:	40021000 	.word	0x40021000
 80013c4:	0800290c 	.word	0x0800290c
 80013c8:	20000024 	.word	0x20000024
 80013cc:	20000028 	.word	0x20000028

080013d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013d0:	b490      	push	{r4, r7}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013d6:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <HAL_RCC_GetSysClockFreq+0xb0>)
 80013d8:	1d3c      	adds	r4, r7, #4
 80013da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013e0:	4b28      	ldr	r3, [pc, #160]	; (8001484 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013fa:	4b23      	ldr	r3, [pc, #140]	; (8001488 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	2b04      	cmp	r3, #4
 8001408:	d002      	beq.n	8001410 <HAL_RCC_GetSysClockFreq+0x40>
 800140a:	2b08      	cmp	r3, #8
 800140c:	d003      	beq.n	8001416 <HAL_RCC_GetSysClockFreq+0x46>
 800140e:	e02d      	b.n	800146c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001410:	4b1e      	ldr	r3, [pc, #120]	; (800148c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001412:	623b      	str	r3, [r7, #32]
      break;
 8001414:	e02d      	b.n	8001472 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	0c9b      	lsrs	r3, r3, #18
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001422:	4413      	add	r3, r2
 8001424:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001428:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d013      	beq.n	800145c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001434:	4b14      	ldr	r3, [pc, #80]	; (8001488 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	0c5b      	lsrs	r3, r3, #17
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001442:	4413      	add	r3, r2
 8001444:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001448:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	4a0f      	ldr	r2, [pc, #60]	; (800148c <HAL_RCC_GetSysClockFreq+0xbc>)
 800144e:	fb02 f203 	mul.w	r2, r2, r3
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	fbb2 f3f3 	udiv	r3, r2, r3
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
 800145a:	e004      	b.n	8001466 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	4a0c      	ldr	r2, [pc, #48]	; (8001490 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001460:	fb02 f303 	mul.w	r3, r2, r3
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	623b      	str	r3, [r7, #32]
      break;
 800146a:	e002      	b.n	8001472 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <HAL_RCC_GetSysClockFreq+0xbc>)
 800146e:	623b      	str	r3, [r7, #32]
      break;
 8001470:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001472:	6a3b      	ldr	r3, [r7, #32]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3728      	adds	r7, #40	; 0x28
 8001478:	46bd      	mov	sp, r7
 800147a:	bc90      	pop	{r4, r7}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	080028f8 	.word	0x080028f8
 8001484:	08002908 	.word	0x08002908
 8001488:	40021000 	.word	0x40021000
 800148c:	007a1200 	.word	0x007a1200
 8001490:	003d0900 	.word	0x003d0900

08001494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001498:	4b02      	ldr	r3, [pc, #8]	; (80014a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	20000024 	.word	0x20000024

080014a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014ac:	f7ff fff2 	bl	8001494 <HAL_RCC_GetHCLKFreq>
 80014b0:	4601      	mov	r1, r0
 80014b2:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	0a1b      	lsrs	r3, r3, #8
 80014b8:	f003 0307 	and.w	r3, r3, #7
 80014bc:	4a03      	ldr	r2, [pc, #12]	; (80014cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80014be:	5cd3      	ldrb	r3, [r2, r3]
 80014c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40021000 	.word	0x40021000
 80014cc:	0800291c 	.word	0x0800291c

080014d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014d4:	f7ff ffde 	bl	8001494 <HAL_RCC_GetHCLKFreq>
 80014d8:	4601      	mov	r1, r0
 80014da:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	0adb      	lsrs	r3, r3, #11
 80014e0:	f003 0307 	and.w	r3, r3, #7
 80014e4:	4a03      	ldr	r2, [pc, #12]	; (80014f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014e6:	5cd3      	ldrb	r3, [r2, r3]
 80014e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40021000 	.word	0x40021000
 80014f4:	0800291c 	.word	0x0800291c

080014f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001500:	4b0a      	ldr	r3, [pc, #40]	; (800152c <RCC_Delay+0x34>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <RCC_Delay+0x38>)
 8001506:	fba2 2303 	umull	r2, r3, r2, r3
 800150a:	0a5b      	lsrs	r3, r3, #9
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	fb02 f303 	mul.w	r3, r2, r3
 8001512:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001514:	bf00      	nop
  }
  while (Delay --);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	1e5a      	subs	r2, r3, #1
 800151a:	60fa      	str	r2, [r7, #12]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1f9      	bne.n	8001514 <RCC_Delay+0x1c>
}
 8001520:	bf00      	nop
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20000024 	.word	0x20000024
 8001530:	10624dd3 	.word	0x10624dd3

08001534 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e01d      	b.n	8001582 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d106      	bne.n	8001560 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7fe ff76 	bl	800044c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2202      	movs	r2, #2
 8001564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3304      	adds	r3, #4
 8001570:	4619      	mov	r1, r3
 8001572:	4610      	mov	r0, r2
 8001574:	f000 fa10 	bl	8001998 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800158a:	b480      	push	{r7}
 800158c:	b085      	sub	sp, #20
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68da      	ldr	r2, [r3, #12]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f042 0201 	orr.w	r2, r2, #1
 80015a0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2b06      	cmp	r3, #6
 80015b2:	d007      	beq.n	80015c4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 0201 	orr.w	r2, r2, #1
 80015c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d122      	bne.n	800162c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d11b      	bne.n	800162c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f06f 0202 	mvn.w	r2, #2
 80015fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 f9a4 	bl	8001960 <HAL_TIM_IC_CaptureCallback>
 8001618:	e005      	b.n	8001626 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 f997 	bl	800194e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 f9a6 	bl	8001972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	2b04      	cmp	r3, #4
 8001638:	d122      	bne.n	8001680 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	2b04      	cmp	r3, #4
 8001646:	d11b      	bne.n	8001680 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f06f 0204 	mvn.w	r2, #4
 8001650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2202      	movs	r2, #2
 8001656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 f97a 	bl	8001960 <HAL_TIM_IC_CaptureCallback>
 800166c:	e005      	b.n	800167a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 f96d 	bl	800194e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f000 f97c 	bl	8001972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	2b08      	cmp	r3, #8
 800168c:	d122      	bne.n	80016d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	2b08      	cmp	r3, #8
 800169a:	d11b      	bne.n	80016d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f06f 0208 	mvn.w	r2, #8
 80016a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2204      	movs	r2, #4
 80016aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f950 	bl	8001960 <HAL_TIM_IC_CaptureCallback>
 80016c0:	e005      	b.n	80016ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f943 	bl	800194e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 f952 	bl	8001972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	f003 0310 	and.w	r3, r3, #16
 80016de:	2b10      	cmp	r3, #16
 80016e0:	d122      	bne.n	8001728 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	f003 0310 	and.w	r3, r3, #16
 80016ec:	2b10      	cmp	r3, #16
 80016ee:	d11b      	bne.n	8001728 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f06f 0210 	mvn.w	r2, #16
 80016f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2208      	movs	r2, #8
 80016fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f926 	bl	8001960 <HAL_TIM_IC_CaptureCallback>
 8001714:	e005      	b.n	8001722 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f919 	bl	800194e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 f928 	bl	8001972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b01      	cmp	r3, #1
 8001734:	d10e      	bne.n	8001754 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b01      	cmp	r3, #1
 8001742:	d107      	bne.n	8001754 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f06f 0201 	mvn.w	r2, #1
 800174c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7fe fcfc 	bl	800014c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800175e:	2b80      	cmp	r3, #128	; 0x80
 8001760:	d10e      	bne.n	8001780 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800176c:	2b80      	cmp	r3, #128	; 0x80
 800176e:	d107      	bne.n	8001780 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 fa51 	bl	8001c22 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800178a:	2b40      	cmp	r3, #64	; 0x40
 800178c:	d10e      	bne.n	80017ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001798:	2b40      	cmp	r3, #64	; 0x40
 800179a:	d107      	bne.n	80017ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80017a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 f8ec 	bl	8001984 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	f003 0320 	and.w	r3, r3, #32
 80017b6:	2b20      	cmp	r3, #32
 80017b8:	d10e      	bne.n	80017d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	f003 0320 	and.w	r3, r3, #32
 80017c4:	2b20      	cmp	r3, #32
 80017c6:	d107      	bne.n	80017d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f06f 0220 	mvn.w	r2, #32
 80017d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 fa1c 	bl	8001c10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d101      	bne.n	80017f8 <HAL_TIM_ConfigClockSource+0x18>
 80017f4:	2302      	movs	r3, #2
 80017f6:	e0a6      	b.n	8001946 <HAL_TIM_ConfigClockSource+0x166>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2202      	movs	r2, #2
 8001804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001816:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800181e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b40      	cmp	r3, #64	; 0x40
 800182e:	d067      	beq.n	8001900 <HAL_TIM_ConfigClockSource+0x120>
 8001830:	2b40      	cmp	r3, #64	; 0x40
 8001832:	d80b      	bhi.n	800184c <HAL_TIM_ConfigClockSource+0x6c>
 8001834:	2b10      	cmp	r3, #16
 8001836:	d073      	beq.n	8001920 <HAL_TIM_ConfigClockSource+0x140>
 8001838:	2b10      	cmp	r3, #16
 800183a:	d802      	bhi.n	8001842 <HAL_TIM_ConfigClockSource+0x62>
 800183c:	2b00      	cmp	r3, #0
 800183e:	d06f      	beq.n	8001920 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001840:	e078      	b.n	8001934 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001842:	2b20      	cmp	r3, #32
 8001844:	d06c      	beq.n	8001920 <HAL_TIM_ConfigClockSource+0x140>
 8001846:	2b30      	cmp	r3, #48	; 0x30
 8001848:	d06a      	beq.n	8001920 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800184a:	e073      	b.n	8001934 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800184c:	2b70      	cmp	r3, #112	; 0x70
 800184e:	d00d      	beq.n	800186c <HAL_TIM_ConfigClockSource+0x8c>
 8001850:	2b70      	cmp	r3, #112	; 0x70
 8001852:	d804      	bhi.n	800185e <HAL_TIM_ConfigClockSource+0x7e>
 8001854:	2b50      	cmp	r3, #80	; 0x50
 8001856:	d033      	beq.n	80018c0 <HAL_TIM_ConfigClockSource+0xe0>
 8001858:	2b60      	cmp	r3, #96	; 0x60
 800185a:	d041      	beq.n	80018e0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800185c:	e06a      	b.n	8001934 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800185e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001862:	d066      	beq.n	8001932 <HAL_TIM_ConfigClockSource+0x152>
 8001864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001868:	d017      	beq.n	800189a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800186a:	e063      	b.n	8001934 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	6899      	ldr	r1, [r3, #8]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	f000 f965 	bl	8001b4a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800188e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	609a      	str	r2, [r3, #8]
      break;
 8001898:	e04c      	b.n	8001934 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6818      	ldr	r0, [r3, #0]
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	6899      	ldr	r1, [r3, #8]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	f000 f94e 	bl	8001b4a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018bc:	609a      	str	r2, [r3, #8]
      break;
 80018be:	e039      	b.n	8001934 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6818      	ldr	r0, [r3, #0]
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	6859      	ldr	r1, [r3, #4]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	461a      	mov	r2, r3
 80018ce:	f000 f8c5 	bl	8001a5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2150      	movs	r1, #80	; 0x50
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 f91c 	bl	8001b16 <TIM_ITRx_SetConfig>
      break;
 80018de:	e029      	b.n	8001934 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6818      	ldr	r0, [r3, #0]
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	6859      	ldr	r1, [r3, #4]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	461a      	mov	r2, r3
 80018ee:	f000 f8e3 	bl	8001ab8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2160      	movs	r1, #96	; 0x60
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 f90c 	bl	8001b16 <TIM_ITRx_SetConfig>
      break;
 80018fe:	e019      	b.n	8001934 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6818      	ldr	r0, [r3, #0]
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	6859      	ldr	r1, [r3, #4]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	461a      	mov	r2, r3
 800190e:	f000 f8a5 	bl	8001a5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2140      	movs	r1, #64	; 0x40
 8001918:	4618      	mov	r0, r3
 800191a:	f000 f8fc 	bl	8001b16 <TIM_ITRx_SetConfig>
      break;
 800191e:	e009      	b.n	8001934 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4619      	mov	r1, r3
 800192a:	4610      	mov	r0, r2
 800192c:	f000 f8f3 	bl	8001b16 <TIM_ITRx_SetConfig>
      break;
 8001930:	e000      	b.n	8001934 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001932:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr

08001972 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr
	...

08001998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a29      	ldr	r2, [pc, #164]	; (8001a50 <TIM_Base_SetConfig+0xb8>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d00b      	beq.n	80019c8 <TIM_Base_SetConfig+0x30>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019b6:	d007      	beq.n	80019c8 <TIM_Base_SetConfig+0x30>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a26      	ldr	r2, [pc, #152]	; (8001a54 <TIM_Base_SetConfig+0xbc>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d003      	beq.n	80019c8 <TIM_Base_SetConfig+0x30>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a25      	ldr	r2, [pc, #148]	; (8001a58 <TIM_Base_SetConfig+0xc0>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d108      	bne.n	80019da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a1c      	ldr	r2, [pc, #112]	; (8001a50 <TIM_Base_SetConfig+0xb8>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d00b      	beq.n	80019fa <TIM_Base_SetConfig+0x62>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019e8:	d007      	beq.n	80019fa <TIM_Base_SetConfig+0x62>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a19      	ldr	r2, [pc, #100]	; (8001a54 <TIM_Base_SetConfig+0xbc>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d003      	beq.n	80019fa <TIM_Base_SetConfig+0x62>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a18      	ldr	r2, [pc, #96]	; (8001a58 <TIM_Base_SetConfig+0xc0>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d108      	bne.n	8001a0c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <TIM_Base_SetConfig+0xb8>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d103      	bne.n	8001a40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	691a      	ldr	r2, [r3, #16]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	615a      	str	r2, [r3, #20]
}
 8001a46:	bf00      	nop
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	40012c00 	.word	0x40012c00
 8001a54:	40000400 	.word	0x40000400
 8001a58:	40000800 	.word	0x40000800

08001a5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	f023 0201 	bic.w	r2, r3, #1
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f023 030a 	bic.w	r3, r3, #10
 8001a98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	621a      	str	r2, [r3, #32]
}
 8001aae:	bf00      	nop
 8001ab0:	371c      	adds	r7, #28
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	f023 0210 	bic.w	r2, r3, #16
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001ae2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	031b      	lsls	r3, r3, #12
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001af4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	011b      	lsls	r3, r3, #4
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	621a      	str	r2, [r3, #32]
}
 8001b0c:	bf00      	nop
 8001b0e:	371c      	adds	r7, #28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr

08001b16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b085      	sub	sp, #20
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	f043 0307 	orr.w	r3, r3, #7
 8001b38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	609a      	str	r2, [r3, #8]
}
 8001b40:	bf00      	nop
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr

08001b4a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b087      	sub	sp, #28
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
 8001b56:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b64:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	021a      	lsls	r2, r3, #8
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	609a      	str	r2, [r3, #8]
}
 8001b7e:	bf00      	nop
 8001b80:	371c      	adds	r7, #28
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr

08001b88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d101      	bne.n	8001ba0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	e032      	b.n	8001c06 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2202      	movs	r2, #2
 8001bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bd8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68ba      	ldr	r2, [r7, #8]
 8001bf2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr

08001c10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr

08001c22 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e03f      	b.n	8001cc6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d106      	bne.n	8001c60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7fe fc3a 	bl	80004d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2224      	movs	r2, #36	; 0x24
 8001c64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68da      	ldr	r2, [r3, #12]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f90b 	bl	8001e94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	691a      	ldr	r2, [r3, #16]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	695a      	ldr	r2, [r3, #20]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2220      	movs	r2, #32
 8001cb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b088      	sub	sp, #32
 8001cd2:	af02      	add	r7, sp, #8
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	603b      	str	r3, [r7, #0]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b20      	cmp	r3, #32
 8001cec:	f040 8083 	bne.w	8001df6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d002      	beq.n	8001cfc <HAL_UART_Transmit+0x2e>
 8001cf6:	88fb      	ldrh	r3, [r7, #6]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e07b      	b.n	8001df8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d101      	bne.n	8001d0e <HAL_UART_Transmit+0x40>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	e074      	b.n	8001df8 <HAL_UART_Transmit+0x12a>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2221      	movs	r2, #33	; 0x21
 8001d20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001d24:	f7fe fd3e 	bl	80007a4 <HAL_GetTick>
 8001d28:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	88fa      	ldrh	r2, [r7, #6]
 8001d2e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	88fa      	ldrh	r2, [r7, #6]
 8001d34:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d36:	e042      	b.n	8001dbe <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d4e:	d122      	bne.n	8001d96 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	2200      	movs	r2, #0
 8001d58:	2180      	movs	r1, #128	; 0x80
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 f850 	bl	8001e00 <UART_WaitOnFlagUntilTimeout>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e046      	b.n	8001df8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	461a      	mov	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d7c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d103      	bne.n	8001d8e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	3302      	adds	r3, #2
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	e017      	b.n	8001dbe <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	3301      	adds	r3, #1
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	e013      	b.n	8001dbe <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2180      	movs	r1, #128	; 0x80
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f000 f82d 	bl	8001e00 <UART_WaitOnFlagUntilTimeout>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e023      	b.n	8001df8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	1c5a      	adds	r2, r3, #1
 8001db4:	60ba      	str	r2, [r7, #8]
 8001db6:	781a      	ldrb	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1b7      	bne.n	8001d38 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2140      	movs	r1, #64	; 0x40
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f000 f814 	bl	8001e00 <UART_WaitOnFlagUntilTimeout>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e00a      	b.n	8001df8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2220      	movs	r2, #32
 8001de6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	e000      	b.n	8001df8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001df6:	2302      	movs	r3, #2
  }
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e10:	e02c      	b.n	8001e6c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e18:	d028      	beq.n	8001e6c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d007      	beq.n	8001e30 <UART_WaitOnFlagUntilTimeout+0x30>
 8001e20:	f7fe fcc0 	bl	80007a4 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d21d      	bcs.n	8001e6c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e3e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0201 	bic.w	r2, r2, #1
 8001e4e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2220      	movs	r2, #32
 8001e54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e00f      	b.n	8001e8c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	4013      	ands	r3, r2
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	bf0c      	ite	eq
 8001e7c:	2301      	moveq	r3, #1
 8001e7e:	2300      	movne	r3, #0
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	461a      	mov	r2, r3
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d0c3      	beq.n	8001e12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001ece:	f023 030c 	bic.w	r3, r3, #12
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6812      	ldr	r2, [r2, #0]
 8001ed6:	68f9      	ldr	r1, [r7, #12]
 8001ed8:	430b      	orrs	r3, r1
 8001eda:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	699a      	ldr	r2, [r3, #24]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a52      	ldr	r2, [pc, #328]	; (8002040 <UART_SetConfig+0x1ac>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d14e      	bne.n	8001f9a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001efc:	f7ff fae8 	bl	80014d0 <HAL_RCC_GetPCLK2Freq>
 8001f00:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	009a      	lsls	r2, r3, #2
 8001f0c:	441a      	add	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f18:	4a4a      	ldr	r2, [pc, #296]	; (8002044 <UART_SetConfig+0x1b0>)
 8001f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	0119      	lsls	r1, r3, #4
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	4613      	mov	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	009a      	lsls	r2, r3, #2
 8001f2c:	441a      	add	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f38:	4b42      	ldr	r3, [pc, #264]	; (8002044 <UART_SetConfig+0x1b0>)
 8001f3a:	fba3 0302 	umull	r0, r3, r3, r2
 8001f3e:	095b      	lsrs	r3, r3, #5
 8001f40:	2064      	movs	r0, #100	; 0x64
 8001f42:	fb00 f303 	mul.w	r3, r0, r3
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	3332      	adds	r3, #50	; 0x32
 8001f4c:	4a3d      	ldr	r2, [pc, #244]	; (8002044 <UART_SetConfig+0x1b0>)
 8001f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f58:	4419      	add	r1, r3
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	009a      	lsls	r2, r3, #2
 8001f64:	441a      	add	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f70:	4b34      	ldr	r3, [pc, #208]	; (8002044 <UART_SetConfig+0x1b0>)
 8001f72:	fba3 0302 	umull	r0, r3, r3, r2
 8001f76:	095b      	lsrs	r3, r3, #5
 8001f78:	2064      	movs	r0, #100	; 0x64
 8001f7a:	fb00 f303 	mul.w	r3, r0, r3
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	011b      	lsls	r3, r3, #4
 8001f82:	3332      	adds	r3, #50	; 0x32
 8001f84:	4a2f      	ldr	r2, [pc, #188]	; (8002044 <UART_SetConfig+0x1b0>)
 8001f86:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	f003 020f 	and.w	r2, r3, #15
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	440a      	add	r2, r1
 8001f96:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001f98:	e04d      	b.n	8002036 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001f9a:	f7ff fa85 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 8001f9e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fa0:	68ba      	ldr	r2, [r7, #8]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009a      	lsls	r2, r3, #2
 8001faa:	441a      	add	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb6:	4a23      	ldr	r2, [pc, #140]	; (8002044 <UART_SetConfig+0x1b0>)
 8001fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbc:	095b      	lsrs	r3, r3, #5
 8001fbe:	0119      	lsls	r1, r3, #4
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	009a      	lsls	r2, r3, #2
 8001fca:	441a      	add	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fd6:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <UART_SetConfig+0x1b0>)
 8001fd8:	fba3 0302 	umull	r0, r3, r3, r2
 8001fdc:	095b      	lsrs	r3, r3, #5
 8001fde:	2064      	movs	r0, #100	; 0x64
 8001fe0:	fb00 f303 	mul.w	r3, r0, r3
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	011b      	lsls	r3, r3, #4
 8001fe8:	3332      	adds	r3, #50	; 0x32
 8001fea:	4a16      	ldr	r2, [pc, #88]	; (8002044 <UART_SetConfig+0x1b0>)
 8001fec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff0:	095b      	lsrs	r3, r3, #5
 8001ff2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ff6:	4419      	add	r1, r3
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	009a      	lsls	r2, r3, #2
 8002002:	441a      	add	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	fbb2 f2f3 	udiv	r2, r2, r3
 800200e:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <UART_SetConfig+0x1b0>)
 8002010:	fba3 0302 	umull	r0, r3, r3, r2
 8002014:	095b      	lsrs	r3, r3, #5
 8002016:	2064      	movs	r0, #100	; 0x64
 8002018:	fb00 f303 	mul.w	r3, r0, r3
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	011b      	lsls	r3, r3, #4
 8002020:	3332      	adds	r3, #50	; 0x32
 8002022:	4a08      	ldr	r2, [pc, #32]	; (8002044 <UART_SetConfig+0x1b0>)
 8002024:	fba2 2303 	umull	r2, r3, r2, r3
 8002028:	095b      	lsrs	r3, r3, #5
 800202a:	f003 020f 	and.w	r2, r3, #15
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	440a      	add	r2, r1
 8002034:	609a      	str	r2, [r3, #8]
}
 8002036:	bf00      	nop
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40013800 	.word	0x40013800
 8002044:	51eb851f 	.word	0x51eb851f

08002048 <__errno>:
 8002048:	4b01      	ldr	r3, [pc, #4]	; (8002050 <__errno+0x8>)
 800204a:	6818      	ldr	r0, [r3, #0]
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	20000030 	.word	0x20000030

08002054 <__libc_init_array>:
 8002054:	b570      	push	{r4, r5, r6, lr}
 8002056:	2500      	movs	r5, #0
 8002058:	4e0c      	ldr	r6, [pc, #48]	; (800208c <__libc_init_array+0x38>)
 800205a:	4c0d      	ldr	r4, [pc, #52]	; (8002090 <__libc_init_array+0x3c>)
 800205c:	1ba4      	subs	r4, r4, r6
 800205e:	10a4      	asrs	r4, r4, #2
 8002060:	42a5      	cmp	r5, r4
 8002062:	d109      	bne.n	8002078 <__libc_init_array+0x24>
 8002064:	f000 fc34 	bl	80028d0 <_init>
 8002068:	2500      	movs	r5, #0
 800206a:	4e0a      	ldr	r6, [pc, #40]	; (8002094 <__libc_init_array+0x40>)
 800206c:	4c0a      	ldr	r4, [pc, #40]	; (8002098 <__libc_init_array+0x44>)
 800206e:	1ba4      	subs	r4, r4, r6
 8002070:	10a4      	asrs	r4, r4, #2
 8002072:	42a5      	cmp	r5, r4
 8002074:	d105      	bne.n	8002082 <__libc_init_array+0x2e>
 8002076:	bd70      	pop	{r4, r5, r6, pc}
 8002078:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800207c:	4798      	blx	r3
 800207e:	3501      	adds	r5, #1
 8002080:	e7ee      	b.n	8002060 <__libc_init_array+0xc>
 8002082:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002086:	4798      	blx	r3
 8002088:	3501      	adds	r5, #1
 800208a:	e7f2      	b.n	8002072 <__libc_init_array+0x1e>
 800208c:	08002958 	.word	0x08002958
 8002090:	08002958 	.word	0x08002958
 8002094:	08002958 	.word	0x08002958
 8002098:	0800295c 	.word	0x0800295c

0800209c <memset>:
 800209c:	4603      	mov	r3, r0
 800209e:	4402      	add	r2, r0
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d100      	bne.n	80020a6 <memset+0xa>
 80020a4:	4770      	bx	lr
 80020a6:	f803 1b01 	strb.w	r1, [r3], #1
 80020aa:	e7f9      	b.n	80020a0 <memset+0x4>

080020ac <siprintf>:
 80020ac:	b40e      	push	{r1, r2, r3}
 80020ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80020b2:	b500      	push	{lr}
 80020b4:	b09c      	sub	sp, #112	; 0x70
 80020b6:	ab1d      	add	r3, sp, #116	; 0x74
 80020b8:	9002      	str	r0, [sp, #8]
 80020ba:	9006      	str	r0, [sp, #24]
 80020bc:	9107      	str	r1, [sp, #28]
 80020be:	9104      	str	r1, [sp, #16]
 80020c0:	4808      	ldr	r0, [pc, #32]	; (80020e4 <siprintf+0x38>)
 80020c2:	4909      	ldr	r1, [pc, #36]	; (80020e8 <siprintf+0x3c>)
 80020c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80020c8:	9105      	str	r1, [sp, #20]
 80020ca:	6800      	ldr	r0, [r0, #0]
 80020cc:	a902      	add	r1, sp, #8
 80020ce:	9301      	str	r3, [sp, #4]
 80020d0:	f000 f866 	bl	80021a0 <_svfiprintf_r>
 80020d4:	2200      	movs	r2, #0
 80020d6:	9b02      	ldr	r3, [sp, #8]
 80020d8:	701a      	strb	r2, [r3, #0]
 80020da:	b01c      	add	sp, #112	; 0x70
 80020dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80020e0:	b003      	add	sp, #12
 80020e2:	4770      	bx	lr
 80020e4:	20000030 	.word	0x20000030
 80020e8:	ffff0208 	.word	0xffff0208

080020ec <__ssputs_r>:
 80020ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020f0:	688e      	ldr	r6, [r1, #8]
 80020f2:	4682      	mov	sl, r0
 80020f4:	429e      	cmp	r6, r3
 80020f6:	460c      	mov	r4, r1
 80020f8:	4690      	mov	r8, r2
 80020fa:	4699      	mov	r9, r3
 80020fc:	d837      	bhi.n	800216e <__ssputs_r+0x82>
 80020fe:	898a      	ldrh	r2, [r1, #12]
 8002100:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002104:	d031      	beq.n	800216a <__ssputs_r+0x7e>
 8002106:	2302      	movs	r3, #2
 8002108:	6825      	ldr	r5, [r4, #0]
 800210a:	6909      	ldr	r1, [r1, #16]
 800210c:	1a6f      	subs	r7, r5, r1
 800210e:	6965      	ldr	r5, [r4, #20]
 8002110:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002114:	fb95 f5f3 	sdiv	r5, r5, r3
 8002118:	f109 0301 	add.w	r3, r9, #1
 800211c:	443b      	add	r3, r7
 800211e:	429d      	cmp	r5, r3
 8002120:	bf38      	it	cc
 8002122:	461d      	movcc	r5, r3
 8002124:	0553      	lsls	r3, r2, #21
 8002126:	d530      	bpl.n	800218a <__ssputs_r+0x9e>
 8002128:	4629      	mov	r1, r5
 800212a:	f000 fb37 	bl	800279c <_malloc_r>
 800212e:	4606      	mov	r6, r0
 8002130:	b950      	cbnz	r0, 8002148 <__ssputs_r+0x5c>
 8002132:	230c      	movs	r3, #12
 8002134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002138:	f8ca 3000 	str.w	r3, [sl]
 800213c:	89a3      	ldrh	r3, [r4, #12]
 800213e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002142:	81a3      	strh	r3, [r4, #12]
 8002144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002148:	463a      	mov	r2, r7
 800214a:	6921      	ldr	r1, [r4, #16]
 800214c:	f000 fab6 	bl	80026bc <memcpy>
 8002150:	89a3      	ldrh	r3, [r4, #12]
 8002152:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800215a:	81a3      	strh	r3, [r4, #12]
 800215c:	6126      	str	r6, [r4, #16]
 800215e:	443e      	add	r6, r7
 8002160:	6026      	str	r6, [r4, #0]
 8002162:	464e      	mov	r6, r9
 8002164:	6165      	str	r5, [r4, #20]
 8002166:	1bed      	subs	r5, r5, r7
 8002168:	60a5      	str	r5, [r4, #8]
 800216a:	454e      	cmp	r6, r9
 800216c:	d900      	bls.n	8002170 <__ssputs_r+0x84>
 800216e:	464e      	mov	r6, r9
 8002170:	4632      	mov	r2, r6
 8002172:	4641      	mov	r1, r8
 8002174:	6820      	ldr	r0, [r4, #0]
 8002176:	f000 faac 	bl	80026d2 <memmove>
 800217a:	68a3      	ldr	r3, [r4, #8]
 800217c:	2000      	movs	r0, #0
 800217e:	1b9b      	subs	r3, r3, r6
 8002180:	60a3      	str	r3, [r4, #8]
 8002182:	6823      	ldr	r3, [r4, #0]
 8002184:	441e      	add	r6, r3
 8002186:	6026      	str	r6, [r4, #0]
 8002188:	e7dc      	b.n	8002144 <__ssputs_r+0x58>
 800218a:	462a      	mov	r2, r5
 800218c:	f000 fb60 	bl	8002850 <_realloc_r>
 8002190:	4606      	mov	r6, r0
 8002192:	2800      	cmp	r0, #0
 8002194:	d1e2      	bne.n	800215c <__ssputs_r+0x70>
 8002196:	6921      	ldr	r1, [r4, #16]
 8002198:	4650      	mov	r0, sl
 800219a:	f000 fab3 	bl	8002704 <_free_r>
 800219e:	e7c8      	b.n	8002132 <__ssputs_r+0x46>

080021a0 <_svfiprintf_r>:
 80021a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021a4:	461d      	mov	r5, r3
 80021a6:	898b      	ldrh	r3, [r1, #12]
 80021a8:	b09d      	sub	sp, #116	; 0x74
 80021aa:	061f      	lsls	r7, r3, #24
 80021ac:	4680      	mov	r8, r0
 80021ae:	460c      	mov	r4, r1
 80021b0:	4616      	mov	r6, r2
 80021b2:	d50f      	bpl.n	80021d4 <_svfiprintf_r+0x34>
 80021b4:	690b      	ldr	r3, [r1, #16]
 80021b6:	b96b      	cbnz	r3, 80021d4 <_svfiprintf_r+0x34>
 80021b8:	2140      	movs	r1, #64	; 0x40
 80021ba:	f000 faef 	bl	800279c <_malloc_r>
 80021be:	6020      	str	r0, [r4, #0]
 80021c0:	6120      	str	r0, [r4, #16]
 80021c2:	b928      	cbnz	r0, 80021d0 <_svfiprintf_r+0x30>
 80021c4:	230c      	movs	r3, #12
 80021c6:	f8c8 3000 	str.w	r3, [r8]
 80021ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021ce:	e0c8      	b.n	8002362 <_svfiprintf_r+0x1c2>
 80021d0:	2340      	movs	r3, #64	; 0x40
 80021d2:	6163      	str	r3, [r4, #20]
 80021d4:	2300      	movs	r3, #0
 80021d6:	9309      	str	r3, [sp, #36]	; 0x24
 80021d8:	2320      	movs	r3, #32
 80021da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80021de:	2330      	movs	r3, #48	; 0x30
 80021e0:	f04f 0b01 	mov.w	fp, #1
 80021e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80021e8:	9503      	str	r5, [sp, #12]
 80021ea:	4637      	mov	r7, r6
 80021ec:	463d      	mov	r5, r7
 80021ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80021f2:	b10b      	cbz	r3, 80021f8 <_svfiprintf_r+0x58>
 80021f4:	2b25      	cmp	r3, #37	; 0x25
 80021f6:	d13e      	bne.n	8002276 <_svfiprintf_r+0xd6>
 80021f8:	ebb7 0a06 	subs.w	sl, r7, r6
 80021fc:	d00b      	beq.n	8002216 <_svfiprintf_r+0x76>
 80021fe:	4653      	mov	r3, sl
 8002200:	4632      	mov	r2, r6
 8002202:	4621      	mov	r1, r4
 8002204:	4640      	mov	r0, r8
 8002206:	f7ff ff71 	bl	80020ec <__ssputs_r>
 800220a:	3001      	adds	r0, #1
 800220c:	f000 80a4 	beq.w	8002358 <_svfiprintf_r+0x1b8>
 8002210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002212:	4453      	add	r3, sl
 8002214:	9309      	str	r3, [sp, #36]	; 0x24
 8002216:	783b      	ldrb	r3, [r7, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 809d 	beq.w	8002358 <_svfiprintf_r+0x1b8>
 800221e:	2300      	movs	r3, #0
 8002220:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002224:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002228:	9304      	str	r3, [sp, #16]
 800222a:	9307      	str	r3, [sp, #28]
 800222c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002230:	931a      	str	r3, [sp, #104]	; 0x68
 8002232:	462f      	mov	r7, r5
 8002234:	2205      	movs	r2, #5
 8002236:	f817 1b01 	ldrb.w	r1, [r7], #1
 800223a:	4850      	ldr	r0, [pc, #320]	; (800237c <_svfiprintf_r+0x1dc>)
 800223c:	f000 fa30 	bl	80026a0 <memchr>
 8002240:	9b04      	ldr	r3, [sp, #16]
 8002242:	b9d0      	cbnz	r0, 800227a <_svfiprintf_r+0xda>
 8002244:	06d9      	lsls	r1, r3, #27
 8002246:	bf44      	itt	mi
 8002248:	2220      	movmi	r2, #32
 800224a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800224e:	071a      	lsls	r2, r3, #28
 8002250:	bf44      	itt	mi
 8002252:	222b      	movmi	r2, #43	; 0x2b
 8002254:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002258:	782a      	ldrb	r2, [r5, #0]
 800225a:	2a2a      	cmp	r2, #42	; 0x2a
 800225c:	d015      	beq.n	800228a <_svfiprintf_r+0xea>
 800225e:	462f      	mov	r7, r5
 8002260:	2000      	movs	r0, #0
 8002262:	250a      	movs	r5, #10
 8002264:	9a07      	ldr	r2, [sp, #28]
 8002266:	4639      	mov	r1, r7
 8002268:	f811 3b01 	ldrb.w	r3, [r1], #1
 800226c:	3b30      	subs	r3, #48	; 0x30
 800226e:	2b09      	cmp	r3, #9
 8002270:	d94d      	bls.n	800230e <_svfiprintf_r+0x16e>
 8002272:	b1b8      	cbz	r0, 80022a4 <_svfiprintf_r+0x104>
 8002274:	e00f      	b.n	8002296 <_svfiprintf_r+0xf6>
 8002276:	462f      	mov	r7, r5
 8002278:	e7b8      	b.n	80021ec <_svfiprintf_r+0x4c>
 800227a:	4a40      	ldr	r2, [pc, #256]	; (800237c <_svfiprintf_r+0x1dc>)
 800227c:	463d      	mov	r5, r7
 800227e:	1a80      	subs	r0, r0, r2
 8002280:	fa0b f000 	lsl.w	r0, fp, r0
 8002284:	4318      	orrs	r0, r3
 8002286:	9004      	str	r0, [sp, #16]
 8002288:	e7d3      	b.n	8002232 <_svfiprintf_r+0x92>
 800228a:	9a03      	ldr	r2, [sp, #12]
 800228c:	1d11      	adds	r1, r2, #4
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	9103      	str	r1, [sp, #12]
 8002292:	2a00      	cmp	r2, #0
 8002294:	db01      	blt.n	800229a <_svfiprintf_r+0xfa>
 8002296:	9207      	str	r2, [sp, #28]
 8002298:	e004      	b.n	80022a4 <_svfiprintf_r+0x104>
 800229a:	4252      	negs	r2, r2
 800229c:	f043 0302 	orr.w	r3, r3, #2
 80022a0:	9207      	str	r2, [sp, #28]
 80022a2:	9304      	str	r3, [sp, #16]
 80022a4:	783b      	ldrb	r3, [r7, #0]
 80022a6:	2b2e      	cmp	r3, #46	; 0x2e
 80022a8:	d10c      	bne.n	80022c4 <_svfiprintf_r+0x124>
 80022aa:	787b      	ldrb	r3, [r7, #1]
 80022ac:	2b2a      	cmp	r3, #42	; 0x2a
 80022ae:	d133      	bne.n	8002318 <_svfiprintf_r+0x178>
 80022b0:	9b03      	ldr	r3, [sp, #12]
 80022b2:	3702      	adds	r7, #2
 80022b4:	1d1a      	adds	r2, r3, #4
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	9203      	str	r2, [sp, #12]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	bfb8      	it	lt
 80022be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80022c2:	9305      	str	r3, [sp, #20]
 80022c4:	4d2e      	ldr	r5, [pc, #184]	; (8002380 <_svfiprintf_r+0x1e0>)
 80022c6:	2203      	movs	r2, #3
 80022c8:	7839      	ldrb	r1, [r7, #0]
 80022ca:	4628      	mov	r0, r5
 80022cc:	f000 f9e8 	bl	80026a0 <memchr>
 80022d0:	b138      	cbz	r0, 80022e2 <_svfiprintf_r+0x142>
 80022d2:	2340      	movs	r3, #64	; 0x40
 80022d4:	1b40      	subs	r0, r0, r5
 80022d6:	fa03 f000 	lsl.w	r0, r3, r0
 80022da:	9b04      	ldr	r3, [sp, #16]
 80022dc:	3701      	adds	r7, #1
 80022de:	4303      	orrs	r3, r0
 80022e0:	9304      	str	r3, [sp, #16]
 80022e2:	7839      	ldrb	r1, [r7, #0]
 80022e4:	2206      	movs	r2, #6
 80022e6:	4827      	ldr	r0, [pc, #156]	; (8002384 <_svfiprintf_r+0x1e4>)
 80022e8:	1c7e      	adds	r6, r7, #1
 80022ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80022ee:	f000 f9d7 	bl	80026a0 <memchr>
 80022f2:	2800      	cmp	r0, #0
 80022f4:	d038      	beq.n	8002368 <_svfiprintf_r+0x1c8>
 80022f6:	4b24      	ldr	r3, [pc, #144]	; (8002388 <_svfiprintf_r+0x1e8>)
 80022f8:	bb13      	cbnz	r3, 8002340 <_svfiprintf_r+0x1a0>
 80022fa:	9b03      	ldr	r3, [sp, #12]
 80022fc:	3307      	adds	r3, #7
 80022fe:	f023 0307 	bic.w	r3, r3, #7
 8002302:	3308      	adds	r3, #8
 8002304:	9303      	str	r3, [sp, #12]
 8002306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002308:	444b      	add	r3, r9
 800230a:	9309      	str	r3, [sp, #36]	; 0x24
 800230c:	e76d      	b.n	80021ea <_svfiprintf_r+0x4a>
 800230e:	fb05 3202 	mla	r2, r5, r2, r3
 8002312:	2001      	movs	r0, #1
 8002314:	460f      	mov	r7, r1
 8002316:	e7a6      	b.n	8002266 <_svfiprintf_r+0xc6>
 8002318:	2300      	movs	r3, #0
 800231a:	250a      	movs	r5, #10
 800231c:	4619      	mov	r1, r3
 800231e:	3701      	adds	r7, #1
 8002320:	9305      	str	r3, [sp, #20]
 8002322:	4638      	mov	r0, r7
 8002324:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002328:	3a30      	subs	r2, #48	; 0x30
 800232a:	2a09      	cmp	r2, #9
 800232c:	d903      	bls.n	8002336 <_svfiprintf_r+0x196>
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0c8      	beq.n	80022c4 <_svfiprintf_r+0x124>
 8002332:	9105      	str	r1, [sp, #20]
 8002334:	e7c6      	b.n	80022c4 <_svfiprintf_r+0x124>
 8002336:	fb05 2101 	mla	r1, r5, r1, r2
 800233a:	2301      	movs	r3, #1
 800233c:	4607      	mov	r7, r0
 800233e:	e7f0      	b.n	8002322 <_svfiprintf_r+0x182>
 8002340:	ab03      	add	r3, sp, #12
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	4622      	mov	r2, r4
 8002346:	4b11      	ldr	r3, [pc, #68]	; (800238c <_svfiprintf_r+0x1ec>)
 8002348:	a904      	add	r1, sp, #16
 800234a:	4640      	mov	r0, r8
 800234c:	f3af 8000 	nop.w
 8002350:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002354:	4681      	mov	r9, r0
 8002356:	d1d6      	bne.n	8002306 <_svfiprintf_r+0x166>
 8002358:	89a3      	ldrh	r3, [r4, #12]
 800235a:	065b      	lsls	r3, r3, #25
 800235c:	f53f af35 	bmi.w	80021ca <_svfiprintf_r+0x2a>
 8002360:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002362:	b01d      	add	sp, #116	; 0x74
 8002364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002368:	ab03      	add	r3, sp, #12
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	4622      	mov	r2, r4
 800236e:	4b07      	ldr	r3, [pc, #28]	; (800238c <_svfiprintf_r+0x1ec>)
 8002370:	a904      	add	r1, sp, #16
 8002372:	4640      	mov	r0, r8
 8002374:	f000 f882 	bl	800247c <_printf_i>
 8002378:	e7ea      	b.n	8002350 <_svfiprintf_r+0x1b0>
 800237a:	bf00      	nop
 800237c:	08002924 	.word	0x08002924
 8002380:	0800292a 	.word	0x0800292a
 8002384:	0800292e 	.word	0x0800292e
 8002388:	00000000 	.word	0x00000000
 800238c:	080020ed 	.word	0x080020ed

08002390 <_printf_common>:
 8002390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002394:	4691      	mov	r9, r2
 8002396:	461f      	mov	r7, r3
 8002398:	688a      	ldr	r2, [r1, #8]
 800239a:	690b      	ldr	r3, [r1, #16]
 800239c:	4606      	mov	r6, r0
 800239e:	4293      	cmp	r3, r2
 80023a0:	bfb8      	it	lt
 80023a2:	4613      	movlt	r3, r2
 80023a4:	f8c9 3000 	str.w	r3, [r9]
 80023a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80023ac:	460c      	mov	r4, r1
 80023ae:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80023b2:	b112      	cbz	r2, 80023ba <_printf_common+0x2a>
 80023b4:	3301      	adds	r3, #1
 80023b6:	f8c9 3000 	str.w	r3, [r9]
 80023ba:	6823      	ldr	r3, [r4, #0]
 80023bc:	0699      	lsls	r1, r3, #26
 80023be:	bf42      	ittt	mi
 80023c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80023c4:	3302      	addmi	r3, #2
 80023c6:	f8c9 3000 	strmi.w	r3, [r9]
 80023ca:	6825      	ldr	r5, [r4, #0]
 80023cc:	f015 0506 	ands.w	r5, r5, #6
 80023d0:	d107      	bne.n	80023e2 <_printf_common+0x52>
 80023d2:	f104 0a19 	add.w	sl, r4, #25
 80023d6:	68e3      	ldr	r3, [r4, #12]
 80023d8:	f8d9 2000 	ldr.w	r2, [r9]
 80023dc:	1a9b      	subs	r3, r3, r2
 80023de:	42ab      	cmp	r3, r5
 80023e0:	dc29      	bgt.n	8002436 <_printf_common+0xa6>
 80023e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80023e6:	6822      	ldr	r2, [r4, #0]
 80023e8:	3300      	adds	r3, #0
 80023ea:	bf18      	it	ne
 80023ec:	2301      	movne	r3, #1
 80023ee:	0692      	lsls	r2, r2, #26
 80023f0:	d42e      	bmi.n	8002450 <_printf_common+0xc0>
 80023f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80023f6:	4639      	mov	r1, r7
 80023f8:	4630      	mov	r0, r6
 80023fa:	47c0      	blx	r8
 80023fc:	3001      	adds	r0, #1
 80023fe:	d021      	beq.n	8002444 <_printf_common+0xb4>
 8002400:	6823      	ldr	r3, [r4, #0]
 8002402:	68e5      	ldr	r5, [r4, #12]
 8002404:	f003 0306 	and.w	r3, r3, #6
 8002408:	2b04      	cmp	r3, #4
 800240a:	bf18      	it	ne
 800240c:	2500      	movne	r5, #0
 800240e:	f8d9 2000 	ldr.w	r2, [r9]
 8002412:	f04f 0900 	mov.w	r9, #0
 8002416:	bf08      	it	eq
 8002418:	1aad      	subeq	r5, r5, r2
 800241a:	68a3      	ldr	r3, [r4, #8]
 800241c:	6922      	ldr	r2, [r4, #16]
 800241e:	bf08      	it	eq
 8002420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002424:	4293      	cmp	r3, r2
 8002426:	bfc4      	itt	gt
 8002428:	1a9b      	subgt	r3, r3, r2
 800242a:	18ed      	addgt	r5, r5, r3
 800242c:	341a      	adds	r4, #26
 800242e:	454d      	cmp	r5, r9
 8002430:	d11a      	bne.n	8002468 <_printf_common+0xd8>
 8002432:	2000      	movs	r0, #0
 8002434:	e008      	b.n	8002448 <_printf_common+0xb8>
 8002436:	2301      	movs	r3, #1
 8002438:	4652      	mov	r2, sl
 800243a:	4639      	mov	r1, r7
 800243c:	4630      	mov	r0, r6
 800243e:	47c0      	blx	r8
 8002440:	3001      	adds	r0, #1
 8002442:	d103      	bne.n	800244c <_printf_common+0xbc>
 8002444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800244c:	3501      	adds	r5, #1
 800244e:	e7c2      	b.n	80023d6 <_printf_common+0x46>
 8002450:	2030      	movs	r0, #48	; 0x30
 8002452:	18e1      	adds	r1, r4, r3
 8002454:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800245e:	4422      	add	r2, r4
 8002460:	3302      	adds	r3, #2
 8002462:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002466:	e7c4      	b.n	80023f2 <_printf_common+0x62>
 8002468:	2301      	movs	r3, #1
 800246a:	4622      	mov	r2, r4
 800246c:	4639      	mov	r1, r7
 800246e:	4630      	mov	r0, r6
 8002470:	47c0      	blx	r8
 8002472:	3001      	adds	r0, #1
 8002474:	d0e6      	beq.n	8002444 <_printf_common+0xb4>
 8002476:	f109 0901 	add.w	r9, r9, #1
 800247a:	e7d8      	b.n	800242e <_printf_common+0x9e>

0800247c <_printf_i>:
 800247c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002480:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002484:	460c      	mov	r4, r1
 8002486:	7e09      	ldrb	r1, [r1, #24]
 8002488:	b085      	sub	sp, #20
 800248a:	296e      	cmp	r1, #110	; 0x6e
 800248c:	4617      	mov	r7, r2
 800248e:	4606      	mov	r6, r0
 8002490:	4698      	mov	r8, r3
 8002492:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002494:	f000 80b3 	beq.w	80025fe <_printf_i+0x182>
 8002498:	d822      	bhi.n	80024e0 <_printf_i+0x64>
 800249a:	2963      	cmp	r1, #99	; 0x63
 800249c:	d036      	beq.n	800250c <_printf_i+0x90>
 800249e:	d80a      	bhi.n	80024b6 <_printf_i+0x3a>
 80024a0:	2900      	cmp	r1, #0
 80024a2:	f000 80b9 	beq.w	8002618 <_printf_i+0x19c>
 80024a6:	2958      	cmp	r1, #88	; 0x58
 80024a8:	f000 8083 	beq.w	80025b2 <_printf_i+0x136>
 80024ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80024b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80024b4:	e032      	b.n	800251c <_printf_i+0xa0>
 80024b6:	2964      	cmp	r1, #100	; 0x64
 80024b8:	d001      	beq.n	80024be <_printf_i+0x42>
 80024ba:	2969      	cmp	r1, #105	; 0x69
 80024bc:	d1f6      	bne.n	80024ac <_printf_i+0x30>
 80024be:	6820      	ldr	r0, [r4, #0]
 80024c0:	6813      	ldr	r3, [r2, #0]
 80024c2:	0605      	lsls	r5, r0, #24
 80024c4:	f103 0104 	add.w	r1, r3, #4
 80024c8:	d52a      	bpl.n	8002520 <_printf_i+0xa4>
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6011      	str	r1, [r2, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	da03      	bge.n	80024da <_printf_i+0x5e>
 80024d2:	222d      	movs	r2, #45	; 0x2d
 80024d4:	425b      	negs	r3, r3
 80024d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80024da:	486f      	ldr	r0, [pc, #444]	; (8002698 <_printf_i+0x21c>)
 80024dc:	220a      	movs	r2, #10
 80024de:	e039      	b.n	8002554 <_printf_i+0xd8>
 80024e0:	2973      	cmp	r1, #115	; 0x73
 80024e2:	f000 809d 	beq.w	8002620 <_printf_i+0x1a4>
 80024e6:	d808      	bhi.n	80024fa <_printf_i+0x7e>
 80024e8:	296f      	cmp	r1, #111	; 0x6f
 80024ea:	d020      	beq.n	800252e <_printf_i+0xb2>
 80024ec:	2970      	cmp	r1, #112	; 0x70
 80024ee:	d1dd      	bne.n	80024ac <_printf_i+0x30>
 80024f0:	6823      	ldr	r3, [r4, #0]
 80024f2:	f043 0320 	orr.w	r3, r3, #32
 80024f6:	6023      	str	r3, [r4, #0]
 80024f8:	e003      	b.n	8002502 <_printf_i+0x86>
 80024fa:	2975      	cmp	r1, #117	; 0x75
 80024fc:	d017      	beq.n	800252e <_printf_i+0xb2>
 80024fe:	2978      	cmp	r1, #120	; 0x78
 8002500:	d1d4      	bne.n	80024ac <_printf_i+0x30>
 8002502:	2378      	movs	r3, #120	; 0x78
 8002504:	4865      	ldr	r0, [pc, #404]	; (800269c <_printf_i+0x220>)
 8002506:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800250a:	e055      	b.n	80025b8 <_printf_i+0x13c>
 800250c:	6813      	ldr	r3, [r2, #0]
 800250e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002512:	1d19      	adds	r1, r3, #4
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6011      	str	r1, [r2, #0]
 8002518:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800251c:	2301      	movs	r3, #1
 800251e:	e08c      	b.n	800263a <_printf_i+0x1be>
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002526:	6011      	str	r1, [r2, #0]
 8002528:	bf18      	it	ne
 800252a:	b21b      	sxthne	r3, r3
 800252c:	e7cf      	b.n	80024ce <_printf_i+0x52>
 800252e:	6813      	ldr	r3, [r2, #0]
 8002530:	6825      	ldr	r5, [r4, #0]
 8002532:	1d18      	adds	r0, r3, #4
 8002534:	6010      	str	r0, [r2, #0]
 8002536:	0628      	lsls	r0, r5, #24
 8002538:	d501      	bpl.n	800253e <_printf_i+0xc2>
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	e002      	b.n	8002544 <_printf_i+0xc8>
 800253e:	0668      	lsls	r0, r5, #25
 8002540:	d5fb      	bpl.n	800253a <_printf_i+0xbe>
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	296f      	cmp	r1, #111	; 0x6f
 8002546:	bf14      	ite	ne
 8002548:	220a      	movne	r2, #10
 800254a:	2208      	moveq	r2, #8
 800254c:	4852      	ldr	r0, [pc, #328]	; (8002698 <_printf_i+0x21c>)
 800254e:	2100      	movs	r1, #0
 8002550:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002554:	6865      	ldr	r5, [r4, #4]
 8002556:	2d00      	cmp	r5, #0
 8002558:	60a5      	str	r5, [r4, #8]
 800255a:	f2c0 8095 	blt.w	8002688 <_printf_i+0x20c>
 800255e:	6821      	ldr	r1, [r4, #0]
 8002560:	f021 0104 	bic.w	r1, r1, #4
 8002564:	6021      	str	r1, [r4, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d13d      	bne.n	80025e6 <_printf_i+0x16a>
 800256a:	2d00      	cmp	r5, #0
 800256c:	f040 808e 	bne.w	800268c <_printf_i+0x210>
 8002570:	4665      	mov	r5, ip
 8002572:	2a08      	cmp	r2, #8
 8002574:	d10b      	bne.n	800258e <_printf_i+0x112>
 8002576:	6823      	ldr	r3, [r4, #0]
 8002578:	07db      	lsls	r3, r3, #31
 800257a:	d508      	bpl.n	800258e <_printf_i+0x112>
 800257c:	6923      	ldr	r3, [r4, #16]
 800257e:	6862      	ldr	r2, [r4, #4]
 8002580:	429a      	cmp	r2, r3
 8002582:	bfde      	ittt	le
 8002584:	2330      	movle	r3, #48	; 0x30
 8002586:	f805 3c01 	strble.w	r3, [r5, #-1]
 800258a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800258e:	ebac 0305 	sub.w	r3, ip, r5
 8002592:	6123      	str	r3, [r4, #16]
 8002594:	f8cd 8000 	str.w	r8, [sp]
 8002598:	463b      	mov	r3, r7
 800259a:	aa03      	add	r2, sp, #12
 800259c:	4621      	mov	r1, r4
 800259e:	4630      	mov	r0, r6
 80025a0:	f7ff fef6 	bl	8002390 <_printf_common>
 80025a4:	3001      	adds	r0, #1
 80025a6:	d14d      	bne.n	8002644 <_printf_i+0x1c8>
 80025a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025ac:	b005      	add	sp, #20
 80025ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025b2:	4839      	ldr	r0, [pc, #228]	; (8002698 <_printf_i+0x21c>)
 80025b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80025b8:	6813      	ldr	r3, [r2, #0]
 80025ba:	6821      	ldr	r1, [r4, #0]
 80025bc:	1d1d      	adds	r5, r3, #4
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6015      	str	r5, [r2, #0]
 80025c2:	060a      	lsls	r2, r1, #24
 80025c4:	d50b      	bpl.n	80025de <_printf_i+0x162>
 80025c6:	07ca      	lsls	r2, r1, #31
 80025c8:	bf44      	itt	mi
 80025ca:	f041 0120 	orrmi.w	r1, r1, #32
 80025ce:	6021      	strmi	r1, [r4, #0]
 80025d0:	b91b      	cbnz	r3, 80025da <_printf_i+0x15e>
 80025d2:	6822      	ldr	r2, [r4, #0]
 80025d4:	f022 0220 	bic.w	r2, r2, #32
 80025d8:	6022      	str	r2, [r4, #0]
 80025da:	2210      	movs	r2, #16
 80025dc:	e7b7      	b.n	800254e <_printf_i+0xd2>
 80025de:	064d      	lsls	r5, r1, #25
 80025e0:	bf48      	it	mi
 80025e2:	b29b      	uxthmi	r3, r3
 80025e4:	e7ef      	b.n	80025c6 <_printf_i+0x14a>
 80025e6:	4665      	mov	r5, ip
 80025e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80025ec:	fb02 3311 	mls	r3, r2, r1, r3
 80025f0:	5cc3      	ldrb	r3, [r0, r3]
 80025f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80025f6:	460b      	mov	r3, r1
 80025f8:	2900      	cmp	r1, #0
 80025fa:	d1f5      	bne.n	80025e8 <_printf_i+0x16c>
 80025fc:	e7b9      	b.n	8002572 <_printf_i+0xf6>
 80025fe:	6813      	ldr	r3, [r2, #0]
 8002600:	6825      	ldr	r5, [r4, #0]
 8002602:	1d18      	adds	r0, r3, #4
 8002604:	6961      	ldr	r1, [r4, #20]
 8002606:	6010      	str	r0, [r2, #0]
 8002608:	0628      	lsls	r0, r5, #24
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	d501      	bpl.n	8002612 <_printf_i+0x196>
 800260e:	6019      	str	r1, [r3, #0]
 8002610:	e002      	b.n	8002618 <_printf_i+0x19c>
 8002612:	066a      	lsls	r2, r5, #25
 8002614:	d5fb      	bpl.n	800260e <_printf_i+0x192>
 8002616:	8019      	strh	r1, [r3, #0]
 8002618:	2300      	movs	r3, #0
 800261a:	4665      	mov	r5, ip
 800261c:	6123      	str	r3, [r4, #16]
 800261e:	e7b9      	b.n	8002594 <_printf_i+0x118>
 8002620:	6813      	ldr	r3, [r2, #0]
 8002622:	1d19      	adds	r1, r3, #4
 8002624:	6011      	str	r1, [r2, #0]
 8002626:	681d      	ldr	r5, [r3, #0]
 8002628:	6862      	ldr	r2, [r4, #4]
 800262a:	2100      	movs	r1, #0
 800262c:	4628      	mov	r0, r5
 800262e:	f000 f837 	bl	80026a0 <memchr>
 8002632:	b108      	cbz	r0, 8002638 <_printf_i+0x1bc>
 8002634:	1b40      	subs	r0, r0, r5
 8002636:	6060      	str	r0, [r4, #4]
 8002638:	6863      	ldr	r3, [r4, #4]
 800263a:	6123      	str	r3, [r4, #16]
 800263c:	2300      	movs	r3, #0
 800263e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002642:	e7a7      	b.n	8002594 <_printf_i+0x118>
 8002644:	6923      	ldr	r3, [r4, #16]
 8002646:	462a      	mov	r2, r5
 8002648:	4639      	mov	r1, r7
 800264a:	4630      	mov	r0, r6
 800264c:	47c0      	blx	r8
 800264e:	3001      	adds	r0, #1
 8002650:	d0aa      	beq.n	80025a8 <_printf_i+0x12c>
 8002652:	6823      	ldr	r3, [r4, #0]
 8002654:	079b      	lsls	r3, r3, #30
 8002656:	d413      	bmi.n	8002680 <_printf_i+0x204>
 8002658:	68e0      	ldr	r0, [r4, #12]
 800265a:	9b03      	ldr	r3, [sp, #12]
 800265c:	4298      	cmp	r0, r3
 800265e:	bfb8      	it	lt
 8002660:	4618      	movlt	r0, r3
 8002662:	e7a3      	b.n	80025ac <_printf_i+0x130>
 8002664:	2301      	movs	r3, #1
 8002666:	464a      	mov	r2, r9
 8002668:	4639      	mov	r1, r7
 800266a:	4630      	mov	r0, r6
 800266c:	47c0      	blx	r8
 800266e:	3001      	adds	r0, #1
 8002670:	d09a      	beq.n	80025a8 <_printf_i+0x12c>
 8002672:	3501      	adds	r5, #1
 8002674:	68e3      	ldr	r3, [r4, #12]
 8002676:	9a03      	ldr	r2, [sp, #12]
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	42ab      	cmp	r3, r5
 800267c:	dcf2      	bgt.n	8002664 <_printf_i+0x1e8>
 800267e:	e7eb      	b.n	8002658 <_printf_i+0x1dc>
 8002680:	2500      	movs	r5, #0
 8002682:	f104 0919 	add.w	r9, r4, #25
 8002686:	e7f5      	b.n	8002674 <_printf_i+0x1f8>
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1ac      	bne.n	80025e6 <_printf_i+0x16a>
 800268c:	7803      	ldrb	r3, [r0, #0]
 800268e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002692:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002696:	e76c      	b.n	8002572 <_printf_i+0xf6>
 8002698:	08002935 	.word	0x08002935
 800269c:	08002946 	.word	0x08002946

080026a0 <memchr>:
 80026a0:	b510      	push	{r4, lr}
 80026a2:	b2c9      	uxtb	r1, r1
 80026a4:	4402      	add	r2, r0
 80026a6:	4290      	cmp	r0, r2
 80026a8:	4603      	mov	r3, r0
 80026aa:	d101      	bne.n	80026b0 <memchr+0x10>
 80026ac:	2300      	movs	r3, #0
 80026ae:	e003      	b.n	80026b8 <memchr+0x18>
 80026b0:	781c      	ldrb	r4, [r3, #0]
 80026b2:	3001      	adds	r0, #1
 80026b4:	428c      	cmp	r4, r1
 80026b6:	d1f6      	bne.n	80026a6 <memchr+0x6>
 80026b8:	4618      	mov	r0, r3
 80026ba:	bd10      	pop	{r4, pc}

080026bc <memcpy>:
 80026bc:	b510      	push	{r4, lr}
 80026be:	1e43      	subs	r3, r0, #1
 80026c0:	440a      	add	r2, r1
 80026c2:	4291      	cmp	r1, r2
 80026c4:	d100      	bne.n	80026c8 <memcpy+0xc>
 80026c6:	bd10      	pop	{r4, pc}
 80026c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80026d0:	e7f7      	b.n	80026c2 <memcpy+0x6>

080026d2 <memmove>:
 80026d2:	4288      	cmp	r0, r1
 80026d4:	b510      	push	{r4, lr}
 80026d6:	eb01 0302 	add.w	r3, r1, r2
 80026da:	d807      	bhi.n	80026ec <memmove+0x1a>
 80026dc:	1e42      	subs	r2, r0, #1
 80026de:	4299      	cmp	r1, r3
 80026e0:	d00a      	beq.n	80026f8 <memmove+0x26>
 80026e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026e6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80026ea:	e7f8      	b.n	80026de <memmove+0xc>
 80026ec:	4283      	cmp	r3, r0
 80026ee:	d9f5      	bls.n	80026dc <memmove+0xa>
 80026f0:	1881      	adds	r1, r0, r2
 80026f2:	1ad2      	subs	r2, r2, r3
 80026f4:	42d3      	cmn	r3, r2
 80026f6:	d100      	bne.n	80026fa <memmove+0x28>
 80026f8:	bd10      	pop	{r4, pc}
 80026fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80026fe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002702:	e7f7      	b.n	80026f4 <memmove+0x22>

08002704 <_free_r>:
 8002704:	b538      	push	{r3, r4, r5, lr}
 8002706:	4605      	mov	r5, r0
 8002708:	2900      	cmp	r1, #0
 800270a:	d043      	beq.n	8002794 <_free_r+0x90>
 800270c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002710:	1f0c      	subs	r4, r1, #4
 8002712:	2b00      	cmp	r3, #0
 8002714:	bfb8      	it	lt
 8002716:	18e4      	addlt	r4, r4, r3
 8002718:	f000 f8d0 	bl	80028bc <__malloc_lock>
 800271c:	4a1e      	ldr	r2, [pc, #120]	; (8002798 <_free_r+0x94>)
 800271e:	6813      	ldr	r3, [r2, #0]
 8002720:	4610      	mov	r0, r2
 8002722:	b933      	cbnz	r3, 8002732 <_free_r+0x2e>
 8002724:	6063      	str	r3, [r4, #4]
 8002726:	6014      	str	r4, [r2, #0]
 8002728:	4628      	mov	r0, r5
 800272a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800272e:	f000 b8c6 	b.w	80028be <__malloc_unlock>
 8002732:	42a3      	cmp	r3, r4
 8002734:	d90b      	bls.n	800274e <_free_r+0x4a>
 8002736:	6821      	ldr	r1, [r4, #0]
 8002738:	1862      	adds	r2, r4, r1
 800273a:	4293      	cmp	r3, r2
 800273c:	bf01      	itttt	eq
 800273e:	681a      	ldreq	r2, [r3, #0]
 8002740:	685b      	ldreq	r3, [r3, #4]
 8002742:	1852      	addeq	r2, r2, r1
 8002744:	6022      	streq	r2, [r4, #0]
 8002746:	6063      	str	r3, [r4, #4]
 8002748:	6004      	str	r4, [r0, #0]
 800274a:	e7ed      	b.n	8002728 <_free_r+0x24>
 800274c:	4613      	mov	r3, r2
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	b10a      	cbz	r2, 8002756 <_free_r+0x52>
 8002752:	42a2      	cmp	r2, r4
 8002754:	d9fa      	bls.n	800274c <_free_r+0x48>
 8002756:	6819      	ldr	r1, [r3, #0]
 8002758:	1858      	adds	r0, r3, r1
 800275a:	42a0      	cmp	r0, r4
 800275c:	d10b      	bne.n	8002776 <_free_r+0x72>
 800275e:	6820      	ldr	r0, [r4, #0]
 8002760:	4401      	add	r1, r0
 8002762:	1858      	adds	r0, r3, r1
 8002764:	4282      	cmp	r2, r0
 8002766:	6019      	str	r1, [r3, #0]
 8002768:	d1de      	bne.n	8002728 <_free_r+0x24>
 800276a:	6810      	ldr	r0, [r2, #0]
 800276c:	6852      	ldr	r2, [r2, #4]
 800276e:	4401      	add	r1, r0
 8002770:	6019      	str	r1, [r3, #0]
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	e7d8      	b.n	8002728 <_free_r+0x24>
 8002776:	d902      	bls.n	800277e <_free_r+0x7a>
 8002778:	230c      	movs	r3, #12
 800277a:	602b      	str	r3, [r5, #0]
 800277c:	e7d4      	b.n	8002728 <_free_r+0x24>
 800277e:	6820      	ldr	r0, [r4, #0]
 8002780:	1821      	adds	r1, r4, r0
 8002782:	428a      	cmp	r2, r1
 8002784:	bf01      	itttt	eq
 8002786:	6811      	ldreq	r1, [r2, #0]
 8002788:	6852      	ldreq	r2, [r2, #4]
 800278a:	1809      	addeq	r1, r1, r0
 800278c:	6021      	streq	r1, [r4, #0]
 800278e:	6062      	str	r2, [r4, #4]
 8002790:	605c      	str	r4, [r3, #4]
 8002792:	e7c9      	b.n	8002728 <_free_r+0x24>
 8002794:	bd38      	pop	{r3, r4, r5, pc}
 8002796:	bf00      	nop
 8002798:	200000b4 	.word	0x200000b4

0800279c <_malloc_r>:
 800279c:	b570      	push	{r4, r5, r6, lr}
 800279e:	1ccd      	adds	r5, r1, #3
 80027a0:	f025 0503 	bic.w	r5, r5, #3
 80027a4:	3508      	adds	r5, #8
 80027a6:	2d0c      	cmp	r5, #12
 80027a8:	bf38      	it	cc
 80027aa:	250c      	movcc	r5, #12
 80027ac:	2d00      	cmp	r5, #0
 80027ae:	4606      	mov	r6, r0
 80027b0:	db01      	blt.n	80027b6 <_malloc_r+0x1a>
 80027b2:	42a9      	cmp	r1, r5
 80027b4:	d903      	bls.n	80027be <_malloc_r+0x22>
 80027b6:	230c      	movs	r3, #12
 80027b8:	6033      	str	r3, [r6, #0]
 80027ba:	2000      	movs	r0, #0
 80027bc:	bd70      	pop	{r4, r5, r6, pc}
 80027be:	f000 f87d 	bl	80028bc <__malloc_lock>
 80027c2:	4a21      	ldr	r2, [pc, #132]	; (8002848 <_malloc_r+0xac>)
 80027c4:	6814      	ldr	r4, [r2, #0]
 80027c6:	4621      	mov	r1, r4
 80027c8:	b991      	cbnz	r1, 80027f0 <_malloc_r+0x54>
 80027ca:	4c20      	ldr	r4, [pc, #128]	; (800284c <_malloc_r+0xb0>)
 80027cc:	6823      	ldr	r3, [r4, #0]
 80027ce:	b91b      	cbnz	r3, 80027d8 <_malloc_r+0x3c>
 80027d0:	4630      	mov	r0, r6
 80027d2:	f000 f863 	bl	800289c <_sbrk_r>
 80027d6:	6020      	str	r0, [r4, #0]
 80027d8:	4629      	mov	r1, r5
 80027da:	4630      	mov	r0, r6
 80027dc:	f000 f85e 	bl	800289c <_sbrk_r>
 80027e0:	1c43      	adds	r3, r0, #1
 80027e2:	d124      	bne.n	800282e <_malloc_r+0x92>
 80027e4:	230c      	movs	r3, #12
 80027e6:	4630      	mov	r0, r6
 80027e8:	6033      	str	r3, [r6, #0]
 80027ea:	f000 f868 	bl	80028be <__malloc_unlock>
 80027ee:	e7e4      	b.n	80027ba <_malloc_r+0x1e>
 80027f0:	680b      	ldr	r3, [r1, #0]
 80027f2:	1b5b      	subs	r3, r3, r5
 80027f4:	d418      	bmi.n	8002828 <_malloc_r+0x8c>
 80027f6:	2b0b      	cmp	r3, #11
 80027f8:	d90f      	bls.n	800281a <_malloc_r+0x7e>
 80027fa:	600b      	str	r3, [r1, #0]
 80027fc:	18cc      	adds	r4, r1, r3
 80027fe:	50cd      	str	r5, [r1, r3]
 8002800:	4630      	mov	r0, r6
 8002802:	f000 f85c 	bl	80028be <__malloc_unlock>
 8002806:	f104 000b 	add.w	r0, r4, #11
 800280a:	1d23      	adds	r3, r4, #4
 800280c:	f020 0007 	bic.w	r0, r0, #7
 8002810:	1ac3      	subs	r3, r0, r3
 8002812:	d0d3      	beq.n	80027bc <_malloc_r+0x20>
 8002814:	425a      	negs	r2, r3
 8002816:	50e2      	str	r2, [r4, r3]
 8002818:	e7d0      	b.n	80027bc <_malloc_r+0x20>
 800281a:	684b      	ldr	r3, [r1, #4]
 800281c:	428c      	cmp	r4, r1
 800281e:	bf16      	itet	ne
 8002820:	6063      	strne	r3, [r4, #4]
 8002822:	6013      	streq	r3, [r2, #0]
 8002824:	460c      	movne	r4, r1
 8002826:	e7eb      	b.n	8002800 <_malloc_r+0x64>
 8002828:	460c      	mov	r4, r1
 800282a:	6849      	ldr	r1, [r1, #4]
 800282c:	e7cc      	b.n	80027c8 <_malloc_r+0x2c>
 800282e:	1cc4      	adds	r4, r0, #3
 8002830:	f024 0403 	bic.w	r4, r4, #3
 8002834:	42a0      	cmp	r0, r4
 8002836:	d005      	beq.n	8002844 <_malloc_r+0xa8>
 8002838:	1a21      	subs	r1, r4, r0
 800283a:	4630      	mov	r0, r6
 800283c:	f000 f82e 	bl	800289c <_sbrk_r>
 8002840:	3001      	adds	r0, #1
 8002842:	d0cf      	beq.n	80027e4 <_malloc_r+0x48>
 8002844:	6025      	str	r5, [r4, #0]
 8002846:	e7db      	b.n	8002800 <_malloc_r+0x64>
 8002848:	200000b4 	.word	0x200000b4
 800284c:	200000b8 	.word	0x200000b8

08002850 <_realloc_r>:
 8002850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002852:	4607      	mov	r7, r0
 8002854:	4614      	mov	r4, r2
 8002856:	460e      	mov	r6, r1
 8002858:	b921      	cbnz	r1, 8002864 <_realloc_r+0x14>
 800285a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800285e:	4611      	mov	r1, r2
 8002860:	f7ff bf9c 	b.w	800279c <_malloc_r>
 8002864:	b922      	cbnz	r2, 8002870 <_realloc_r+0x20>
 8002866:	f7ff ff4d 	bl	8002704 <_free_r>
 800286a:	4625      	mov	r5, r4
 800286c:	4628      	mov	r0, r5
 800286e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002870:	f000 f826 	bl	80028c0 <_malloc_usable_size_r>
 8002874:	42a0      	cmp	r0, r4
 8002876:	d20f      	bcs.n	8002898 <_realloc_r+0x48>
 8002878:	4621      	mov	r1, r4
 800287a:	4638      	mov	r0, r7
 800287c:	f7ff ff8e 	bl	800279c <_malloc_r>
 8002880:	4605      	mov	r5, r0
 8002882:	2800      	cmp	r0, #0
 8002884:	d0f2      	beq.n	800286c <_realloc_r+0x1c>
 8002886:	4631      	mov	r1, r6
 8002888:	4622      	mov	r2, r4
 800288a:	f7ff ff17 	bl	80026bc <memcpy>
 800288e:	4631      	mov	r1, r6
 8002890:	4638      	mov	r0, r7
 8002892:	f7ff ff37 	bl	8002704 <_free_r>
 8002896:	e7e9      	b.n	800286c <_realloc_r+0x1c>
 8002898:	4635      	mov	r5, r6
 800289a:	e7e7      	b.n	800286c <_realloc_r+0x1c>

0800289c <_sbrk_r>:
 800289c:	b538      	push	{r3, r4, r5, lr}
 800289e:	2300      	movs	r3, #0
 80028a0:	4c05      	ldr	r4, [pc, #20]	; (80028b8 <_sbrk_r+0x1c>)
 80028a2:	4605      	mov	r5, r0
 80028a4:	4608      	mov	r0, r1
 80028a6:	6023      	str	r3, [r4, #0]
 80028a8:	f7fd fe94 	bl	80005d4 <_sbrk>
 80028ac:	1c43      	adds	r3, r0, #1
 80028ae:	d102      	bne.n	80028b6 <_sbrk_r+0x1a>
 80028b0:	6823      	ldr	r3, [r4, #0]
 80028b2:	b103      	cbz	r3, 80028b6 <_sbrk_r+0x1a>
 80028b4:	602b      	str	r3, [r5, #0]
 80028b6:	bd38      	pop	{r3, r4, r5, pc}
 80028b8:	20000140 	.word	0x20000140

080028bc <__malloc_lock>:
 80028bc:	4770      	bx	lr

080028be <__malloc_unlock>:
 80028be:	4770      	bx	lr

080028c0 <_malloc_usable_size_r>:
 80028c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028c4:	1f18      	subs	r0, r3, #4
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	bfbc      	itt	lt
 80028ca:	580b      	ldrlt	r3, [r1, r0]
 80028cc:	18c0      	addlt	r0, r0, r3
 80028ce:	4770      	bx	lr

080028d0 <_init>:
 80028d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028d2:	bf00      	nop
 80028d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028d6:	bc08      	pop	{r3}
 80028d8:	469e      	mov	lr, r3
 80028da:	4770      	bx	lr

080028dc <_fini>:
 80028dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028de:	bf00      	nop
 80028e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028e2:	bc08      	pop	{r3}
 80028e4:	469e      	mov	lr, r3
 80028e6:	4770      	bx	lr
