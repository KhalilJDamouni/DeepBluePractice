
SWD_Test_Debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000181c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08001928  08001928  00011928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019c0  080019c0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080019c0  080019c0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080019c0  080019c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019c0  080019c0  000119c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019c4  080019c4  000119c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080019c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000070  08001a38  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08001a38  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000426c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000103e  00000000  00000000  00024305  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000450  00000000  00000000  00025348  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003b8  00000000  00000000  00025798  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000138ef  00000000  00000000  00025b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000406e  00000000  00000000  0003943f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00068b90  00000000  00000000  0003d4ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a603d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014c8  00000000  00000000  000a60b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08001910 	.word	0x08001910

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08001910 	.word	0x08001910

0800014c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000154:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800016c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000170:	2b00      	cmp	r3, #0
 8000172:	d00b      	beq.n	800018c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000174:	e000      	b.n	8000178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d0f9      	beq.n	8000176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000182:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800018c:	687b      	ldr	r3, [r7, #4]
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0
 800019e:	60f8      	str	r0, [r7, #12]
 80001a0:	60b9      	str	r1, [r7, #8]
 80001a2:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; ++i)
 80001a4:	2300      	movs	r3, #0
 80001a6:	617b      	str	r3, [r7, #20]
 80001a8:	e009      	b.n	80001be <_write+0x26>
	{
		//Prints the data over the ITM trace.
		ITM_SendChar(*ptr++);
 80001aa:	68bb      	ldr	r3, [r7, #8]
 80001ac:	1c5a      	adds	r2, r3, #1
 80001ae:	60ba      	str	r2, [r7, #8]
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	4618      	mov	r0, r3
 80001b4:	f7ff ffca 	bl	800014c <ITM_SendChar>
	for(int i = 0; i < len; ++i)
 80001b8:	697b      	ldr	r3, [r7, #20]
 80001ba:	3301      	adds	r3, #1
 80001bc:	617b      	str	r3, [r7, #20]
 80001be:	697a      	ldr	r2, [r7, #20]
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	dbf1      	blt.n	80001aa <_write+0x12>
	}
	return len;
 80001c6:	687b      	ldr	r3, [r7, #4]
}
 80001c8:	4618      	mov	r0, r3
 80001ca:	3718      	adds	r7, #24
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 f9b2 	bl	800053c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f80c 	bl	80001f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f84c 	bl	8000278 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Hello World!!\n");
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <main+0x20>)
 80001e2:	f000 ff8b 	bl	80010fc <puts>
	  HAL_Delay(500);
 80001e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001ea:	f000 fa09 	bl	8000600 <HAL_Delay>
  {
 80001ee:	e7f7      	b.n	80001e0 <main+0x10>
 80001f0:	08001928 	.word	0x08001928

080001f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b090      	sub	sp, #64	; 0x40
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0318 	add.w	r3, r7, #24
 80001fe:	2228      	movs	r2, #40	; 0x28
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f000 ff16 	bl	8001034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000216:	2302      	movs	r3, #2
 8000218:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021a:	2301      	movs	r3, #1
 800021c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800021e:	2310      	movs	r3, #16
 8000220:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000222:	2302      	movs	r3, #2
 8000224:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000226:	2300      	movs	r3, #0
 8000228:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800022a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800022e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000230:	f107 0318 	add.w	r3, r7, #24
 8000234:	4618      	mov	r0, r3
 8000236:	f000 fae9 	bl	800080c <HAL_RCC_OscConfig>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000240:	f000 f83c 	bl	80002bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000244:	230f      	movs	r3, #15
 8000246:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000248:	2302      	movs	r3, #2
 800024a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000254:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	2102      	movs	r1, #2
 800025e:	4618      	mov	r0, r3
 8000260:	f000 fd54 	bl	8000d0c <HAL_RCC_ClockConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800026a:	f000 f827 	bl	80002bc <Error_Handler>
  }
}
 800026e:	bf00      	nop
 8000270:	3740      	adds	r7, #64	; 0x40
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
	...

08000278 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <MX_GPIO_Init+0x40>)
 8000280:	699b      	ldr	r3, [r3, #24]
 8000282:	4a0d      	ldr	r2, [pc, #52]	; (80002b8 <MX_GPIO_Init+0x40>)
 8000284:	f043 0304 	orr.w	r3, r3, #4
 8000288:	6193      	str	r3, [r2, #24]
 800028a:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <MX_GPIO_Init+0x40>)
 800028c:	699b      	ldr	r3, [r3, #24]
 800028e:	f003 0304 	and.w	r3, r3, #4
 8000292:	607b      	str	r3, [r7, #4]
 8000294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000296:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <MX_GPIO_Init+0x40>)
 8000298:	699b      	ldr	r3, [r3, #24]
 800029a:	4a07      	ldr	r2, [pc, #28]	; (80002b8 <MX_GPIO_Init+0x40>)
 800029c:	f043 0308 	orr.w	r3, r3, #8
 80002a0:	6193      	str	r3, [r2, #24]
 80002a2:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <MX_GPIO_Init+0x40>)
 80002a4:	699b      	ldr	r3, [r3, #24]
 80002a6:	f003 0308 	and.w	r3, r3, #8
 80002aa:	603b      	str	r3, [r7, #0]
 80002ac:	683b      	ldr	r3, [r7, #0]

}
 80002ae:	bf00      	nop
 80002b0:	370c      	adds	r7, #12
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr
 80002b8:	40021000 	.word	0x40021000

080002bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr

080002c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b085      	sub	sp, #20
 80002cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002ce:	4b15      	ldr	r3, [pc, #84]	; (8000324 <HAL_MspInit+0x5c>)
 80002d0:	699b      	ldr	r3, [r3, #24]
 80002d2:	4a14      	ldr	r2, [pc, #80]	; (8000324 <HAL_MspInit+0x5c>)
 80002d4:	f043 0301 	orr.w	r3, r3, #1
 80002d8:	6193      	str	r3, [r2, #24]
 80002da:	4b12      	ldr	r3, [pc, #72]	; (8000324 <HAL_MspInit+0x5c>)
 80002dc:	699b      	ldr	r3, [r3, #24]
 80002de:	f003 0301 	and.w	r3, r3, #1
 80002e2:	60bb      	str	r3, [r7, #8]
 80002e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002e6:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <HAL_MspInit+0x5c>)
 80002e8:	69db      	ldr	r3, [r3, #28]
 80002ea:	4a0e      	ldr	r2, [pc, #56]	; (8000324 <HAL_MspInit+0x5c>)
 80002ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002f0:	61d3      	str	r3, [r2, #28]
 80002f2:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <HAL_MspInit+0x5c>)
 80002f4:	69db      	ldr	r3, [r3, #28]
 80002f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002fa:	607b      	str	r3, [r7, #4]
 80002fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002fe:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <HAL_MspInit+0x60>)
 8000300:	685b      	ldr	r3, [r3, #4]
 8000302:	60fb      	str	r3, [r7, #12]
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800030a:	60fb      	str	r3, [r7, #12]
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	4a04      	ldr	r2, [pc, #16]	; (8000328 <HAL_MspInit+0x60>)
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800031a:	bf00      	nop
 800031c:	3714      	adds	r7, #20
 800031e:	46bd      	mov	sp, r7
 8000320:	bc80      	pop	{r7}
 8000322:	4770      	bx	lr
 8000324:	40021000 	.word	0x40021000
 8000328:	40010000 	.word	0x40010000

0800032c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr

08000338 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800033c:	e7fe      	b.n	800033c <HardFault_Handler+0x4>

0800033e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000342:	e7fe      	b.n	8000342 <MemManage_Handler+0x4>

08000344 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000348:	e7fe      	b.n	8000348 <BusFault_Handler+0x4>

0800034a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800034a:	b480      	push	{r7}
 800034c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800034e:	e7fe      	b.n	800034e <UsageFault_Handler+0x4>

08000350 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr

0800035c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr

08000368 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800036c:	bf00      	nop
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr

08000374 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000378:	f000 f926 	bl	80005c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800037c:	bf00      	nop
 800037e:	bd80      	pop	{r7, pc}

08000380 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0
 8000386:	60f8      	str	r0, [r7, #12]
 8000388:	60b9      	str	r1, [r7, #8]
 800038a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800038c:	2300      	movs	r3, #0
 800038e:	617b      	str	r3, [r7, #20]
 8000390:	e00a      	b.n	80003a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000392:	f3af 8000 	nop.w
 8000396:	4601      	mov	r1, r0
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	1c5a      	adds	r2, r3, #1
 800039c:	60ba      	str	r2, [r7, #8]
 800039e:	b2ca      	uxtb	r2, r1
 80003a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	3301      	adds	r3, #1
 80003a6:	617b      	str	r3, [r7, #20]
 80003a8:	697a      	ldr	r2, [r7, #20]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	dbf0      	blt.n	8000392 <_read+0x12>
	}

return len;
 80003b0:	687b      	ldr	r3, [r7, #4]
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	3718      	adds	r7, #24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}

080003ba <_close>:
	}
	return len;
}

int _close(int file)
{
 80003ba:	b480      	push	{r7}
 80003bc:	b083      	sub	sp, #12
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
	return -1;
 80003c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr

080003d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003e0:	605a      	str	r2, [r3, #4]
	return 0;
 80003e2:	2300      	movs	r3, #0
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr

080003ee <_isatty>:

int _isatty(int file)
{
 80003ee:	b480      	push	{r7}
 80003f0:	b083      	sub	sp, #12
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	6078      	str	r0, [r7, #4]
	return 1;
 80003f6:	2301      	movs	r3, #1
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr

08000402 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000402:	b480      	push	{r7}
 8000404:	b085      	sub	sp, #20
 8000406:	af00      	add	r7, sp, #0
 8000408:	60f8      	str	r0, [r7, #12]
 800040a:	60b9      	str	r1, [r7, #8]
 800040c:	607a      	str	r2, [r7, #4]
	return 0;
 800040e:	2300      	movs	r3, #0
}
 8000410:	4618      	mov	r0, r3
 8000412:	3714      	adds	r7, #20
 8000414:	46bd      	mov	sp, r7
 8000416:	bc80      	pop	{r7}
 8000418:	4770      	bx	lr
	...

0800041c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b086      	sub	sp, #24
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000424:	4a14      	ldr	r2, [pc, #80]	; (8000478 <_sbrk+0x5c>)
 8000426:	4b15      	ldr	r3, [pc, #84]	; (800047c <_sbrk+0x60>)
 8000428:	1ad3      	subs	r3, r2, r3
 800042a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800042c:	697b      	ldr	r3, [r7, #20]
 800042e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000430:	4b13      	ldr	r3, [pc, #76]	; (8000480 <_sbrk+0x64>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d102      	bne.n	800043e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000438:	4b11      	ldr	r3, [pc, #68]	; (8000480 <_sbrk+0x64>)
 800043a:	4a12      	ldr	r2, [pc, #72]	; (8000484 <_sbrk+0x68>)
 800043c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800043e:	4b10      	ldr	r3, [pc, #64]	; (8000480 <_sbrk+0x64>)
 8000440:	681a      	ldr	r2, [r3, #0]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4413      	add	r3, r2
 8000446:	693a      	ldr	r2, [r7, #16]
 8000448:	429a      	cmp	r2, r3
 800044a:	d207      	bcs.n	800045c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800044c:	f000 fdc8 	bl	8000fe0 <__errno>
 8000450:	4602      	mov	r2, r0
 8000452:	230c      	movs	r3, #12
 8000454:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000456:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800045a:	e009      	b.n	8000470 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800045c:	4b08      	ldr	r3, [pc, #32]	; (8000480 <_sbrk+0x64>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000462:	4b07      	ldr	r3, [pc, #28]	; (8000480 <_sbrk+0x64>)
 8000464:	681a      	ldr	r2, [r3, #0]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4413      	add	r3, r2
 800046a:	4a05      	ldr	r2, [pc, #20]	; (8000480 <_sbrk+0x64>)
 800046c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800046e:	68fb      	ldr	r3, [r7, #12]
}
 8000470:	4618      	mov	r0, r3
 8000472:	3718      	adds	r7, #24
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	20005000 	.word	0x20005000
 800047c:	00000400 	.word	0x00000400
 8000480:	2000008c 	.word	0x2000008c
 8000484:	200000a0 	.word	0x200000a0

08000488 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800048c:	4b15      	ldr	r3, [pc, #84]	; (80004e4 <SystemInit+0x5c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a14      	ldr	r2, [pc, #80]	; (80004e4 <SystemInit+0x5c>)
 8000492:	f043 0301 	orr.w	r3, r3, #1
 8000496:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000498:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <SystemInit+0x5c>)
 800049a:	685a      	ldr	r2, [r3, #4]
 800049c:	4911      	ldr	r1, [pc, #68]	; (80004e4 <SystemInit+0x5c>)
 800049e:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <SystemInit+0x60>)
 80004a0:	4013      	ands	r3, r2
 80004a2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80004a4:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <SystemInit+0x5c>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a0e      	ldr	r2, [pc, #56]	; (80004e4 <SystemInit+0x5c>)
 80004aa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80004ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004b2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80004b4:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <SystemInit+0x5c>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a0a      	ldr	r2, [pc, #40]	; (80004e4 <SystemInit+0x5c>)
 80004ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004be:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80004c0:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <SystemInit+0x5c>)
 80004c2:	685b      	ldr	r3, [r3, #4]
 80004c4:	4a07      	ldr	r2, [pc, #28]	; (80004e4 <SystemInit+0x5c>)
 80004c6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80004ca:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80004cc:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <SystemInit+0x5c>)
 80004ce:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80004d2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <SystemInit+0x64>)
 80004d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004da:	609a      	str	r2, [r3, #8]
#endif 
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr
 80004e4:	40021000 	.word	0x40021000
 80004e8:	f8ff0000 	.word	0xf8ff0000
 80004ec:	e000ed00 	.word	0xe000ed00

080004f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80004f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80004f2:	e003      	b.n	80004fc <LoopCopyDataInit>

080004f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80004f4:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80004f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80004f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80004fa:	3104      	adds	r1, #4

080004fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80004fc:	480a      	ldr	r0, [pc, #40]	; (8000528 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80004fe:	4b0b      	ldr	r3, [pc, #44]	; (800052c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000500:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000502:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000504:	d3f6      	bcc.n	80004f4 <CopyDataInit>
  ldr r2, =_sbss
 8000506:	4a0a      	ldr	r2, [pc, #40]	; (8000530 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000508:	e002      	b.n	8000510 <LoopFillZerobss>

0800050a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800050a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800050c:	f842 3b04 	str.w	r3, [r2], #4

08000510 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000510:	4b08      	ldr	r3, [pc, #32]	; (8000534 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000512:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000514:	d3f9      	bcc.n	800050a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000516:	f7ff ffb7 	bl	8000488 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800051a:	f000 fd67 	bl	8000fec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800051e:	f7ff fe57 	bl	80001d0 <main>
  bx lr
 8000522:	4770      	bx	lr
  ldr r3, =_sidata
 8000524:	080019c8 	.word	0x080019c8
  ldr r0, =_sdata
 8000528:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800052c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000530:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000534:	200000a0 	.word	0x200000a0

08000538 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000538:	e7fe      	b.n	8000538 <ADC1_2_IRQHandler>
	...

0800053c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000540:	4b08      	ldr	r3, [pc, #32]	; (8000564 <HAL_Init+0x28>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a07      	ldr	r2, [pc, #28]	; (8000564 <HAL_Init+0x28>)
 8000546:	f043 0310 	orr.w	r3, r3, #16
 800054a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800054c:	2003      	movs	r0, #3
 800054e:	f000 f929 	bl	80007a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000552:	2000      	movs	r0, #0
 8000554:	f000 f808 	bl	8000568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000558:	f7ff feb6 	bl	80002c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800055c:	2300      	movs	r3, #0
}
 800055e:	4618      	mov	r0, r3
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40022000 	.word	0x40022000

08000568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <HAL_InitTick+0x54>)
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <HAL_InitTick+0x58>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4619      	mov	r1, r3
 800057a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000582:	fbb2 f3f3 	udiv	r3, r2, r3
 8000586:	4618      	mov	r0, r3
 8000588:	f000 f933 	bl	80007f2 <HAL_SYSTICK_Config>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
 8000594:	e00e      	b.n	80005b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b0f      	cmp	r3, #15
 800059a:	d80a      	bhi.n	80005b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800059c:	2200      	movs	r2, #0
 800059e:	6879      	ldr	r1, [r7, #4]
 80005a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005a4:	f000 f909 	bl	80007ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <HAL_InitTick+0x5c>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005ae:	2300      	movs	r3, #0
 80005b0:	e000      	b.n	80005b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005b2:	2301      	movs	r3, #1
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000000 	.word	0x20000000
 80005c0:	20000008 	.word	0x20000008
 80005c4:	20000004 	.word	0x20000004

080005c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <HAL_IncTick+0x1c>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	461a      	mov	r2, r3
 80005d2:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <HAL_IncTick+0x20>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4413      	add	r3, r2
 80005d8:	4a03      	ldr	r2, [pc, #12]	; (80005e8 <HAL_IncTick+0x20>)
 80005da:	6013      	str	r3, [r2, #0]
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr
 80005e4:	20000008 	.word	0x20000008
 80005e8:	20000098 	.word	0x20000098

080005ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  return uwTick;
 80005f0:	4b02      	ldr	r3, [pc, #8]	; (80005fc <HAL_GetTick+0x10>)
 80005f2:	681b      	ldr	r3, [r3, #0]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	20000098 	.word	0x20000098

08000600 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000608:	f7ff fff0 	bl	80005ec <HAL_GetTick>
 800060c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000618:	d005      	beq.n	8000626 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <HAL_Delay+0x40>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	461a      	mov	r2, r3
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	4413      	add	r3, r2
 8000624:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000626:	bf00      	nop
 8000628:	f7ff ffe0 	bl	80005ec <HAL_GetTick>
 800062c:	4602      	mov	r2, r0
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	429a      	cmp	r2, r3
 8000636:	d8f7      	bhi.n	8000628 <HAL_Delay+0x28>
  {
  }
}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000008 	.word	0x20000008

08000644 <__NVIC_SetPriorityGrouping>:
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f003 0307 	and.w	r3, r3, #7
 8000652:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <__NVIC_SetPriorityGrouping+0x44>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065a:	68ba      	ldr	r2, [r7, #8]
 800065c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000660:	4013      	ands	r3, r2
 8000662:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800066c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000676:	4a04      	ldr	r2, [pc, #16]	; (8000688 <__NVIC_SetPriorityGrouping+0x44>)
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	60d3      	str	r3, [r2, #12]
}
 800067c:	bf00      	nop
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <__NVIC_GetPriorityGrouping>:
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000690:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	0a1b      	lsrs	r3, r3, #8
 8000696:	f003 0307 	and.w	r3, r3, #7
}
 800069a:	4618      	mov	r0, r3
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <__NVIC_SetPriority>:
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	6039      	str	r1, [r7, #0]
 80006b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	db0a      	blt.n	80006d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	490c      	ldr	r1, [pc, #48]	; (80006f4 <__NVIC_SetPriority+0x4c>)
 80006c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c6:	0112      	lsls	r2, r2, #4
 80006c8:	b2d2      	uxtb	r2, r2
 80006ca:	440b      	add	r3, r1
 80006cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006d0:	e00a      	b.n	80006e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4908      	ldr	r1, [pc, #32]	; (80006f8 <__NVIC_SetPriority+0x50>)
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	f003 030f 	and.w	r3, r3, #15
 80006de:	3b04      	subs	r3, #4
 80006e0:	0112      	lsls	r2, r2, #4
 80006e2:	b2d2      	uxtb	r2, r2
 80006e4:	440b      	add	r3, r1
 80006e6:	761a      	strb	r2, [r3, #24]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000e100 	.word	0xe000e100
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <NVIC_EncodePriority>:
{
 80006fc:	b480      	push	{r7}
 80006fe:	b089      	sub	sp, #36	; 0x24
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f003 0307 	and.w	r3, r3, #7
 800070e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	f1c3 0307 	rsb	r3, r3, #7
 8000716:	2b04      	cmp	r3, #4
 8000718:	bf28      	it	cs
 800071a:	2304      	movcs	r3, #4
 800071c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3304      	adds	r3, #4
 8000722:	2b06      	cmp	r3, #6
 8000724:	d902      	bls.n	800072c <NVIC_EncodePriority+0x30>
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	3b03      	subs	r3, #3
 800072a:	e000      	b.n	800072e <NVIC_EncodePriority+0x32>
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000730:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	fa02 f303 	lsl.w	r3, r2, r3
 800073a:	43da      	mvns	r2, r3
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	401a      	ands	r2, r3
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000744:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	fa01 f303 	lsl.w	r3, r1, r3
 800074e:	43d9      	mvns	r1, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	4313      	orrs	r3, r2
}
 8000756:	4618      	mov	r0, r3
 8000758:	3724      	adds	r7, #36	; 0x24
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr

08000760 <SysTick_Config>:
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3b01      	subs	r3, #1
 800076c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000770:	d301      	bcc.n	8000776 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000772:	2301      	movs	r3, #1
 8000774:	e00f      	b.n	8000796 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000776:	4a0a      	ldr	r2, [pc, #40]	; (80007a0 <SysTick_Config+0x40>)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3b01      	subs	r3, #1
 800077c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800077e:	210f      	movs	r1, #15
 8000780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000784:	f7ff ff90 	bl	80006a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <SysTick_Config+0x40>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800078e:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <SysTick_Config+0x40>)
 8000790:	2207      	movs	r2, #7
 8000792:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000794:	2300      	movs	r3, #0
}
 8000796:	4618      	mov	r0, r3
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	e000e010 	.word	0xe000e010

080007a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f7ff ff49 	bl	8000644 <__NVIC_SetPriorityGrouping>
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b086      	sub	sp, #24
 80007be:	af00      	add	r7, sp, #0
 80007c0:	4603      	mov	r3, r0
 80007c2:	60b9      	str	r1, [r7, #8]
 80007c4:	607a      	str	r2, [r7, #4]
 80007c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007cc:	f7ff ff5e 	bl	800068c <__NVIC_GetPriorityGrouping>
 80007d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	68b9      	ldr	r1, [r7, #8]
 80007d6:	6978      	ldr	r0, [r7, #20]
 80007d8:	f7ff ff90 	bl	80006fc <NVIC_EncodePriority>
 80007dc:	4602      	mov	r2, r0
 80007de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007e2:	4611      	mov	r1, r2
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ff5f 	bl	80006a8 <__NVIC_SetPriority>
}
 80007ea:	bf00      	nop
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b082      	sub	sp, #8
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ffb0 	bl	8000760 <SysTick_Config>
 8000800:	4603      	mov	r3, r0
}
 8000802:	4618      	mov	r0, r3
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d101      	bne.n	800081e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
 800081c:	e26c      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	2b00      	cmp	r3, #0
 8000828:	f000 8087 	beq.w	800093a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800082c:	4b92      	ldr	r3, [pc, #584]	; (8000a78 <HAL_RCC_OscConfig+0x26c>)
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	f003 030c 	and.w	r3, r3, #12
 8000834:	2b04      	cmp	r3, #4
 8000836:	d00c      	beq.n	8000852 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000838:	4b8f      	ldr	r3, [pc, #572]	; (8000a78 <HAL_RCC_OscConfig+0x26c>)
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	f003 030c 	and.w	r3, r3, #12
 8000840:	2b08      	cmp	r3, #8
 8000842:	d112      	bne.n	800086a <HAL_RCC_OscConfig+0x5e>
 8000844:	4b8c      	ldr	r3, [pc, #560]	; (8000a78 <HAL_RCC_OscConfig+0x26c>)
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800084c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000850:	d10b      	bne.n	800086a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000852:	4b89      	ldr	r3, [pc, #548]	; (8000a78 <HAL_RCC_OscConfig+0x26c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800085a:	2b00      	cmp	r3, #0
 800085c:	d06c      	beq.n	8000938 <HAL_RCC_OscConfig+0x12c>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d168      	bne.n	8000938 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000866:	2301      	movs	r3, #1
 8000868:	e246      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000872:	d106      	bne.n	8000882 <HAL_RCC_OscConfig+0x76>
 8000874:	4b80      	ldr	r3, [pc, #512]	; (8000a78 <HAL_RCC_OscConfig+0x26c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a7f      	ldr	r2, [pc, #508]	; (8000a78 <HAL_RCC_OscConfig+0x26c>)
 800087a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800087e:	6013      	str	r3, [r2, #0]
 8000880:	e02e      	b.n	80008e0 <HAL_RCC_OscConfig+0xd4>
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d10c      	bne.n	80008a4 <HAL_RCC_OscConfig+0x98>
 800088a:	4b7b      	ldr	r3, [pc, #492]	; (8000a78 <HAL_RCC_OscConfig+0x26c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a7a      	ldr	r2, [pc, #488]	; (8000a78 <HAL_RCC_OscConfig+0x26c>)
 8000890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000894:	6013      	str	r3, [r2, #0]
 8000896:	4b78      	ldr	r3, [pc, #480]	; (8000a78 <HAL_RCC_OscConfig+0x26c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a77      	ldr	r2, [pc, #476]	; (8000a78 <HAL_RCC_OscConfig+0x26c>)
 800089c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008a0:	6013      	str	r3, [r2, #0]
 80008a2:	e01d      	b.n	80008e0 <HAL_RCC_OscConfig+0xd4>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008ac:	d10c      	bne.n	80008c8 <HAL_RCC_OscConfig+0xbc>
 80008ae:	4b72      	ldr	r3, [pc, #456]	; (8000a78 <HAL_RCC_OscConfig+0x26c>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a71      	ldr	r2, [pc, #452]	; (8000a78 <HAL_RCC_OscConfig+0x26c>)
 80008b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008b8:	6013      	str	r3, [r2, #0]
 80008ba:	4b6f      	ldr	r3, [pc, #444]	; (8000a78 <HAL_RCC_OscConfig+0x26c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a6e      	ldr	r2, [pc, #440]	; (8000a78 <HAL_RCC_OscConfig+0x26c>)
 80008c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008c4:	6013      	str	r3, [r2, #0]
 80008c6:	e00b      	b.n	80008e0 <HAL_RCC_OscConfig+0xd4>
 80008c8:	4b6b      	ldr	r3, [pc, #428]	; (8000a78 <HAL_RCC_OscConfig+0x26c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a6a      	ldr	r2, [pc, #424]	; (8000a78 <HAL_RCC_OscConfig+0x26c>)
 80008ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008d2:	6013      	str	r3, [r2, #0]
 80008d4:	4b68      	ldr	r3, [pc, #416]	; (8000a78 <HAL_RCC_OscConfig+0x26c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a67      	ldr	r2, [pc, #412]	; (8000a78 <HAL_RCC_OscConfig+0x26c>)
 80008da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d013      	beq.n	8000910 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008e8:	f7ff fe80 	bl	80005ec <HAL_GetTick>
 80008ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ee:	e008      	b.n	8000902 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80008f0:	f7ff fe7c 	bl	80005ec <HAL_GetTick>
 80008f4:	4602      	mov	r2, r0
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	2b64      	cmp	r3, #100	; 0x64
 80008fc:	d901      	bls.n	8000902 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80008fe:	2303      	movs	r3, #3
 8000900:	e1fa      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000902:	4b5d      	ldr	r3, [pc, #372]	; (8000a78 <HAL_RCC_OscConfig+0x26c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800090a:	2b00      	cmp	r3, #0
 800090c:	d0f0      	beq.n	80008f0 <HAL_RCC_OscConfig+0xe4>
 800090e:	e014      	b.n	800093a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000910:	f7ff fe6c 	bl	80005ec <HAL_GetTick>
 8000914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000916:	e008      	b.n	800092a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000918:	f7ff fe68 	bl	80005ec <HAL_GetTick>
 800091c:	4602      	mov	r2, r0
 800091e:	693b      	ldr	r3, [r7, #16]
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	2b64      	cmp	r3, #100	; 0x64
 8000924:	d901      	bls.n	800092a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000926:	2303      	movs	r3, #3
 8000928:	e1e6      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800092a:	4b53      	ldr	r3, [pc, #332]	; (8000a78 <HAL_RCC_OscConfig+0x26c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000932:	2b00      	cmp	r3, #0
 8000934:	d1f0      	bne.n	8000918 <HAL_RCC_OscConfig+0x10c>
 8000936:	e000      	b.n	800093a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	2b00      	cmp	r3, #0
 8000944:	d063      	beq.n	8000a0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000946:	4b4c      	ldr	r3, [pc, #304]	; (8000a78 <HAL_RCC_OscConfig+0x26c>)
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	f003 030c 	and.w	r3, r3, #12
 800094e:	2b00      	cmp	r3, #0
 8000950:	d00b      	beq.n	800096a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000952:	4b49      	ldr	r3, [pc, #292]	; (8000a78 <HAL_RCC_OscConfig+0x26c>)
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	f003 030c 	and.w	r3, r3, #12
 800095a:	2b08      	cmp	r3, #8
 800095c:	d11c      	bne.n	8000998 <HAL_RCC_OscConfig+0x18c>
 800095e:	4b46      	ldr	r3, [pc, #280]	; (8000a78 <HAL_RCC_OscConfig+0x26c>)
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000966:	2b00      	cmp	r3, #0
 8000968:	d116      	bne.n	8000998 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800096a:	4b43      	ldr	r3, [pc, #268]	; (8000a78 <HAL_RCC_OscConfig+0x26c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	2b00      	cmp	r3, #0
 8000974:	d005      	beq.n	8000982 <HAL_RCC_OscConfig+0x176>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	691b      	ldr	r3, [r3, #16]
 800097a:	2b01      	cmp	r3, #1
 800097c:	d001      	beq.n	8000982 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	e1ba      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000982:	4b3d      	ldr	r3, [pc, #244]	; (8000a78 <HAL_RCC_OscConfig+0x26c>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	00db      	lsls	r3, r3, #3
 8000990:	4939      	ldr	r1, [pc, #228]	; (8000a78 <HAL_RCC_OscConfig+0x26c>)
 8000992:	4313      	orrs	r3, r2
 8000994:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000996:	e03a      	b.n	8000a0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	691b      	ldr	r3, [r3, #16]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d020      	beq.n	80009e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009a0:	4b36      	ldr	r3, [pc, #216]	; (8000a7c <HAL_RCC_OscConfig+0x270>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009a6:	f7ff fe21 	bl	80005ec <HAL_GetTick>
 80009aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009ac:	e008      	b.n	80009c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80009ae:	f7ff fe1d 	bl	80005ec <HAL_GetTick>
 80009b2:	4602      	mov	r2, r0
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	1ad3      	subs	r3, r2, r3
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d901      	bls.n	80009c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80009bc:	2303      	movs	r3, #3
 80009be:	e19b      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009c0:	4b2d      	ldr	r3, [pc, #180]	; (8000a78 <HAL_RCC_OscConfig+0x26c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f003 0302 	and.w	r3, r3, #2
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d0f0      	beq.n	80009ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009cc:	4b2a      	ldr	r3, [pc, #168]	; (8000a78 <HAL_RCC_OscConfig+0x26c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	695b      	ldr	r3, [r3, #20]
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	4927      	ldr	r1, [pc, #156]	; (8000a78 <HAL_RCC_OscConfig+0x26c>)
 80009dc:	4313      	orrs	r3, r2
 80009de:	600b      	str	r3, [r1, #0]
 80009e0:	e015      	b.n	8000a0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80009e2:	4b26      	ldr	r3, [pc, #152]	; (8000a7c <HAL_RCC_OscConfig+0x270>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009e8:	f7ff fe00 	bl	80005ec <HAL_GetTick>
 80009ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009ee:	e008      	b.n	8000a02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80009f0:	f7ff fdfc 	bl	80005ec <HAL_GetTick>
 80009f4:	4602      	mov	r2, r0
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	2b02      	cmp	r3, #2
 80009fc:	d901      	bls.n	8000a02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80009fe:	2303      	movs	r3, #3
 8000a00:	e17a      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a02:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <HAL_RCC_OscConfig+0x26c>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d1f0      	bne.n	80009f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f003 0308 	and.w	r3, r3, #8
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d03a      	beq.n	8000a90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d019      	beq.n	8000a56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a22:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <HAL_RCC_OscConfig+0x274>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a28:	f7ff fde0 	bl	80005ec <HAL_GetTick>
 8000a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a2e:	e008      	b.n	8000a42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a30:	f7ff fddc 	bl	80005ec <HAL_GetTick>
 8000a34:	4602      	mov	r2, r0
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	2b02      	cmp	r3, #2
 8000a3c:	d901      	bls.n	8000a42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	e15a      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <HAL_RCC_OscConfig+0x26c>)
 8000a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d0f0      	beq.n	8000a30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000a4e:	2001      	movs	r0, #1
 8000a50:	f000 faa8 	bl	8000fa4 <RCC_Delay>
 8000a54:	e01c      	b.n	8000a90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a56:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <HAL_RCC_OscConfig+0x274>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a5c:	f7ff fdc6 	bl	80005ec <HAL_GetTick>
 8000a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a62:	e00f      	b.n	8000a84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a64:	f7ff fdc2 	bl	80005ec <HAL_GetTick>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d908      	bls.n	8000a84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000a72:	2303      	movs	r3, #3
 8000a74:	e140      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4ec>
 8000a76:	bf00      	nop
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	42420000 	.word	0x42420000
 8000a80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a84:	4b9e      	ldr	r3, [pc, #632]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a88:	f003 0302 	and.w	r3, r3, #2
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d1e9      	bne.n	8000a64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f003 0304 	and.w	r3, r3, #4
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	f000 80a6 	beq.w	8000bea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000aa2:	4b97      	ldr	r3, [pc, #604]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d10d      	bne.n	8000aca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000aae:	4b94      	ldr	r3, [pc, #592]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	4a93      	ldr	r2, [pc, #588]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	61d3      	str	r3, [r2, #28]
 8000aba:	4b91      	ldr	r3, [pc, #580]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aca:	4b8e      	ldr	r3, [pc, #568]	; (8000d04 <HAL_RCC_OscConfig+0x4f8>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d118      	bne.n	8000b08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ad6:	4b8b      	ldr	r3, [pc, #556]	; (8000d04 <HAL_RCC_OscConfig+0x4f8>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a8a      	ldr	r2, [pc, #552]	; (8000d04 <HAL_RCC_OscConfig+0x4f8>)
 8000adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ae2:	f7ff fd83 	bl	80005ec <HAL_GetTick>
 8000ae6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ae8:	e008      	b.n	8000afc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000aea:	f7ff fd7f 	bl	80005ec <HAL_GetTick>
 8000aee:	4602      	mov	r2, r0
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	1ad3      	subs	r3, r2, r3
 8000af4:	2b64      	cmp	r3, #100	; 0x64
 8000af6:	d901      	bls.n	8000afc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000af8:	2303      	movs	r3, #3
 8000afa:	e0fd      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000afc:	4b81      	ldr	r3, [pc, #516]	; (8000d04 <HAL_RCC_OscConfig+0x4f8>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d0f0      	beq.n	8000aea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d106      	bne.n	8000b1e <HAL_RCC_OscConfig+0x312>
 8000b10:	4b7b      	ldr	r3, [pc, #492]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000b12:	6a1b      	ldr	r3, [r3, #32]
 8000b14:	4a7a      	ldr	r2, [pc, #488]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000b16:	f043 0301 	orr.w	r3, r3, #1
 8000b1a:	6213      	str	r3, [r2, #32]
 8000b1c:	e02d      	b.n	8000b7a <HAL_RCC_OscConfig+0x36e>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	68db      	ldr	r3, [r3, #12]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d10c      	bne.n	8000b40 <HAL_RCC_OscConfig+0x334>
 8000b26:	4b76      	ldr	r3, [pc, #472]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000b28:	6a1b      	ldr	r3, [r3, #32]
 8000b2a:	4a75      	ldr	r2, [pc, #468]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000b2c:	f023 0301 	bic.w	r3, r3, #1
 8000b30:	6213      	str	r3, [r2, #32]
 8000b32:	4b73      	ldr	r3, [pc, #460]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000b34:	6a1b      	ldr	r3, [r3, #32]
 8000b36:	4a72      	ldr	r2, [pc, #456]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000b38:	f023 0304 	bic.w	r3, r3, #4
 8000b3c:	6213      	str	r3, [r2, #32]
 8000b3e:	e01c      	b.n	8000b7a <HAL_RCC_OscConfig+0x36e>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	2b05      	cmp	r3, #5
 8000b46:	d10c      	bne.n	8000b62 <HAL_RCC_OscConfig+0x356>
 8000b48:	4b6d      	ldr	r3, [pc, #436]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000b4a:	6a1b      	ldr	r3, [r3, #32]
 8000b4c:	4a6c      	ldr	r2, [pc, #432]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000b4e:	f043 0304 	orr.w	r3, r3, #4
 8000b52:	6213      	str	r3, [r2, #32]
 8000b54:	4b6a      	ldr	r3, [pc, #424]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000b56:	6a1b      	ldr	r3, [r3, #32]
 8000b58:	4a69      	ldr	r2, [pc, #420]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	6213      	str	r3, [r2, #32]
 8000b60:	e00b      	b.n	8000b7a <HAL_RCC_OscConfig+0x36e>
 8000b62:	4b67      	ldr	r3, [pc, #412]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000b64:	6a1b      	ldr	r3, [r3, #32]
 8000b66:	4a66      	ldr	r2, [pc, #408]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000b68:	f023 0301 	bic.w	r3, r3, #1
 8000b6c:	6213      	str	r3, [r2, #32]
 8000b6e:	4b64      	ldr	r3, [pc, #400]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000b70:	6a1b      	ldr	r3, [r3, #32]
 8000b72:	4a63      	ldr	r2, [pc, #396]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000b74:	f023 0304 	bic.w	r3, r3, #4
 8000b78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	68db      	ldr	r3, [r3, #12]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d015      	beq.n	8000bae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b82:	f7ff fd33 	bl	80005ec <HAL_GetTick>
 8000b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b88:	e00a      	b.n	8000ba0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b8a:	f7ff fd2f 	bl	80005ec <HAL_GetTick>
 8000b8e:	4602      	mov	r2, r0
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	1ad3      	subs	r3, r2, r3
 8000b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d901      	bls.n	8000ba0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	e0ab      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ba0:	4b57      	ldr	r3, [pc, #348]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000ba2:	6a1b      	ldr	r3, [r3, #32]
 8000ba4:	f003 0302 	and.w	r3, r3, #2
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d0ee      	beq.n	8000b8a <HAL_RCC_OscConfig+0x37e>
 8000bac:	e014      	b.n	8000bd8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bae:	f7ff fd1d 	bl	80005ec <HAL_GetTick>
 8000bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bb4:	e00a      	b.n	8000bcc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000bb6:	f7ff fd19 	bl	80005ec <HAL_GetTick>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d901      	bls.n	8000bcc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	e095      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bcc:	4b4c      	ldr	r3, [pc, #304]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000bce:	6a1b      	ldr	r3, [r3, #32]
 8000bd0:	f003 0302 	and.w	r3, r3, #2
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d1ee      	bne.n	8000bb6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000bd8:	7dfb      	ldrb	r3, [r7, #23]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d105      	bne.n	8000bea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bde:	4b48      	ldr	r3, [pc, #288]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	4a47      	ldr	r2, [pc, #284]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000be4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000be8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f000 8081 	beq.w	8000cf6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bf4:	4b42      	ldr	r3, [pc, #264]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f003 030c 	and.w	r3, r3, #12
 8000bfc:	2b08      	cmp	r3, #8
 8000bfe:	d061      	beq.n	8000cc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	69db      	ldr	r3, [r3, #28]
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d146      	bne.n	8000c96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c08:	4b3f      	ldr	r3, [pc, #252]	; (8000d08 <HAL_RCC_OscConfig+0x4fc>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c0e:	f7ff fced 	bl	80005ec <HAL_GetTick>
 8000c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c14:	e008      	b.n	8000c28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c16:	f7ff fce9 	bl	80005ec <HAL_GetTick>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d901      	bls.n	8000c28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000c24:	2303      	movs	r3, #3
 8000c26:	e067      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c28:	4b35      	ldr	r3, [pc, #212]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d1f0      	bne.n	8000c16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6a1b      	ldr	r3, [r3, #32]
 8000c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c3c:	d108      	bne.n	8000c50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c3e:	4b30      	ldr	r3, [pc, #192]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	492d      	ldr	r1, [pc, #180]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c50:	4b2b      	ldr	r3, [pc, #172]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6a19      	ldr	r1, [r3, #32]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c60:	430b      	orrs	r3, r1
 8000c62:	4927      	ldr	r1, [pc, #156]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000c64:	4313      	orrs	r3, r2
 8000c66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c68:	4b27      	ldr	r3, [pc, #156]	; (8000d08 <HAL_RCC_OscConfig+0x4fc>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c6e:	f7ff fcbd 	bl	80005ec <HAL_GetTick>
 8000c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c74:	e008      	b.n	8000c88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c76:	f7ff fcb9 	bl	80005ec <HAL_GetTick>
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d901      	bls.n	8000c88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000c84:	2303      	movs	r3, #3
 8000c86:	e037      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c88:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d0f0      	beq.n	8000c76 <HAL_RCC_OscConfig+0x46a>
 8000c94:	e02f      	b.n	8000cf6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c96:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <HAL_RCC_OscConfig+0x4fc>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c9c:	f7ff fca6 	bl	80005ec <HAL_GetTick>
 8000ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ca2:	e008      	b.n	8000cb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ca4:	f7ff fca2 	bl	80005ec <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d901      	bls.n	8000cb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e020      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cb6:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d1f0      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x498>
 8000cc2:	e018      	b.n	8000cf6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	69db      	ldr	r3, [r3, #28]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d101      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e013      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <HAL_RCC_OscConfig+0x4f4>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6a1b      	ldr	r3, [r3, #32]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d106      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d001      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e000      	b.n	8000cf8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000cf6:	2300      	movs	r3, #0
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40021000 	.word	0x40021000
 8000d04:	40007000 	.word	0x40007000
 8000d08:	42420060 	.word	0x42420060

08000d0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d101      	bne.n	8000d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e0d0      	b.n	8000ec2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000d20:	4b6a      	ldr	r3, [pc, #424]	; (8000ecc <HAL_RCC_ClockConfig+0x1c0>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f003 0307 	and.w	r3, r3, #7
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d910      	bls.n	8000d50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d2e:	4b67      	ldr	r3, [pc, #412]	; (8000ecc <HAL_RCC_ClockConfig+0x1c0>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f023 0207 	bic.w	r2, r3, #7
 8000d36:	4965      	ldr	r1, [pc, #404]	; (8000ecc <HAL_RCC_ClockConfig+0x1c0>)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d3e:	4b63      	ldr	r3, [pc, #396]	; (8000ecc <HAL_RCC_ClockConfig+0x1c0>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d001      	beq.n	8000d50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e0b8      	b.n	8000ec2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f003 0302 	and.w	r3, r3, #2
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d020      	beq.n	8000d9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 0304 	and.w	r3, r3, #4
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d005      	beq.n	8000d74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d68:	4b59      	ldr	r3, [pc, #356]	; (8000ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	4a58      	ldr	r2, [pc, #352]	; (8000ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8000d6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000d72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 0308 	and.w	r3, r3, #8
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d005      	beq.n	8000d8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d80:	4b53      	ldr	r3, [pc, #332]	; (8000ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	4a52      	ldr	r2, [pc, #328]	; (8000ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8000d86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000d8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d8c:	4b50      	ldr	r3, [pc, #320]	; (8000ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	494d      	ldr	r1, [pc, #308]	; (8000ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d040      	beq.n	8000e2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d107      	bne.n	8000dc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db2:	4b47      	ldr	r3, [pc, #284]	; (8000ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d115      	bne.n	8000dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e07f      	b.n	8000ec2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d107      	bne.n	8000dda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dca:	4b41      	ldr	r3, [pc, #260]	; (8000ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d109      	bne.n	8000dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e073      	b.n	8000ec2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dda:	4b3d      	ldr	r3, [pc, #244]	; (8000ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d101      	bne.n	8000dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e06b      	b.n	8000ec2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dea:	4b39      	ldr	r3, [pc, #228]	; (8000ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f023 0203 	bic.w	r2, r3, #3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	4936      	ldr	r1, [pc, #216]	; (8000ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000dfc:	f7ff fbf6 	bl	80005ec <HAL_GetTick>
 8000e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e02:	e00a      	b.n	8000e1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e04:	f7ff fbf2 	bl	80005ec <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d901      	bls.n	8000e1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000e16:	2303      	movs	r3, #3
 8000e18:	e053      	b.n	8000ec2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e1a:	4b2d      	ldr	r3, [pc, #180]	; (8000ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 020c 	and.w	r2, r3, #12
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d1eb      	bne.n	8000e04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000e2c:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <HAL_RCC_ClockConfig+0x1c0>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f003 0307 	and.w	r3, r3, #7
 8000e34:	683a      	ldr	r2, [r7, #0]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d210      	bcs.n	8000e5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e3a:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <HAL_RCC_ClockConfig+0x1c0>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f023 0207 	bic.w	r2, r3, #7
 8000e42:	4922      	ldr	r1, [pc, #136]	; (8000ecc <HAL_RCC_ClockConfig+0x1c0>)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e4a:	4b20      	ldr	r3, [pc, #128]	; (8000ecc <HAL_RCC_ClockConfig+0x1c0>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	683a      	ldr	r2, [r7, #0]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d001      	beq.n	8000e5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e032      	b.n	8000ec2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d008      	beq.n	8000e7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e68:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	4916      	ldr	r1, [pc, #88]	; (8000ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8000e76:	4313      	orrs	r3, r2
 8000e78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 0308 	and.w	r3, r3, #8
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d009      	beq.n	8000e9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	691b      	ldr	r3, [r3, #16]
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	490e      	ldr	r1, [pc, #56]	; (8000ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8000e96:	4313      	orrs	r3, r2
 8000e98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e9a:	f000 f821 	bl	8000ee0 <HAL_RCC_GetSysClockFreq>
 8000e9e:	4601      	mov	r1, r0
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	091b      	lsrs	r3, r3, #4
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8000eac:	5cd3      	ldrb	r3, [r2, r3]
 8000eae:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb2:	4a09      	ldr	r2, [pc, #36]	; (8000ed8 <HAL_RCC_ClockConfig+0x1cc>)
 8000eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <HAL_RCC_ClockConfig+0x1d0>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fb54 	bl	8000568 <HAL_InitTick>

  return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40022000 	.word	0x40022000
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	0800194c 	.word	0x0800194c
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	20000004 	.word	0x20000004

08000ee0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ee0:	b490      	push	{r4, r7}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000ee6:	4b2a      	ldr	r3, [pc, #168]	; (8000f90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000ee8:	1d3c      	adds	r4, r7, #4
 8000eea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000ef0:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000f0a:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f003 030c 	and.w	r3, r3, #12
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	d002      	beq.n	8000f20 <HAL_RCC_GetSysClockFreq+0x40>
 8000f1a:	2b08      	cmp	r3, #8
 8000f1c:	d003      	beq.n	8000f26 <HAL_RCC_GetSysClockFreq+0x46>
 8000f1e:	e02d      	b.n	8000f7c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000f20:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f22:	623b      	str	r3, [r7, #32]
      break;
 8000f24:	e02d      	b.n	8000f82 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	0c9b      	lsrs	r3, r3, #18
 8000f2a:	f003 030f 	and.w	r3, r3, #15
 8000f2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f32:	4413      	add	r3, r2
 8000f34:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000f38:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d013      	beq.n	8000f6c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f44:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	0c5b      	lsrs	r3, r3, #17
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f52:	4413      	add	r3, r2
 8000f54:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000f58:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	4a0f      	ldr	r2, [pc, #60]	; (8000f9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f5e:	fb02 f203 	mul.w	r2, r2, r3
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
 8000f6a:	e004      	b.n	8000f76 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	4a0c      	ldr	r2, [pc, #48]	; (8000fa0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000f70:	fb02 f303 	mul.w	r3, r2, r3
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f78:	623b      	str	r3, [r7, #32]
      break;
 8000f7a:	e002      	b.n	8000f82 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000f7c:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f7e:	623b      	str	r3, [r7, #32]
      break;
 8000f80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000f82:	6a3b      	ldr	r3, [r7, #32]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3728      	adds	r7, #40	; 0x28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc90      	pop	{r4, r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	08001938 	.word	0x08001938
 8000f94:	08001948 	.word	0x08001948
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	007a1200 	.word	0x007a1200
 8000fa0:	003d0900 	.word	0x003d0900

08000fa4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <RCC_Delay+0x34>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <RCC_Delay+0x38>)
 8000fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb6:	0a5b      	lsrs	r3, r3, #9
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	fb02 f303 	mul.w	r3, r2, r3
 8000fbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000fc0:	bf00      	nop
  }
  while (Delay --);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	1e5a      	subs	r2, r3, #1
 8000fc6:	60fa      	str	r2, [r7, #12]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1f9      	bne.n	8000fc0 <RCC_Delay+0x1c>
}
 8000fcc:	bf00      	nop
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	10624dd3 	.word	0x10624dd3

08000fe0 <__errno>:
 8000fe0:	4b01      	ldr	r3, [pc, #4]	; (8000fe8 <__errno+0x8>)
 8000fe2:	6818      	ldr	r0, [r3, #0]
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	2000000c 	.word	0x2000000c

08000fec <__libc_init_array>:
 8000fec:	b570      	push	{r4, r5, r6, lr}
 8000fee:	2500      	movs	r5, #0
 8000ff0:	4e0c      	ldr	r6, [pc, #48]	; (8001024 <__libc_init_array+0x38>)
 8000ff2:	4c0d      	ldr	r4, [pc, #52]	; (8001028 <__libc_init_array+0x3c>)
 8000ff4:	1ba4      	subs	r4, r4, r6
 8000ff6:	10a4      	asrs	r4, r4, #2
 8000ff8:	42a5      	cmp	r5, r4
 8000ffa:	d109      	bne.n	8001010 <__libc_init_array+0x24>
 8000ffc:	f000 fc88 	bl	8001910 <_init>
 8001000:	2500      	movs	r5, #0
 8001002:	4e0a      	ldr	r6, [pc, #40]	; (800102c <__libc_init_array+0x40>)
 8001004:	4c0a      	ldr	r4, [pc, #40]	; (8001030 <__libc_init_array+0x44>)
 8001006:	1ba4      	subs	r4, r4, r6
 8001008:	10a4      	asrs	r4, r4, #2
 800100a:	42a5      	cmp	r5, r4
 800100c:	d105      	bne.n	800101a <__libc_init_array+0x2e>
 800100e:	bd70      	pop	{r4, r5, r6, pc}
 8001010:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001014:	4798      	blx	r3
 8001016:	3501      	adds	r5, #1
 8001018:	e7ee      	b.n	8000ff8 <__libc_init_array+0xc>
 800101a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800101e:	4798      	blx	r3
 8001020:	3501      	adds	r5, #1
 8001022:	e7f2      	b.n	800100a <__libc_init_array+0x1e>
 8001024:	080019c0 	.word	0x080019c0
 8001028:	080019c0 	.word	0x080019c0
 800102c:	080019c0 	.word	0x080019c0
 8001030:	080019c4 	.word	0x080019c4

08001034 <memset>:
 8001034:	4603      	mov	r3, r0
 8001036:	4402      	add	r2, r0
 8001038:	4293      	cmp	r3, r2
 800103a:	d100      	bne.n	800103e <memset+0xa>
 800103c:	4770      	bx	lr
 800103e:	f803 1b01 	strb.w	r1, [r3], #1
 8001042:	e7f9      	b.n	8001038 <memset+0x4>

08001044 <_puts_r>:
 8001044:	b570      	push	{r4, r5, r6, lr}
 8001046:	460e      	mov	r6, r1
 8001048:	4605      	mov	r5, r0
 800104a:	b118      	cbz	r0, 8001054 <_puts_r+0x10>
 800104c:	6983      	ldr	r3, [r0, #24]
 800104e:	b90b      	cbnz	r3, 8001054 <_puts_r+0x10>
 8001050:	f000 fa0c 	bl	800146c <__sinit>
 8001054:	69ab      	ldr	r3, [r5, #24]
 8001056:	68ac      	ldr	r4, [r5, #8]
 8001058:	b913      	cbnz	r3, 8001060 <_puts_r+0x1c>
 800105a:	4628      	mov	r0, r5
 800105c:	f000 fa06 	bl	800146c <__sinit>
 8001060:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <_puts_r+0xac>)
 8001062:	429c      	cmp	r4, r3
 8001064:	d117      	bne.n	8001096 <_puts_r+0x52>
 8001066:	686c      	ldr	r4, [r5, #4]
 8001068:	89a3      	ldrh	r3, [r4, #12]
 800106a:	071b      	lsls	r3, r3, #28
 800106c:	d51d      	bpl.n	80010aa <_puts_r+0x66>
 800106e:	6923      	ldr	r3, [r4, #16]
 8001070:	b1db      	cbz	r3, 80010aa <_puts_r+0x66>
 8001072:	3e01      	subs	r6, #1
 8001074:	68a3      	ldr	r3, [r4, #8]
 8001076:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800107a:	3b01      	subs	r3, #1
 800107c:	60a3      	str	r3, [r4, #8]
 800107e:	b9e9      	cbnz	r1, 80010bc <_puts_r+0x78>
 8001080:	2b00      	cmp	r3, #0
 8001082:	da2e      	bge.n	80010e2 <_puts_r+0x9e>
 8001084:	4622      	mov	r2, r4
 8001086:	210a      	movs	r1, #10
 8001088:	4628      	mov	r0, r5
 800108a:	f000 f83f 	bl	800110c <__swbuf_r>
 800108e:	3001      	adds	r0, #1
 8001090:	d011      	beq.n	80010b6 <_puts_r+0x72>
 8001092:	200a      	movs	r0, #10
 8001094:	e011      	b.n	80010ba <_puts_r+0x76>
 8001096:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <_puts_r+0xb0>)
 8001098:	429c      	cmp	r4, r3
 800109a:	d101      	bne.n	80010a0 <_puts_r+0x5c>
 800109c:	68ac      	ldr	r4, [r5, #8]
 800109e:	e7e3      	b.n	8001068 <_puts_r+0x24>
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <_puts_r+0xb4>)
 80010a2:	429c      	cmp	r4, r3
 80010a4:	bf08      	it	eq
 80010a6:	68ec      	ldreq	r4, [r5, #12]
 80010a8:	e7de      	b.n	8001068 <_puts_r+0x24>
 80010aa:	4621      	mov	r1, r4
 80010ac:	4628      	mov	r0, r5
 80010ae:	f000 f87f 	bl	80011b0 <__swsetup_r>
 80010b2:	2800      	cmp	r0, #0
 80010b4:	d0dd      	beq.n	8001072 <_puts_r+0x2e>
 80010b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010ba:	bd70      	pop	{r4, r5, r6, pc}
 80010bc:	2b00      	cmp	r3, #0
 80010be:	da04      	bge.n	80010ca <_puts_r+0x86>
 80010c0:	69a2      	ldr	r2, [r4, #24]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	dc06      	bgt.n	80010d4 <_puts_r+0x90>
 80010c6:	290a      	cmp	r1, #10
 80010c8:	d004      	beq.n	80010d4 <_puts_r+0x90>
 80010ca:	6823      	ldr	r3, [r4, #0]
 80010cc:	1c5a      	adds	r2, r3, #1
 80010ce:	6022      	str	r2, [r4, #0]
 80010d0:	7019      	strb	r1, [r3, #0]
 80010d2:	e7cf      	b.n	8001074 <_puts_r+0x30>
 80010d4:	4622      	mov	r2, r4
 80010d6:	4628      	mov	r0, r5
 80010d8:	f000 f818 	bl	800110c <__swbuf_r>
 80010dc:	3001      	adds	r0, #1
 80010de:	d1c9      	bne.n	8001074 <_puts_r+0x30>
 80010e0:	e7e9      	b.n	80010b6 <_puts_r+0x72>
 80010e2:	200a      	movs	r0, #10
 80010e4:	6823      	ldr	r3, [r4, #0]
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	6022      	str	r2, [r4, #0]
 80010ea:	7018      	strb	r0, [r3, #0]
 80010ec:	e7e5      	b.n	80010ba <_puts_r+0x76>
 80010ee:	bf00      	nop
 80010f0:	08001980 	.word	0x08001980
 80010f4:	080019a0 	.word	0x080019a0
 80010f8:	08001960 	.word	0x08001960

080010fc <puts>:
 80010fc:	4b02      	ldr	r3, [pc, #8]	; (8001108 <puts+0xc>)
 80010fe:	4601      	mov	r1, r0
 8001100:	6818      	ldr	r0, [r3, #0]
 8001102:	f7ff bf9f 	b.w	8001044 <_puts_r>
 8001106:	bf00      	nop
 8001108:	2000000c 	.word	0x2000000c

0800110c <__swbuf_r>:
 800110c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800110e:	460e      	mov	r6, r1
 8001110:	4614      	mov	r4, r2
 8001112:	4605      	mov	r5, r0
 8001114:	b118      	cbz	r0, 800111e <__swbuf_r+0x12>
 8001116:	6983      	ldr	r3, [r0, #24]
 8001118:	b90b      	cbnz	r3, 800111e <__swbuf_r+0x12>
 800111a:	f000 f9a7 	bl	800146c <__sinit>
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <__swbuf_r+0x98>)
 8001120:	429c      	cmp	r4, r3
 8001122:	d12a      	bne.n	800117a <__swbuf_r+0x6e>
 8001124:	686c      	ldr	r4, [r5, #4]
 8001126:	69a3      	ldr	r3, [r4, #24]
 8001128:	60a3      	str	r3, [r4, #8]
 800112a:	89a3      	ldrh	r3, [r4, #12]
 800112c:	071a      	lsls	r2, r3, #28
 800112e:	d52e      	bpl.n	800118e <__swbuf_r+0x82>
 8001130:	6923      	ldr	r3, [r4, #16]
 8001132:	b363      	cbz	r3, 800118e <__swbuf_r+0x82>
 8001134:	6923      	ldr	r3, [r4, #16]
 8001136:	6820      	ldr	r0, [r4, #0]
 8001138:	b2f6      	uxtb	r6, r6
 800113a:	1ac0      	subs	r0, r0, r3
 800113c:	6963      	ldr	r3, [r4, #20]
 800113e:	4637      	mov	r7, r6
 8001140:	4283      	cmp	r3, r0
 8001142:	dc04      	bgt.n	800114e <__swbuf_r+0x42>
 8001144:	4621      	mov	r1, r4
 8001146:	4628      	mov	r0, r5
 8001148:	f000 f926 	bl	8001398 <_fflush_r>
 800114c:	bb28      	cbnz	r0, 800119a <__swbuf_r+0x8e>
 800114e:	68a3      	ldr	r3, [r4, #8]
 8001150:	3001      	adds	r0, #1
 8001152:	3b01      	subs	r3, #1
 8001154:	60a3      	str	r3, [r4, #8]
 8001156:	6823      	ldr	r3, [r4, #0]
 8001158:	1c5a      	adds	r2, r3, #1
 800115a:	6022      	str	r2, [r4, #0]
 800115c:	701e      	strb	r6, [r3, #0]
 800115e:	6963      	ldr	r3, [r4, #20]
 8001160:	4283      	cmp	r3, r0
 8001162:	d004      	beq.n	800116e <__swbuf_r+0x62>
 8001164:	89a3      	ldrh	r3, [r4, #12]
 8001166:	07db      	lsls	r3, r3, #31
 8001168:	d519      	bpl.n	800119e <__swbuf_r+0x92>
 800116a:	2e0a      	cmp	r6, #10
 800116c:	d117      	bne.n	800119e <__swbuf_r+0x92>
 800116e:	4621      	mov	r1, r4
 8001170:	4628      	mov	r0, r5
 8001172:	f000 f911 	bl	8001398 <_fflush_r>
 8001176:	b190      	cbz	r0, 800119e <__swbuf_r+0x92>
 8001178:	e00f      	b.n	800119a <__swbuf_r+0x8e>
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <__swbuf_r+0x9c>)
 800117c:	429c      	cmp	r4, r3
 800117e:	d101      	bne.n	8001184 <__swbuf_r+0x78>
 8001180:	68ac      	ldr	r4, [r5, #8]
 8001182:	e7d0      	b.n	8001126 <__swbuf_r+0x1a>
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <__swbuf_r+0xa0>)
 8001186:	429c      	cmp	r4, r3
 8001188:	bf08      	it	eq
 800118a:	68ec      	ldreq	r4, [r5, #12]
 800118c:	e7cb      	b.n	8001126 <__swbuf_r+0x1a>
 800118e:	4621      	mov	r1, r4
 8001190:	4628      	mov	r0, r5
 8001192:	f000 f80d 	bl	80011b0 <__swsetup_r>
 8001196:	2800      	cmp	r0, #0
 8001198:	d0cc      	beq.n	8001134 <__swbuf_r+0x28>
 800119a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800119e:	4638      	mov	r0, r7
 80011a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011a2:	bf00      	nop
 80011a4:	08001980 	.word	0x08001980
 80011a8:	080019a0 	.word	0x080019a0
 80011ac:	08001960 	.word	0x08001960

080011b0 <__swsetup_r>:
 80011b0:	4b32      	ldr	r3, [pc, #200]	; (800127c <__swsetup_r+0xcc>)
 80011b2:	b570      	push	{r4, r5, r6, lr}
 80011b4:	681d      	ldr	r5, [r3, #0]
 80011b6:	4606      	mov	r6, r0
 80011b8:	460c      	mov	r4, r1
 80011ba:	b125      	cbz	r5, 80011c6 <__swsetup_r+0x16>
 80011bc:	69ab      	ldr	r3, [r5, #24]
 80011be:	b913      	cbnz	r3, 80011c6 <__swsetup_r+0x16>
 80011c0:	4628      	mov	r0, r5
 80011c2:	f000 f953 	bl	800146c <__sinit>
 80011c6:	4b2e      	ldr	r3, [pc, #184]	; (8001280 <__swsetup_r+0xd0>)
 80011c8:	429c      	cmp	r4, r3
 80011ca:	d10f      	bne.n	80011ec <__swsetup_r+0x3c>
 80011cc:	686c      	ldr	r4, [r5, #4]
 80011ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	0715      	lsls	r5, r2, #28
 80011d6:	d42c      	bmi.n	8001232 <__swsetup_r+0x82>
 80011d8:	06d0      	lsls	r0, r2, #27
 80011da:	d411      	bmi.n	8001200 <__swsetup_r+0x50>
 80011dc:	2209      	movs	r2, #9
 80011de:	6032      	str	r2, [r6, #0]
 80011e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011e4:	81a3      	strh	r3, [r4, #12]
 80011e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011ea:	e03e      	b.n	800126a <__swsetup_r+0xba>
 80011ec:	4b25      	ldr	r3, [pc, #148]	; (8001284 <__swsetup_r+0xd4>)
 80011ee:	429c      	cmp	r4, r3
 80011f0:	d101      	bne.n	80011f6 <__swsetup_r+0x46>
 80011f2:	68ac      	ldr	r4, [r5, #8]
 80011f4:	e7eb      	b.n	80011ce <__swsetup_r+0x1e>
 80011f6:	4b24      	ldr	r3, [pc, #144]	; (8001288 <__swsetup_r+0xd8>)
 80011f8:	429c      	cmp	r4, r3
 80011fa:	bf08      	it	eq
 80011fc:	68ec      	ldreq	r4, [r5, #12]
 80011fe:	e7e6      	b.n	80011ce <__swsetup_r+0x1e>
 8001200:	0751      	lsls	r1, r2, #29
 8001202:	d512      	bpl.n	800122a <__swsetup_r+0x7a>
 8001204:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001206:	b141      	cbz	r1, 800121a <__swsetup_r+0x6a>
 8001208:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800120c:	4299      	cmp	r1, r3
 800120e:	d002      	beq.n	8001216 <__swsetup_r+0x66>
 8001210:	4630      	mov	r0, r6
 8001212:	f000 fa19 	bl	8001648 <_free_r>
 8001216:	2300      	movs	r3, #0
 8001218:	6363      	str	r3, [r4, #52]	; 0x34
 800121a:	89a3      	ldrh	r3, [r4, #12]
 800121c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001220:	81a3      	strh	r3, [r4, #12]
 8001222:	2300      	movs	r3, #0
 8001224:	6063      	str	r3, [r4, #4]
 8001226:	6923      	ldr	r3, [r4, #16]
 8001228:	6023      	str	r3, [r4, #0]
 800122a:	89a3      	ldrh	r3, [r4, #12]
 800122c:	f043 0308 	orr.w	r3, r3, #8
 8001230:	81a3      	strh	r3, [r4, #12]
 8001232:	6923      	ldr	r3, [r4, #16]
 8001234:	b94b      	cbnz	r3, 800124a <__swsetup_r+0x9a>
 8001236:	89a3      	ldrh	r3, [r4, #12]
 8001238:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800123c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001240:	d003      	beq.n	800124a <__swsetup_r+0x9a>
 8001242:	4621      	mov	r1, r4
 8001244:	4630      	mov	r0, r6
 8001246:	f000 f9bf 	bl	80015c8 <__smakebuf_r>
 800124a:	89a2      	ldrh	r2, [r4, #12]
 800124c:	f012 0301 	ands.w	r3, r2, #1
 8001250:	d00c      	beq.n	800126c <__swsetup_r+0xbc>
 8001252:	2300      	movs	r3, #0
 8001254:	60a3      	str	r3, [r4, #8]
 8001256:	6963      	ldr	r3, [r4, #20]
 8001258:	425b      	negs	r3, r3
 800125a:	61a3      	str	r3, [r4, #24]
 800125c:	6923      	ldr	r3, [r4, #16]
 800125e:	b953      	cbnz	r3, 8001276 <__swsetup_r+0xc6>
 8001260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001264:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001268:	d1ba      	bne.n	80011e0 <__swsetup_r+0x30>
 800126a:	bd70      	pop	{r4, r5, r6, pc}
 800126c:	0792      	lsls	r2, r2, #30
 800126e:	bf58      	it	pl
 8001270:	6963      	ldrpl	r3, [r4, #20]
 8001272:	60a3      	str	r3, [r4, #8]
 8001274:	e7f2      	b.n	800125c <__swsetup_r+0xac>
 8001276:	2000      	movs	r0, #0
 8001278:	e7f7      	b.n	800126a <__swsetup_r+0xba>
 800127a:	bf00      	nop
 800127c:	2000000c 	.word	0x2000000c
 8001280:	08001980 	.word	0x08001980
 8001284:	080019a0 	.word	0x080019a0
 8001288:	08001960 	.word	0x08001960

0800128c <__sflush_r>:
 800128c:	898a      	ldrh	r2, [r1, #12]
 800128e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001292:	4605      	mov	r5, r0
 8001294:	0710      	lsls	r0, r2, #28
 8001296:	460c      	mov	r4, r1
 8001298:	d458      	bmi.n	800134c <__sflush_r+0xc0>
 800129a:	684b      	ldr	r3, [r1, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	dc05      	bgt.n	80012ac <__sflush_r+0x20>
 80012a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	dc02      	bgt.n	80012ac <__sflush_r+0x20>
 80012a6:	2000      	movs	r0, #0
 80012a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012ae:	2e00      	cmp	r6, #0
 80012b0:	d0f9      	beq.n	80012a6 <__sflush_r+0x1a>
 80012b2:	2300      	movs	r3, #0
 80012b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80012b8:	682f      	ldr	r7, [r5, #0]
 80012ba:	6a21      	ldr	r1, [r4, #32]
 80012bc:	602b      	str	r3, [r5, #0]
 80012be:	d032      	beq.n	8001326 <__sflush_r+0x9a>
 80012c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80012c2:	89a3      	ldrh	r3, [r4, #12]
 80012c4:	075a      	lsls	r2, r3, #29
 80012c6:	d505      	bpl.n	80012d4 <__sflush_r+0x48>
 80012c8:	6863      	ldr	r3, [r4, #4]
 80012ca:	1ac0      	subs	r0, r0, r3
 80012cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012ce:	b10b      	cbz	r3, 80012d4 <__sflush_r+0x48>
 80012d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012d2:	1ac0      	subs	r0, r0, r3
 80012d4:	2300      	movs	r3, #0
 80012d6:	4602      	mov	r2, r0
 80012d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012da:	6a21      	ldr	r1, [r4, #32]
 80012dc:	4628      	mov	r0, r5
 80012de:	47b0      	blx	r6
 80012e0:	1c43      	adds	r3, r0, #1
 80012e2:	89a3      	ldrh	r3, [r4, #12]
 80012e4:	d106      	bne.n	80012f4 <__sflush_r+0x68>
 80012e6:	6829      	ldr	r1, [r5, #0]
 80012e8:	291d      	cmp	r1, #29
 80012ea:	d848      	bhi.n	800137e <__sflush_r+0xf2>
 80012ec:	4a29      	ldr	r2, [pc, #164]	; (8001394 <__sflush_r+0x108>)
 80012ee:	40ca      	lsrs	r2, r1
 80012f0:	07d6      	lsls	r6, r2, #31
 80012f2:	d544      	bpl.n	800137e <__sflush_r+0xf2>
 80012f4:	2200      	movs	r2, #0
 80012f6:	6062      	str	r2, [r4, #4]
 80012f8:	6922      	ldr	r2, [r4, #16]
 80012fa:	04d9      	lsls	r1, r3, #19
 80012fc:	6022      	str	r2, [r4, #0]
 80012fe:	d504      	bpl.n	800130a <__sflush_r+0x7e>
 8001300:	1c42      	adds	r2, r0, #1
 8001302:	d101      	bne.n	8001308 <__sflush_r+0x7c>
 8001304:	682b      	ldr	r3, [r5, #0]
 8001306:	b903      	cbnz	r3, 800130a <__sflush_r+0x7e>
 8001308:	6560      	str	r0, [r4, #84]	; 0x54
 800130a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800130c:	602f      	str	r7, [r5, #0]
 800130e:	2900      	cmp	r1, #0
 8001310:	d0c9      	beq.n	80012a6 <__sflush_r+0x1a>
 8001312:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001316:	4299      	cmp	r1, r3
 8001318:	d002      	beq.n	8001320 <__sflush_r+0x94>
 800131a:	4628      	mov	r0, r5
 800131c:	f000 f994 	bl	8001648 <_free_r>
 8001320:	2000      	movs	r0, #0
 8001322:	6360      	str	r0, [r4, #52]	; 0x34
 8001324:	e7c0      	b.n	80012a8 <__sflush_r+0x1c>
 8001326:	2301      	movs	r3, #1
 8001328:	4628      	mov	r0, r5
 800132a:	47b0      	blx	r6
 800132c:	1c41      	adds	r1, r0, #1
 800132e:	d1c8      	bne.n	80012c2 <__sflush_r+0x36>
 8001330:	682b      	ldr	r3, [r5, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0c5      	beq.n	80012c2 <__sflush_r+0x36>
 8001336:	2b1d      	cmp	r3, #29
 8001338:	d001      	beq.n	800133e <__sflush_r+0xb2>
 800133a:	2b16      	cmp	r3, #22
 800133c:	d101      	bne.n	8001342 <__sflush_r+0xb6>
 800133e:	602f      	str	r7, [r5, #0]
 8001340:	e7b1      	b.n	80012a6 <__sflush_r+0x1a>
 8001342:	89a3      	ldrh	r3, [r4, #12]
 8001344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001348:	81a3      	strh	r3, [r4, #12]
 800134a:	e7ad      	b.n	80012a8 <__sflush_r+0x1c>
 800134c:	690f      	ldr	r7, [r1, #16]
 800134e:	2f00      	cmp	r7, #0
 8001350:	d0a9      	beq.n	80012a6 <__sflush_r+0x1a>
 8001352:	0793      	lsls	r3, r2, #30
 8001354:	bf18      	it	ne
 8001356:	2300      	movne	r3, #0
 8001358:	680e      	ldr	r6, [r1, #0]
 800135a:	bf08      	it	eq
 800135c:	694b      	ldreq	r3, [r1, #20]
 800135e:	eba6 0807 	sub.w	r8, r6, r7
 8001362:	600f      	str	r7, [r1, #0]
 8001364:	608b      	str	r3, [r1, #8]
 8001366:	f1b8 0f00 	cmp.w	r8, #0
 800136a:	dd9c      	ble.n	80012a6 <__sflush_r+0x1a>
 800136c:	4643      	mov	r3, r8
 800136e:	463a      	mov	r2, r7
 8001370:	6a21      	ldr	r1, [r4, #32]
 8001372:	4628      	mov	r0, r5
 8001374:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001376:	47b0      	blx	r6
 8001378:	2800      	cmp	r0, #0
 800137a:	dc06      	bgt.n	800138a <__sflush_r+0xfe>
 800137c:	89a3      	ldrh	r3, [r4, #12]
 800137e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001382:	81a3      	strh	r3, [r4, #12]
 8001384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001388:	e78e      	b.n	80012a8 <__sflush_r+0x1c>
 800138a:	4407      	add	r7, r0
 800138c:	eba8 0800 	sub.w	r8, r8, r0
 8001390:	e7e9      	b.n	8001366 <__sflush_r+0xda>
 8001392:	bf00      	nop
 8001394:	20400001 	.word	0x20400001

08001398 <_fflush_r>:
 8001398:	b538      	push	{r3, r4, r5, lr}
 800139a:	690b      	ldr	r3, [r1, #16]
 800139c:	4605      	mov	r5, r0
 800139e:	460c      	mov	r4, r1
 80013a0:	b1db      	cbz	r3, 80013da <_fflush_r+0x42>
 80013a2:	b118      	cbz	r0, 80013ac <_fflush_r+0x14>
 80013a4:	6983      	ldr	r3, [r0, #24]
 80013a6:	b90b      	cbnz	r3, 80013ac <_fflush_r+0x14>
 80013a8:	f000 f860 	bl	800146c <__sinit>
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <_fflush_r+0x48>)
 80013ae:	429c      	cmp	r4, r3
 80013b0:	d109      	bne.n	80013c6 <_fflush_r+0x2e>
 80013b2:	686c      	ldr	r4, [r5, #4]
 80013b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013b8:	b17b      	cbz	r3, 80013da <_fflush_r+0x42>
 80013ba:	4621      	mov	r1, r4
 80013bc:	4628      	mov	r0, r5
 80013be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80013c2:	f7ff bf63 	b.w	800128c <__sflush_r>
 80013c6:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <_fflush_r+0x4c>)
 80013c8:	429c      	cmp	r4, r3
 80013ca:	d101      	bne.n	80013d0 <_fflush_r+0x38>
 80013cc:	68ac      	ldr	r4, [r5, #8]
 80013ce:	e7f1      	b.n	80013b4 <_fflush_r+0x1c>
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <_fflush_r+0x50>)
 80013d2:	429c      	cmp	r4, r3
 80013d4:	bf08      	it	eq
 80013d6:	68ec      	ldreq	r4, [r5, #12]
 80013d8:	e7ec      	b.n	80013b4 <_fflush_r+0x1c>
 80013da:	2000      	movs	r0, #0
 80013dc:	bd38      	pop	{r3, r4, r5, pc}
 80013de:	bf00      	nop
 80013e0:	08001980 	.word	0x08001980
 80013e4:	080019a0 	.word	0x080019a0
 80013e8:	08001960 	.word	0x08001960

080013ec <std>:
 80013ec:	2300      	movs	r3, #0
 80013ee:	b510      	push	{r4, lr}
 80013f0:	4604      	mov	r4, r0
 80013f2:	e9c0 3300 	strd	r3, r3, [r0]
 80013f6:	6083      	str	r3, [r0, #8]
 80013f8:	8181      	strh	r1, [r0, #12]
 80013fa:	6643      	str	r3, [r0, #100]	; 0x64
 80013fc:	81c2      	strh	r2, [r0, #14]
 80013fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001402:	6183      	str	r3, [r0, #24]
 8001404:	4619      	mov	r1, r3
 8001406:	2208      	movs	r2, #8
 8001408:	305c      	adds	r0, #92	; 0x5c
 800140a:	f7ff fe13 	bl	8001034 <memset>
 800140e:	4b05      	ldr	r3, [pc, #20]	; (8001424 <std+0x38>)
 8001410:	6224      	str	r4, [r4, #32]
 8001412:	6263      	str	r3, [r4, #36]	; 0x24
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <std+0x3c>)
 8001416:	62a3      	str	r3, [r4, #40]	; 0x28
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <std+0x40>)
 800141a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <std+0x44>)
 800141e:	6323      	str	r3, [r4, #48]	; 0x30
 8001420:	bd10      	pop	{r4, pc}
 8001422:	bf00      	nop
 8001424:	080017b5 	.word	0x080017b5
 8001428:	080017d7 	.word	0x080017d7
 800142c:	0800180f 	.word	0x0800180f
 8001430:	08001833 	.word	0x08001833

08001434 <_cleanup_r>:
 8001434:	4901      	ldr	r1, [pc, #4]	; (800143c <_cleanup_r+0x8>)
 8001436:	f000 b885 	b.w	8001544 <_fwalk_reent>
 800143a:	bf00      	nop
 800143c:	08001399 	.word	0x08001399

08001440 <__sfmoreglue>:
 8001440:	b570      	push	{r4, r5, r6, lr}
 8001442:	2568      	movs	r5, #104	; 0x68
 8001444:	1e4a      	subs	r2, r1, #1
 8001446:	4355      	muls	r5, r2
 8001448:	460e      	mov	r6, r1
 800144a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800144e:	f000 f947 	bl	80016e0 <_malloc_r>
 8001452:	4604      	mov	r4, r0
 8001454:	b140      	cbz	r0, 8001468 <__sfmoreglue+0x28>
 8001456:	2100      	movs	r1, #0
 8001458:	e9c0 1600 	strd	r1, r6, [r0]
 800145c:	300c      	adds	r0, #12
 800145e:	60a0      	str	r0, [r4, #8]
 8001460:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001464:	f7ff fde6 	bl	8001034 <memset>
 8001468:	4620      	mov	r0, r4
 800146a:	bd70      	pop	{r4, r5, r6, pc}

0800146c <__sinit>:
 800146c:	6983      	ldr	r3, [r0, #24]
 800146e:	b510      	push	{r4, lr}
 8001470:	4604      	mov	r4, r0
 8001472:	bb33      	cbnz	r3, 80014c2 <__sinit+0x56>
 8001474:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001478:	6503      	str	r3, [r0, #80]	; 0x50
 800147a:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <__sinit+0x58>)
 800147c:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <__sinit+0x5c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6282      	str	r2, [r0, #40]	; 0x28
 8001482:	4298      	cmp	r0, r3
 8001484:	bf04      	itt	eq
 8001486:	2301      	moveq	r3, #1
 8001488:	6183      	streq	r3, [r0, #24]
 800148a:	f000 f81f 	bl	80014cc <__sfp>
 800148e:	6060      	str	r0, [r4, #4]
 8001490:	4620      	mov	r0, r4
 8001492:	f000 f81b 	bl	80014cc <__sfp>
 8001496:	60a0      	str	r0, [r4, #8]
 8001498:	4620      	mov	r0, r4
 800149a:	f000 f817 	bl	80014cc <__sfp>
 800149e:	2200      	movs	r2, #0
 80014a0:	60e0      	str	r0, [r4, #12]
 80014a2:	2104      	movs	r1, #4
 80014a4:	6860      	ldr	r0, [r4, #4]
 80014a6:	f7ff ffa1 	bl	80013ec <std>
 80014aa:	2201      	movs	r2, #1
 80014ac:	2109      	movs	r1, #9
 80014ae:	68a0      	ldr	r0, [r4, #8]
 80014b0:	f7ff ff9c 	bl	80013ec <std>
 80014b4:	2202      	movs	r2, #2
 80014b6:	2112      	movs	r1, #18
 80014b8:	68e0      	ldr	r0, [r4, #12]
 80014ba:	f7ff ff97 	bl	80013ec <std>
 80014be:	2301      	movs	r3, #1
 80014c0:	61a3      	str	r3, [r4, #24]
 80014c2:	bd10      	pop	{r4, pc}
 80014c4:	0800195c 	.word	0x0800195c
 80014c8:	08001435 	.word	0x08001435

080014cc <__sfp>:
 80014cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ce:	4b1b      	ldr	r3, [pc, #108]	; (800153c <__sfp+0x70>)
 80014d0:	4607      	mov	r7, r0
 80014d2:	681e      	ldr	r6, [r3, #0]
 80014d4:	69b3      	ldr	r3, [r6, #24]
 80014d6:	b913      	cbnz	r3, 80014de <__sfp+0x12>
 80014d8:	4630      	mov	r0, r6
 80014da:	f7ff ffc7 	bl	800146c <__sinit>
 80014de:	3648      	adds	r6, #72	; 0x48
 80014e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80014e4:	3b01      	subs	r3, #1
 80014e6:	d503      	bpl.n	80014f0 <__sfp+0x24>
 80014e8:	6833      	ldr	r3, [r6, #0]
 80014ea:	b133      	cbz	r3, 80014fa <__sfp+0x2e>
 80014ec:	6836      	ldr	r6, [r6, #0]
 80014ee:	e7f7      	b.n	80014e0 <__sfp+0x14>
 80014f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80014f4:	b16d      	cbz	r5, 8001512 <__sfp+0x46>
 80014f6:	3468      	adds	r4, #104	; 0x68
 80014f8:	e7f4      	b.n	80014e4 <__sfp+0x18>
 80014fa:	2104      	movs	r1, #4
 80014fc:	4638      	mov	r0, r7
 80014fe:	f7ff ff9f 	bl	8001440 <__sfmoreglue>
 8001502:	6030      	str	r0, [r6, #0]
 8001504:	2800      	cmp	r0, #0
 8001506:	d1f1      	bne.n	80014ec <__sfp+0x20>
 8001508:	230c      	movs	r3, #12
 800150a:	4604      	mov	r4, r0
 800150c:	603b      	str	r3, [r7, #0]
 800150e:	4620      	mov	r0, r4
 8001510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <__sfp+0x74>)
 8001514:	6665      	str	r5, [r4, #100]	; 0x64
 8001516:	e9c4 5500 	strd	r5, r5, [r4]
 800151a:	60a5      	str	r5, [r4, #8]
 800151c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001520:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001524:	2208      	movs	r2, #8
 8001526:	4629      	mov	r1, r5
 8001528:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800152c:	f7ff fd82 	bl	8001034 <memset>
 8001530:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001534:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001538:	e7e9      	b.n	800150e <__sfp+0x42>
 800153a:	bf00      	nop
 800153c:	0800195c 	.word	0x0800195c
 8001540:	ffff0001 	.word	0xffff0001

08001544 <_fwalk_reent>:
 8001544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001548:	4680      	mov	r8, r0
 800154a:	4689      	mov	r9, r1
 800154c:	2600      	movs	r6, #0
 800154e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001552:	b914      	cbnz	r4, 800155a <_fwalk_reent+0x16>
 8001554:	4630      	mov	r0, r6
 8001556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800155a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800155e:	3f01      	subs	r7, #1
 8001560:	d501      	bpl.n	8001566 <_fwalk_reent+0x22>
 8001562:	6824      	ldr	r4, [r4, #0]
 8001564:	e7f5      	b.n	8001552 <_fwalk_reent+0xe>
 8001566:	89ab      	ldrh	r3, [r5, #12]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d907      	bls.n	800157c <_fwalk_reent+0x38>
 800156c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001570:	3301      	adds	r3, #1
 8001572:	d003      	beq.n	800157c <_fwalk_reent+0x38>
 8001574:	4629      	mov	r1, r5
 8001576:	4640      	mov	r0, r8
 8001578:	47c8      	blx	r9
 800157a:	4306      	orrs	r6, r0
 800157c:	3568      	adds	r5, #104	; 0x68
 800157e:	e7ee      	b.n	800155e <_fwalk_reent+0x1a>

08001580 <__swhatbuf_r>:
 8001580:	b570      	push	{r4, r5, r6, lr}
 8001582:	460e      	mov	r6, r1
 8001584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001588:	b096      	sub	sp, #88	; 0x58
 800158a:	2900      	cmp	r1, #0
 800158c:	4614      	mov	r4, r2
 800158e:	461d      	mov	r5, r3
 8001590:	da07      	bge.n	80015a2 <__swhatbuf_r+0x22>
 8001592:	2300      	movs	r3, #0
 8001594:	602b      	str	r3, [r5, #0]
 8001596:	89b3      	ldrh	r3, [r6, #12]
 8001598:	061a      	lsls	r2, r3, #24
 800159a:	d410      	bmi.n	80015be <__swhatbuf_r+0x3e>
 800159c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a0:	e00e      	b.n	80015c0 <__swhatbuf_r+0x40>
 80015a2:	466a      	mov	r2, sp
 80015a4:	f000 f96c 	bl	8001880 <_fstat_r>
 80015a8:	2800      	cmp	r0, #0
 80015aa:	dbf2      	blt.n	8001592 <__swhatbuf_r+0x12>
 80015ac:	9a01      	ldr	r2, [sp, #4]
 80015ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80015b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80015b6:	425a      	negs	r2, r3
 80015b8:	415a      	adcs	r2, r3
 80015ba:	602a      	str	r2, [r5, #0]
 80015bc:	e7ee      	b.n	800159c <__swhatbuf_r+0x1c>
 80015be:	2340      	movs	r3, #64	; 0x40
 80015c0:	2000      	movs	r0, #0
 80015c2:	6023      	str	r3, [r4, #0]
 80015c4:	b016      	add	sp, #88	; 0x58
 80015c6:	bd70      	pop	{r4, r5, r6, pc}

080015c8 <__smakebuf_r>:
 80015c8:	898b      	ldrh	r3, [r1, #12]
 80015ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80015cc:	079d      	lsls	r5, r3, #30
 80015ce:	4606      	mov	r6, r0
 80015d0:	460c      	mov	r4, r1
 80015d2:	d507      	bpl.n	80015e4 <__smakebuf_r+0x1c>
 80015d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80015d8:	6023      	str	r3, [r4, #0]
 80015da:	6123      	str	r3, [r4, #16]
 80015dc:	2301      	movs	r3, #1
 80015de:	6163      	str	r3, [r4, #20]
 80015e0:	b002      	add	sp, #8
 80015e2:	bd70      	pop	{r4, r5, r6, pc}
 80015e4:	ab01      	add	r3, sp, #4
 80015e6:	466a      	mov	r2, sp
 80015e8:	f7ff ffca 	bl	8001580 <__swhatbuf_r>
 80015ec:	9900      	ldr	r1, [sp, #0]
 80015ee:	4605      	mov	r5, r0
 80015f0:	4630      	mov	r0, r6
 80015f2:	f000 f875 	bl	80016e0 <_malloc_r>
 80015f6:	b948      	cbnz	r0, 800160c <__smakebuf_r+0x44>
 80015f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015fc:	059a      	lsls	r2, r3, #22
 80015fe:	d4ef      	bmi.n	80015e0 <__smakebuf_r+0x18>
 8001600:	f023 0303 	bic.w	r3, r3, #3
 8001604:	f043 0302 	orr.w	r3, r3, #2
 8001608:	81a3      	strh	r3, [r4, #12]
 800160a:	e7e3      	b.n	80015d4 <__smakebuf_r+0xc>
 800160c:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <__smakebuf_r+0x7c>)
 800160e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001610:	89a3      	ldrh	r3, [r4, #12]
 8001612:	6020      	str	r0, [r4, #0]
 8001614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001618:	81a3      	strh	r3, [r4, #12]
 800161a:	9b00      	ldr	r3, [sp, #0]
 800161c:	6120      	str	r0, [r4, #16]
 800161e:	6163      	str	r3, [r4, #20]
 8001620:	9b01      	ldr	r3, [sp, #4]
 8001622:	b15b      	cbz	r3, 800163c <__smakebuf_r+0x74>
 8001624:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001628:	4630      	mov	r0, r6
 800162a:	f000 f93b 	bl	80018a4 <_isatty_r>
 800162e:	b128      	cbz	r0, 800163c <__smakebuf_r+0x74>
 8001630:	89a3      	ldrh	r3, [r4, #12]
 8001632:	f023 0303 	bic.w	r3, r3, #3
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	81a3      	strh	r3, [r4, #12]
 800163c:	89a3      	ldrh	r3, [r4, #12]
 800163e:	431d      	orrs	r5, r3
 8001640:	81a5      	strh	r5, [r4, #12]
 8001642:	e7cd      	b.n	80015e0 <__smakebuf_r+0x18>
 8001644:	08001435 	.word	0x08001435

08001648 <_free_r>:
 8001648:	b538      	push	{r3, r4, r5, lr}
 800164a:	4605      	mov	r5, r0
 800164c:	2900      	cmp	r1, #0
 800164e:	d043      	beq.n	80016d8 <_free_r+0x90>
 8001650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001654:	1f0c      	subs	r4, r1, #4
 8001656:	2b00      	cmp	r3, #0
 8001658:	bfb8      	it	lt
 800165a:	18e4      	addlt	r4, r4, r3
 800165c:	f000 f944 	bl	80018e8 <__malloc_lock>
 8001660:	4a1e      	ldr	r2, [pc, #120]	; (80016dc <_free_r+0x94>)
 8001662:	6813      	ldr	r3, [r2, #0]
 8001664:	4610      	mov	r0, r2
 8001666:	b933      	cbnz	r3, 8001676 <_free_r+0x2e>
 8001668:	6063      	str	r3, [r4, #4]
 800166a:	6014      	str	r4, [r2, #0]
 800166c:	4628      	mov	r0, r5
 800166e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001672:	f000 b93a 	b.w	80018ea <__malloc_unlock>
 8001676:	42a3      	cmp	r3, r4
 8001678:	d90b      	bls.n	8001692 <_free_r+0x4a>
 800167a:	6821      	ldr	r1, [r4, #0]
 800167c:	1862      	adds	r2, r4, r1
 800167e:	4293      	cmp	r3, r2
 8001680:	bf01      	itttt	eq
 8001682:	681a      	ldreq	r2, [r3, #0]
 8001684:	685b      	ldreq	r3, [r3, #4]
 8001686:	1852      	addeq	r2, r2, r1
 8001688:	6022      	streq	r2, [r4, #0]
 800168a:	6063      	str	r3, [r4, #4]
 800168c:	6004      	str	r4, [r0, #0]
 800168e:	e7ed      	b.n	800166c <_free_r+0x24>
 8001690:	4613      	mov	r3, r2
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	b10a      	cbz	r2, 800169a <_free_r+0x52>
 8001696:	42a2      	cmp	r2, r4
 8001698:	d9fa      	bls.n	8001690 <_free_r+0x48>
 800169a:	6819      	ldr	r1, [r3, #0]
 800169c:	1858      	adds	r0, r3, r1
 800169e:	42a0      	cmp	r0, r4
 80016a0:	d10b      	bne.n	80016ba <_free_r+0x72>
 80016a2:	6820      	ldr	r0, [r4, #0]
 80016a4:	4401      	add	r1, r0
 80016a6:	1858      	adds	r0, r3, r1
 80016a8:	4282      	cmp	r2, r0
 80016aa:	6019      	str	r1, [r3, #0]
 80016ac:	d1de      	bne.n	800166c <_free_r+0x24>
 80016ae:	6810      	ldr	r0, [r2, #0]
 80016b0:	6852      	ldr	r2, [r2, #4]
 80016b2:	4401      	add	r1, r0
 80016b4:	6019      	str	r1, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	e7d8      	b.n	800166c <_free_r+0x24>
 80016ba:	d902      	bls.n	80016c2 <_free_r+0x7a>
 80016bc:	230c      	movs	r3, #12
 80016be:	602b      	str	r3, [r5, #0]
 80016c0:	e7d4      	b.n	800166c <_free_r+0x24>
 80016c2:	6820      	ldr	r0, [r4, #0]
 80016c4:	1821      	adds	r1, r4, r0
 80016c6:	428a      	cmp	r2, r1
 80016c8:	bf01      	itttt	eq
 80016ca:	6811      	ldreq	r1, [r2, #0]
 80016cc:	6852      	ldreq	r2, [r2, #4]
 80016ce:	1809      	addeq	r1, r1, r0
 80016d0:	6021      	streq	r1, [r4, #0]
 80016d2:	6062      	str	r2, [r4, #4]
 80016d4:	605c      	str	r4, [r3, #4]
 80016d6:	e7c9      	b.n	800166c <_free_r+0x24>
 80016d8:	bd38      	pop	{r3, r4, r5, pc}
 80016da:	bf00      	nop
 80016dc:	20000090 	.word	0x20000090

080016e0 <_malloc_r>:
 80016e0:	b570      	push	{r4, r5, r6, lr}
 80016e2:	1ccd      	adds	r5, r1, #3
 80016e4:	f025 0503 	bic.w	r5, r5, #3
 80016e8:	3508      	adds	r5, #8
 80016ea:	2d0c      	cmp	r5, #12
 80016ec:	bf38      	it	cc
 80016ee:	250c      	movcc	r5, #12
 80016f0:	2d00      	cmp	r5, #0
 80016f2:	4606      	mov	r6, r0
 80016f4:	db01      	blt.n	80016fa <_malloc_r+0x1a>
 80016f6:	42a9      	cmp	r1, r5
 80016f8:	d903      	bls.n	8001702 <_malloc_r+0x22>
 80016fa:	230c      	movs	r3, #12
 80016fc:	6033      	str	r3, [r6, #0]
 80016fe:	2000      	movs	r0, #0
 8001700:	bd70      	pop	{r4, r5, r6, pc}
 8001702:	f000 f8f1 	bl	80018e8 <__malloc_lock>
 8001706:	4a21      	ldr	r2, [pc, #132]	; (800178c <_malloc_r+0xac>)
 8001708:	6814      	ldr	r4, [r2, #0]
 800170a:	4621      	mov	r1, r4
 800170c:	b991      	cbnz	r1, 8001734 <_malloc_r+0x54>
 800170e:	4c20      	ldr	r4, [pc, #128]	; (8001790 <_malloc_r+0xb0>)
 8001710:	6823      	ldr	r3, [r4, #0]
 8001712:	b91b      	cbnz	r3, 800171c <_malloc_r+0x3c>
 8001714:	4630      	mov	r0, r6
 8001716:	f000 f83d 	bl	8001794 <_sbrk_r>
 800171a:	6020      	str	r0, [r4, #0]
 800171c:	4629      	mov	r1, r5
 800171e:	4630      	mov	r0, r6
 8001720:	f000 f838 	bl	8001794 <_sbrk_r>
 8001724:	1c43      	adds	r3, r0, #1
 8001726:	d124      	bne.n	8001772 <_malloc_r+0x92>
 8001728:	230c      	movs	r3, #12
 800172a:	4630      	mov	r0, r6
 800172c:	6033      	str	r3, [r6, #0]
 800172e:	f000 f8dc 	bl	80018ea <__malloc_unlock>
 8001732:	e7e4      	b.n	80016fe <_malloc_r+0x1e>
 8001734:	680b      	ldr	r3, [r1, #0]
 8001736:	1b5b      	subs	r3, r3, r5
 8001738:	d418      	bmi.n	800176c <_malloc_r+0x8c>
 800173a:	2b0b      	cmp	r3, #11
 800173c:	d90f      	bls.n	800175e <_malloc_r+0x7e>
 800173e:	600b      	str	r3, [r1, #0]
 8001740:	18cc      	adds	r4, r1, r3
 8001742:	50cd      	str	r5, [r1, r3]
 8001744:	4630      	mov	r0, r6
 8001746:	f000 f8d0 	bl	80018ea <__malloc_unlock>
 800174a:	f104 000b 	add.w	r0, r4, #11
 800174e:	1d23      	adds	r3, r4, #4
 8001750:	f020 0007 	bic.w	r0, r0, #7
 8001754:	1ac3      	subs	r3, r0, r3
 8001756:	d0d3      	beq.n	8001700 <_malloc_r+0x20>
 8001758:	425a      	negs	r2, r3
 800175a:	50e2      	str	r2, [r4, r3]
 800175c:	e7d0      	b.n	8001700 <_malloc_r+0x20>
 800175e:	684b      	ldr	r3, [r1, #4]
 8001760:	428c      	cmp	r4, r1
 8001762:	bf16      	itet	ne
 8001764:	6063      	strne	r3, [r4, #4]
 8001766:	6013      	streq	r3, [r2, #0]
 8001768:	460c      	movne	r4, r1
 800176a:	e7eb      	b.n	8001744 <_malloc_r+0x64>
 800176c:	460c      	mov	r4, r1
 800176e:	6849      	ldr	r1, [r1, #4]
 8001770:	e7cc      	b.n	800170c <_malloc_r+0x2c>
 8001772:	1cc4      	adds	r4, r0, #3
 8001774:	f024 0403 	bic.w	r4, r4, #3
 8001778:	42a0      	cmp	r0, r4
 800177a:	d005      	beq.n	8001788 <_malloc_r+0xa8>
 800177c:	1a21      	subs	r1, r4, r0
 800177e:	4630      	mov	r0, r6
 8001780:	f000 f808 	bl	8001794 <_sbrk_r>
 8001784:	3001      	adds	r0, #1
 8001786:	d0cf      	beq.n	8001728 <_malloc_r+0x48>
 8001788:	6025      	str	r5, [r4, #0]
 800178a:	e7db      	b.n	8001744 <_malloc_r+0x64>
 800178c:	20000090 	.word	0x20000090
 8001790:	20000094 	.word	0x20000094

08001794 <_sbrk_r>:
 8001794:	b538      	push	{r3, r4, r5, lr}
 8001796:	2300      	movs	r3, #0
 8001798:	4c05      	ldr	r4, [pc, #20]	; (80017b0 <_sbrk_r+0x1c>)
 800179a:	4605      	mov	r5, r0
 800179c:	4608      	mov	r0, r1
 800179e:	6023      	str	r3, [r4, #0]
 80017a0:	f7fe fe3c 	bl	800041c <_sbrk>
 80017a4:	1c43      	adds	r3, r0, #1
 80017a6:	d102      	bne.n	80017ae <_sbrk_r+0x1a>
 80017a8:	6823      	ldr	r3, [r4, #0]
 80017aa:	b103      	cbz	r3, 80017ae <_sbrk_r+0x1a>
 80017ac:	602b      	str	r3, [r5, #0]
 80017ae:	bd38      	pop	{r3, r4, r5, pc}
 80017b0:	2000009c 	.word	0x2000009c

080017b4 <__sread>:
 80017b4:	b510      	push	{r4, lr}
 80017b6:	460c      	mov	r4, r1
 80017b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017bc:	f000 f896 	bl	80018ec <_read_r>
 80017c0:	2800      	cmp	r0, #0
 80017c2:	bfab      	itete	ge
 80017c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80017c6:	89a3      	ldrhlt	r3, [r4, #12]
 80017c8:	181b      	addge	r3, r3, r0
 80017ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80017ce:	bfac      	ite	ge
 80017d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80017d2:	81a3      	strhlt	r3, [r4, #12]
 80017d4:	bd10      	pop	{r4, pc}

080017d6 <__swrite>:
 80017d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017da:	461f      	mov	r7, r3
 80017dc:	898b      	ldrh	r3, [r1, #12]
 80017de:	4605      	mov	r5, r0
 80017e0:	05db      	lsls	r3, r3, #23
 80017e2:	460c      	mov	r4, r1
 80017e4:	4616      	mov	r6, r2
 80017e6:	d505      	bpl.n	80017f4 <__swrite+0x1e>
 80017e8:	2302      	movs	r3, #2
 80017ea:	2200      	movs	r2, #0
 80017ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017f0:	f000 f868 	bl	80018c4 <_lseek_r>
 80017f4:	89a3      	ldrh	r3, [r4, #12]
 80017f6:	4632      	mov	r2, r6
 80017f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017fc:	81a3      	strh	r3, [r4, #12]
 80017fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001802:	463b      	mov	r3, r7
 8001804:	4628      	mov	r0, r5
 8001806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800180a:	f000 b817 	b.w	800183c <_write_r>

0800180e <__sseek>:
 800180e:	b510      	push	{r4, lr}
 8001810:	460c      	mov	r4, r1
 8001812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001816:	f000 f855 	bl	80018c4 <_lseek_r>
 800181a:	1c43      	adds	r3, r0, #1
 800181c:	89a3      	ldrh	r3, [r4, #12]
 800181e:	bf15      	itete	ne
 8001820:	6560      	strne	r0, [r4, #84]	; 0x54
 8001822:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001826:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800182a:	81a3      	strheq	r3, [r4, #12]
 800182c:	bf18      	it	ne
 800182e:	81a3      	strhne	r3, [r4, #12]
 8001830:	bd10      	pop	{r4, pc}

08001832 <__sclose>:
 8001832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001836:	f000 b813 	b.w	8001860 <_close_r>
	...

0800183c <_write_r>:
 800183c:	b538      	push	{r3, r4, r5, lr}
 800183e:	4605      	mov	r5, r0
 8001840:	4608      	mov	r0, r1
 8001842:	4611      	mov	r1, r2
 8001844:	2200      	movs	r2, #0
 8001846:	4c05      	ldr	r4, [pc, #20]	; (800185c <_write_r+0x20>)
 8001848:	6022      	str	r2, [r4, #0]
 800184a:	461a      	mov	r2, r3
 800184c:	f7fe fca4 	bl	8000198 <_write>
 8001850:	1c43      	adds	r3, r0, #1
 8001852:	d102      	bne.n	800185a <_write_r+0x1e>
 8001854:	6823      	ldr	r3, [r4, #0]
 8001856:	b103      	cbz	r3, 800185a <_write_r+0x1e>
 8001858:	602b      	str	r3, [r5, #0]
 800185a:	bd38      	pop	{r3, r4, r5, pc}
 800185c:	2000009c 	.word	0x2000009c

08001860 <_close_r>:
 8001860:	b538      	push	{r3, r4, r5, lr}
 8001862:	2300      	movs	r3, #0
 8001864:	4c05      	ldr	r4, [pc, #20]	; (800187c <_close_r+0x1c>)
 8001866:	4605      	mov	r5, r0
 8001868:	4608      	mov	r0, r1
 800186a:	6023      	str	r3, [r4, #0]
 800186c:	f7fe fda5 	bl	80003ba <_close>
 8001870:	1c43      	adds	r3, r0, #1
 8001872:	d102      	bne.n	800187a <_close_r+0x1a>
 8001874:	6823      	ldr	r3, [r4, #0]
 8001876:	b103      	cbz	r3, 800187a <_close_r+0x1a>
 8001878:	602b      	str	r3, [r5, #0]
 800187a:	bd38      	pop	{r3, r4, r5, pc}
 800187c:	2000009c 	.word	0x2000009c

08001880 <_fstat_r>:
 8001880:	b538      	push	{r3, r4, r5, lr}
 8001882:	2300      	movs	r3, #0
 8001884:	4c06      	ldr	r4, [pc, #24]	; (80018a0 <_fstat_r+0x20>)
 8001886:	4605      	mov	r5, r0
 8001888:	4608      	mov	r0, r1
 800188a:	4611      	mov	r1, r2
 800188c:	6023      	str	r3, [r4, #0]
 800188e:	f7fe fd9f 	bl	80003d0 <_fstat>
 8001892:	1c43      	adds	r3, r0, #1
 8001894:	d102      	bne.n	800189c <_fstat_r+0x1c>
 8001896:	6823      	ldr	r3, [r4, #0]
 8001898:	b103      	cbz	r3, 800189c <_fstat_r+0x1c>
 800189a:	602b      	str	r3, [r5, #0]
 800189c:	bd38      	pop	{r3, r4, r5, pc}
 800189e:	bf00      	nop
 80018a0:	2000009c 	.word	0x2000009c

080018a4 <_isatty_r>:
 80018a4:	b538      	push	{r3, r4, r5, lr}
 80018a6:	2300      	movs	r3, #0
 80018a8:	4c05      	ldr	r4, [pc, #20]	; (80018c0 <_isatty_r+0x1c>)
 80018aa:	4605      	mov	r5, r0
 80018ac:	4608      	mov	r0, r1
 80018ae:	6023      	str	r3, [r4, #0]
 80018b0:	f7fe fd9d 	bl	80003ee <_isatty>
 80018b4:	1c43      	adds	r3, r0, #1
 80018b6:	d102      	bne.n	80018be <_isatty_r+0x1a>
 80018b8:	6823      	ldr	r3, [r4, #0]
 80018ba:	b103      	cbz	r3, 80018be <_isatty_r+0x1a>
 80018bc:	602b      	str	r3, [r5, #0]
 80018be:	bd38      	pop	{r3, r4, r5, pc}
 80018c0:	2000009c 	.word	0x2000009c

080018c4 <_lseek_r>:
 80018c4:	b538      	push	{r3, r4, r5, lr}
 80018c6:	4605      	mov	r5, r0
 80018c8:	4608      	mov	r0, r1
 80018ca:	4611      	mov	r1, r2
 80018cc:	2200      	movs	r2, #0
 80018ce:	4c05      	ldr	r4, [pc, #20]	; (80018e4 <_lseek_r+0x20>)
 80018d0:	6022      	str	r2, [r4, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	f7fe fd95 	bl	8000402 <_lseek>
 80018d8:	1c43      	adds	r3, r0, #1
 80018da:	d102      	bne.n	80018e2 <_lseek_r+0x1e>
 80018dc:	6823      	ldr	r3, [r4, #0]
 80018de:	b103      	cbz	r3, 80018e2 <_lseek_r+0x1e>
 80018e0:	602b      	str	r3, [r5, #0]
 80018e2:	bd38      	pop	{r3, r4, r5, pc}
 80018e4:	2000009c 	.word	0x2000009c

080018e8 <__malloc_lock>:
 80018e8:	4770      	bx	lr

080018ea <__malloc_unlock>:
 80018ea:	4770      	bx	lr

080018ec <_read_r>:
 80018ec:	b538      	push	{r3, r4, r5, lr}
 80018ee:	4605      	mov	r5, r0
 80018f0:	4608      	mov	r0, r1
 80018f2:	4611      	mov	r1, r2
 80018f4:	2200      	movs	r2, #0
 80018f6:	4c05      	ldr	r4, [pc, #20]	; (800190c <_read_r+0x20>)
 80018f8:	6022      	str	r2, [r4, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	f7fe fd40 	bl	8000380 <_read>
 8001900:	1c43      	adds	r3, r0, #1
 8001902:	d102      	bne.n	800190a <_read_r+0x1e>
 8001904:	6823      	ldr	r3, [r4, #0]
 8001906:	b103      	cbz	r3, 800190a <_read_r+0x1e>
 8001908:	602b      	str	r3, [r5, #0]
 800190a:	bd38      	pop	{r3, r4, r5, pc}
 800190c:	2000009c 	.word	0x2000009c

08001910 <_init>:
 8001910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001912:	bf00      	nop
 8001914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001916:	bc08      	pop	{r3}
 8001918:	469e      	mov	lr, r3
 800191a:	4770      	bx	lr

0800191c <_fini>:
 800191c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800191e:	bf00      	nop
 8001920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001922:	bc08      	pop	{r3}
 8001924:	469e      	mov	lr, r3
 8001926:	4770      	bx	lr
