
Nucleo32_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003374  08003374  00013374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003410  08003410  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003410  08003410  00013410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003418  08003418  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003418  08003418  00013418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800341c  0800341c  0001341c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000070  08003490  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08003490  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000090d5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001647  00000000  00000000  00029175  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000868  00000000  00000000  0002a7c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007a0  00000000  00000000  0002b028  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f173  00000000  00000000  0002b7c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007100  00000000  00000000  0004a93b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000be440  00000000  00000000  00051a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010fe7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002460  00000000  00000000  0010fef8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800335c 	.word	0x0800335c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800335c 	.word	0x0800335c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t MSG[25] = {'\0'};
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]
 8000584:	615a      	str	r2, [r3, #20]
 8000586:	761a      	strb	r2, [r3, #24]
	uint8_t X = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	77fb      	strb	r3, [r7, #31]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f000 fa09 	bl	80009a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f81c 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f000 f8bc 	bl	8000710 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000598:	f000 f88a 	bl	80006b0 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf(MSG, "Hello Dudes! Tracing X = %d\r\n", X);
 800059c:	7ffa      	ldrb	r2, [r7, #31]
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	4908      	ldr	r1, [pc, #32]	; (80005c4 <main+0x54>)
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 fad4 	bl	8002b50 <siprintf>
	  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 80005a8:	1d39      	adds	r1, r7, #4
 80005aa:	2364      	movs	r3, #100	; 0x64
 80005ac:	2219      	movs	r2, #25
 80005ae:	4806      	ldr	r0, [pc, #24]	; (80005c8 <main+0x58>)
 80005b0:	f001 fe96 	bl	80022e0 <HAL_UART_Transmit>
	  HAL_Delay(500);
 80005b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005b8:	f000 fa68 	bl	8000a8c <HAL_Delay>
	  X++;
 80005bc:	7ffb      	ldrb	r3, [r7, #31]
 80005be:	3301      	adds	r3, #1
 80005c0:	77fb      	strb	r3, [r7, #31]
  {
 80005c2:	e7eb      	b.n	800059c <main+0x2c>
 80005c4:	08003374 	.word	0x08003374
 80005c8:	20000098 	.word	0x20000098

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b0ac      	sub	sp, #176	; 0xb0
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80005d6:	2244      	movs	r2, #68	; 0x44
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 fab0 	bl	8002b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2254      	movs	r2, #84	; 0x54
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 faa2 	bl	8002b40 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005fc:	2310      	movs	r3, #16
 80005fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800060c:	2360      	movs	r3, #96	; 0x60
 800060e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000618:	2301      	movs	r3, #1
 800061a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 800061e:	2301      	movs	r3, #1
 8000620:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000624:	2328      	movs	r3, #40	; 0x28
 8000626:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800062a:	2307      	movs	r3, #7
 800062c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000640:	4618      	mov	r0, r3
 8000642:	f000 fcf9 	bl	8001038 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800064c:	f000 f878 	bl	8000740 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	2303      	movs	r3, #3
 8000656:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000664:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000668:	2104      	movs	r1, #4
 800066a:	4618      	mov	r0, r3
 800066c:	f001 f904 	bl	8001878 <HAL_RCC_ClockConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000676:	f000 f863 	bl	8000740 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800067a:	2302      	movs	r3, #2
 800067c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800067e:	2300      	movs	r3, #0
 8000680:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fafb 	bl	8001c80 <HAL_RCCEx_PeriphCLKConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000690:	f000 f856 	bl	8000740 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000694:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000698:	f000 fc78 	bl	8000f8c <HAL_PWREx_ControlVoltageScaling>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80006a2:	f000 f84d 	bl	8000740 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	37b0      	adds	r7, #176	; 0xb0
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006b6:	4a15      	ldr	r2, [pc, #84]	; (800070c <MX_USART2_UART_Init+0x5c>)
 80006b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006f4:	f001 fda6 	bl	8002244 <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006fe:	f000 f81f 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000098 	.word	0x20000098
 800070c:	40004400 	.word	0x40004400

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_GPIO_Init+0x2c>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	4a08      	ldr	r2, [pc, #32]	; (800073c <MX_GPIO_Init+0x2c>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_GPIO_Init+0x2c>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40021000 	.word	0x40021000

08000740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
	...

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <HAL_MspInit+0x44>)
 8000758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800075a:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <HAL_MspInit+0x44>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6613      	str	r3, [r2, #96]	; 0x60
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <HAL_MspInit+0x44>)
 8000764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <HAL_MspInit+0x44>)
 8000770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000772:	4a08      	ldr	r2, [pc, #32]	; (8000794 <HAL_MspInit+0x44>)
 8000774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000778:	6593      	str	r3, [r2, #88]	; 0x58
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <HAL_MspInit+0x44>)
 800077c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800077e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40021000 	.word	0x40021000

08000798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	; 0x28
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a17      	ldr	r2, [pc, #92]	; (8000814 <HAL_UART_MspInit+0x7c>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d128      	bne.n	800080c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <HAL_UART_MspInit+0x80>)
 80007bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007be:	4a16      	ldr	r2, [pc, #88]	; (8000818 <HAL_UART_MspInit+0x80>)
 80007c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c4:	6593      	str	r3, [r2, #88]	; 0x58
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <HAL_UART_MspInit+0x80>)
 80007c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <HAL_UART_MspInit+0x80>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	4a10      	ldr	r2, [pc, #64]	; (8000818 <HAL_UART_MspInit+0x80>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <HAL_UART_MspInit+0x80>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007ea:	230c      	movs	r3, #12
 80007ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f6:	2303      	movs	r3, #3
 80007f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007fa:	2307      	movs	r3, #7
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	4619      	mov	r1, r3
 8000804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000808:	f000 fa48 	bl	8000c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800080c:	bf00      	nop
 800080e:	3728      	adds	r7, #40	; 0x28
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40004400 	.word	0x40004400
 8000818:	40021000 	.word	0x40021000

0800081c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <HardFault_Handler+0x4>

08000830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <MemManage_Handler+0x4>

08000836 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <BusFault_Handler+0x4>

0800083c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <UsageFault_Handler+0x4>

08000842 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000870:	f000 f8ec 	bl	8000a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}

08000878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000880:	4a14      	ldr	r2, [pc, #80]	; (80008d4 <_sbrk+0x5c>)
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <_sbrk+0x60>)
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800088c:	4b13      	ldr	r3, [pc, #76]	; (80008dc <_sbrk+0x64>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d102      	bne.n	800089a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <_sbrk+0x64>)
 8000896:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <_sbrk+0x68>)
 8000898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <_sbrk+0x64>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4413      	add	r3, r2
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d207      	bcs.n	80008b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008a8:	f002 f920 	bl	8002aec <__errno>
 80008ac:	4602      	mov	r2, r0
 80008ae:	230c      	movs	r3, #12
 80008b0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008b6:	e009      	b.n	80008cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <_sbrk+0x64>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008be:	4b07      	ldr	r3, [pc, #28]	; (80008dc <_sbrk+0x64>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	4a05      	ldr	r2, [pc, #20]	; (80008dc <_sbrk+0x64>)
 80008c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ca:	68fb      	ldr	r3, [r7, #12]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20010000 	.word	0x20010000
 80008d8:	00000400 	.word	0x00000400
 80008dc:	2000008c 	.word	0x2000008c
 80008e0:	20000120 	.word	0x20000120

080008e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <SystemInit+0x64>)
 80008ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ee:	4a16      	ldr	r2, [pc, #88]	; (8000948 <SystemInit+0x64>)
 80008f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80008f8:	4b14      	ldr	r3, [pc, #80]	; (800094c <SystemInit+0x68>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a13      	ldr	r2, [pc, #76]	; (800094c <SystemInit+0x68>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <SystemInit+0x68>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <SystemInit+0x68>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a0f      	ldr	r2, [pc, #60]	; (800094c <SystemInit+0x68>)
 8000910:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000914:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000918:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <SystemInit+0x68>)
 800091c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000920:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000922:	4b0a      	ldr	r3, [pc, #40]	; (800094c <SystemInit+0x68>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a09      	ldr	r2, [pc, #36]	; (800094c <SystemInit+0x68>)
 8000928:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800092c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800092e:	4b07      	ldr	r3, [pc, #28]	; (800094c <SystemInit+0x68>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000934:	4b04      	ldr	r3, [pc, #16]	; (8000948 <SystemInit+0x64>)
 8000936:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800093a:	609a      	str	r2, [r3, #8]
#endif
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	e000ed00 	.word	0xe000ed00
 800094c:	40021000 	.word	0x40021000

08000950 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000950:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000988 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000954:	f7ff ffc6 	bl	80008e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000958:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800095a:	e003      	b.n	8000964 <LoopCopyDataInit>

0800095c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800095c:	4b0b      	ldr	r3, [pc, #44]	; (800098c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800095e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000960:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000962:	3104      	adds	r1, #4

08000964 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000964:	480a      	ldr	r0, [pc, #40]	; (8000990 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000968:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800096a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800096c:	d3f6      	bcc.n	800095c <CopyDataInit>
	ldr	r2, =_sbss
 800096e:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000970:	e002      	b.n	8000978 <LoopFillZerobss>

08000972 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000972:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000974:	f842 3b04 	str.w	r3, [r2], #4

08000978 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <LoopForever+0x16>)
	cmp	r2, r3
 800097a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800097c:	d3f9      	bcc.n	8000972 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800097e:	f002 f8bb 	bl	8002af8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000982:	f7ff fdf5 	bl	8000570 <main>

08000986 <LoopForever>:

LoopForever:
    b LoopForever
 8000986:	e7fe      	b.n	8000986 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000988:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800098c:	08003420 	.word	0x08003420
	ldr	r0, =_sdata
 8000990:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000994:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000998:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 800099c:	20000120 	.word	0x20000120

080009a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009a0:	e7fe      	b.n	80009a0 <ADC1_IRQHandler>

080009a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009a8:	2300      	movs	r3, #0
 80009aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ac:	2003      	movs	r0, #3
 80009ae:	f000 f941 	bl	8000c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009b2:	2000      	movs	r0, #0
 80009b4:	f000 f80e 	bl	80009d4 <HAL_InitTick>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d002      	beq.n	80009c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	71fb      	strb	r3, [r7, #7]
 80009c2:	e001      	b.n	80009c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009c4:	f7ff fec4 	bl	8000750 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009c8:	79fb      	ldrb	r3, [r7, #7]
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009dc:	2300      	movs	r3, #0
 80009de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009e0:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <HAL_InitTick+0x6c>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d023      	beq.n	8000a30 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <HAL_InitTick+0x70>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <HAL_InitTick+0x6c>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	4619      	mov	r1, r3
 80009f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 f93f 	bl	8000c82 <HAL_SYSTICK_Config>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d10f      	bne.n	8000a2a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2b0f      	cmp	r3, #15
 8000a0e:	d809      	bhi.n	8000a24 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a10:	2200      	movs	r2, #0
 8000a12:	6879      	ldr	r1, [r7, #4]
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a18:	f000 f917 	bl	8000c4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a1c:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <HAL_InitTick+0x74>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6013      	str	r3, [r2, #0]
 8000a22:	e007      	b.n	8000a34 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a24:	2301      	movs	r3, #1
 8000a26:	73fb      	strb	r3, [r7, #15]
 8000a28:	e004      	b.n	8000a34 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	73fb      	strb	r3, [r7, #15]
 8000a2e:	e001      	b.n	8000a34 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a30:	2301      	movs	r3, #1
 8000a32:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000008 	.word	0x20000008
 8000a44:	20000000 	.word	0x20000000
 8000a48:	20000004 	.word	0x20000004

08000a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_IncTick+0x20>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_IncTick+0x24>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <HAL_IncTick+0x24>)
 8000a5e:	6013      	str	r3, [r2, #0]
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	20000118 	.word	0x20000118

08000a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return uwTick;
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <HAL_GetTick+0x14>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	20000118 	.word	0x20000118

08000a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a94:	f7ff ffee 	bl	8000a74 <HAL_GetTick>
 8000a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000aa4:	d005      	beq.n	8000ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_Delay+0x40>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	4413      	add	r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ab2:	bf00      	nop
 8000ab4:	f7ff ffde 	bl	8000a74 <HAL_GetTick>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d8f7      	bhi.n	8000ab4 <HAL_Delay+0x28>
  {
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000008 	.word	0x20000008

08000ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aec:	4013      	ands	r3, r2
 8000aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b02:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	60d3      	str	r3, [r2, #12]
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <__NVIC_GetPriorityGrouping+0x18>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	0a1b      	lsrs	r3, r3, #8
 8000b22:	f003 0307 	and.w	r3, r3, #7
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	db0a      	blt.n	8000b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	490c      	ldr	r1, [pc, #48]	; (8000b80 <__NVIC_SetPriority+0x4c>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	0112      	lsls	r2, r2, #4
 8000b54:	b2d2      	uxtb	r2, r2
 8000b56:	440b      	add	r3, r1
 8000b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b5c:	e00a      	b.n	8000b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4908      	ldr	r1, [pc, #32]	; (8000b84 <__NVIC_SetPriority+0x50>)
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	3b04      	subs	r3, #4
 8000b6c:	0112      	lsls	r2, r2, #4
 8000b6e:	b2d2      	uxtb	r2, r2
 8000b70:	440b      	add	r3, r1
 8000b72:	761a      	strb	r2, [r3, #24]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000e100 	.word	0xe000e100
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	; 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	bf28      	it	cs
 8000ba6:	2304      	movcs	r3, #4
 8000ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3304      	adds	r3, #4
 8000bae:	2b06      	cmp	r3, #6
 8000bb0:	d902      	bls.n	8000bb8 <NVIC_EncodePriority+0x30>
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3b03      	subs	r3, #3
 8000bb6:	e000      	b.n	8000bba <NVIC_EncodePriority+0x32>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43da      	mvns	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	401a      	ands	r2, r3
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	43d9      	mvns	r1, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	4313      	orrs	r3, r2
         );
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3724      	adds	r7, #36	; 0x24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c00:	d301      	bcc.n	8000c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c02:	2301      	movs	r3, #1
 8000c04:	e00f      	b.n	8000c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <SysTick_Config+0x40>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c0e:	210f      	movs	r1, #15
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c14:	f7ff ff8e 	bl	8000b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <SysTick_Config+0x40>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1e:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <SysTick_Config+0x40>)
 8000c20:	2207      	movs	r2, #7
 8000c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	e000e010 	.word	0xe000e010

08000c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ff47 	bl	8000ad0 <__NVIC_SetPriorityGrouping>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b086      	sub	sp, #24
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
 8000c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c5c:	f7ff ff5c 	bl	8000b18 <__NVIC_GetPriorityGrouping>
 8000c60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	68b9      	ldr	r1, [r7, #8]
 8000c66:	6978      	ldr	r0, [r7, #20]
 8000c68:	f7ff ff8e 	bl	8000b88 <NVIC_EncodePriority>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff5d 	bl	8000b34 <__NVIC_SetPriority>
}
 8000c7a:	bf00      	nop
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff ffb0 	bl	8000bf0 <SysTick_Config>
 8000c90:	4603      	mov	r3, r0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b087      	sub	sp, #28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000caa:	e148      	b.n	8000f3e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f000 813a 	beq.w	8000f38 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d00b      	beq.n	8000ce4 <HAL_GPIO_Init+0x48>
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d007      	beq.n	8000ce4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cd8:	2b11      	cmp	r3, #17
 8000cda:	d003      	beq.n	8000ce4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	2b12      	cmp	r3, #18
 8000ce2:	d130      	bne.n	8000d46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	2203      	movs	r2, #3
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	68da      	ldr	r2, [r3, #12]
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	4013      	ands	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	091b      	lsrs	r3, r3, #4
 8000d30:	f003 0201 	and.w	r2, r3, #1
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	2203      	movs	r2, #3
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	689a      	ldr	r2, [r3, #8]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d003      	beq.n	8000d86 <HAL_GPIO_Init+0xea>
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	2b12      	cmp	r3, #18
 8000d84:	d123      	bne.n	8000dce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	08da      	lsrs	r2, r3, #3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3208      	adds	r2, #8
 8000d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	220f      	movs	r2, #15
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	691a      	ldr	r2, [r3, #16]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	f003 0307 	and.w	r3, r3, #7
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	08da      	lsrs	r2, r3, #3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3208      	adds	r2, #8
 8000dc8:	6939      	ldr	r1, [r7, #16]
 8000dca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	2203      	movs	r2, #3
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 0203 	and.w	r2, r3, #3
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f000 8094 	beq.w	8000f38 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e10:	4b52      	ldr	r3, [pc, #328]	; (8000f5c <HAL_GPIO_Init+0x2c0>)
 8000e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e14:	4a51      	ldr	r2, [pc, #324]	; (8000f5c <HAL_GPIO_Init+0x2c0>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	6613      	str	r3, [r2, #96]	; 0x60
 8000e1c:	4b4f      	ldr	r3, [pc, #316]	; (8000f5c <HAL_GPIO_Init+0x2c0>)
 8000e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e28:	4a4d      	ldr	r2, [pc, #308]	; (8000f60 <HAL_GPIO_Init+0x2c4>)
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	089b      	lsrs	r3, r3, #2
 8000e2e:	3302      	adds	r3, #2
 8000e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	f003 0303 	and.w	r3, r3, #3
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	220f      	movs	r2, #15
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e52:	d00d      	beq.n	8000e70 <HAL_GPIO_Init+0x1d4>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a43      	ldr	r2, [pc, #268]	; (8000f64 <HAL_GPIO_Init+0x2c8>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d007      	beq.n	8000e6c <HAL_GPIO_Init+0x1d0>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a42      	ldr	r2, [pc, #264]	; (8000f68 <HAL_GPIO_Init+0x2cc>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d101      	bne.n	8000e68 <HAL_GPIO_Init+0x1cc>
 8000e64:	2302      	movs	r3, #2
 8000e66:	e004      	b.n	8000e72 <HAL_GPIO_Init+0x1d6>
 8000e68:	2307      	movs	r3, #7
 8000e6a:	e002      	b.n	8000e72 <HAL_GPIO_Init+0x1d6>
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e000      	b.n	8000e72 <HAL_GPIO_Init+0x1d6>
 8000e70:	2300      	movs	r3, #0
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	f002 0203 	and.w	r2, r2, #3
 8000e78:	0092      	lsls	r2, r2, #2
 8000e7a:	4093      	lsls	r3, r2
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e82:	4937      	ldr	r1, [pc, #220]	; (8000f60 <HAL_GPIO_Init+0x2c4>)
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	089b      	lsrs	r3, r3, #2
 8000e88:	3302      	adds	r3, #2
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e90:	4b36      	ldr	r3, [pc, #216]	; (8000f6c <HAL_GPIO_Init+0x2d0>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d003      	beq.n	8000eb4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000eb4:	4a2d      	ldr	r2, [pc, #180]	; (8000f6c <HAL_GPIO_Init+0x2d0>)
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000eba:	4b2c      	ldr	r3, [pc, #176]	; (8000f6c <HAL_GPIO_Init+0x2d0>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ede:	4a23      	ldr	r2, [pc, #140]	; (8000f6c <HAL_GPIO_Init+0x2d0>)
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ee4:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <HAL_GPIO_Init+0x2d0>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f08:	4a18      	ldr	r2, [pc, #96]	; (8000f6c <HAL_GPIO_Init+0x2d0>)
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f0e:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <HAL_GPIO_Init+0x2d0>)
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f32:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <HAL_GPIO_Init+0x2d0>)
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	fa22 f303 	lsr.w	r3, r2, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f47f aeaf 	bne.w	8000cac <HAL_GPIO_Init+0x10>
  }
}
 8000f4e:	bf00      	nop
 8000f50:	371c      	adds	r7, #28
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40010000 	.word	0x40010000
 8000f64:	48000400 	.word	0x48000400
 8000f68:	48000800 	.word	0x48000800
 8000f6c:	40010400 	.word	0x40010400

08000f70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f74:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40007000 	.word	0x40007000

08000f8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f9a:	d130      	bne.n	8000ffe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f9c:	4b23      	ldr	r3, [pc, #140]	; (800102c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fa8:	d038      	beq.n	800101c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000faa:	4b20      	ldr	r3, [pc, #128]	; (800102c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fb2:	4a1e      	ldr	r2, [pc, #120]	; (800102c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fb8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000fba:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2232      	movs	r2, #50	; 0x32
 8000fc0:	fb02 f303 	mul.w	r3, r2, r3
 8000fc4:	4a1b      	ldr	r2, [pc, #108]	; (8001034 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fca:	0c9b      	lsrs	r3, r3, #18
 8000fcc:	3301      	adds	r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fd0:	e002      	b.n	8000fd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fe4:	d102      	bne.n	8000fec <HAL_PWREx_ControlVoltageScaling+0x60>
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1f2      	bne.n	8000fd2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ff8:	d110      	bne.n	800101c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e00f      	b.n	800101e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800100a:	d007      	beq.n	800101c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800100c:	4b07      	ldr	r3, [pc, #28]	; (800102c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001014:	4a05      	ldr	r2, [pc, #20]	; (800102c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001016:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800101a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40007000 	.word	0x40007000
 8001030:	20000000 	.word	0x20000000
 8001034:	431bde83 	.word	0x431bde83

08001038 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d102      	bne.n	800104c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	f000 bc11 	b.w	800186e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800104c:	4ba0      	ldr	r3, [pc, #640]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f003 030c 	and.w	r3, r3, #12
 8001054:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001056:	4b9e      	ldr	r3, [pc, #632]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0310 	and.w	r3, r3, #16
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 80e4 	beq.w	8001236 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d007      	beq.n	8001084 <HAL_RCC_OscConfig+0x4c>
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	2b0c      	cmp	r3, #12
 8001078:	f040 808b 	bne.w	8001192 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	2b01      	cmp	r3, #1
 8001080:	f040 8087 	bne.w	8001192 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001084:	4b92      	ldr	r3, [pc, #584]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d005      	beq.n	800109c <HAL_RCC_OscConfig+0x64>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d101      	bne.n	800109c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e3e8      	b.n	800186e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a1a      	ldr	r2, [r3, #32]
 80010a0:	4b8b      	ldr	r3, [pc, #556]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0308 	and.w	r3, r3, #8
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d004      	beq.n	80010b6 <HAL_RCC_OscConfig+0x7e>
 80010ac:	4b88      	ldr	r3, [pc, #544]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010b4:	e005      	b.n	80010c2 <HAL_RCC_OscConfig+0x8a>
 80010b6:	4b86      	ldr	r3, [pc, #536]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 80010b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010bc:	091b      	lsrs	r3, r3, #4
 80010be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d223      	bcs.n	800110e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a1b      	ldr	r3, [r3, #32]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 fd78 	bl	8001bc0 <RCC_SetFlashLatencyFromMSIRange>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e3c9      	b.n	800186e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010da:	4b7d      	ldr	r3, [pc, #500]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a7c      	ldr	r2, [pc, #496]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 80010e0:	f043 0308 	orr.w	r3, r3, #8
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	4b7a      	ldr	r3, [pc, #488]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a1b      	ldr	r3, [r3, #32]
 80010f2:	4977      	ldr	r1, [pc, #476]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 80010f4:	4313      	orrs	r3, r2
 80010f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010f8:	4b75      	ldr	r3, [pc, #468]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69db      	ldr	r3, [r3, #28]
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	4972      	ldr	r1, [pc, #456]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 8001108:	4313      	orrs	r3, r2
 800110a:	604b      	str	r3, [r1, #4]
 800110c:	e025      	b.n	800115a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800110e:	4b70      	ldr	r3, [pc, #448]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a6f      	ldr	r2, [pc, #444]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 8001114:	f043 0308 	orr.w	r3, r3, #8
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	4b6d      	ldr	r3, [pc, #436]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a1b      	ldr	r3, [r3, #32]
 8001126:	496a      	ldr	r1, [pc, #424]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 8001128:	4313      	orrs	r3, r2
 800112a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800112c:	4b68      	ldr	r3, [pc, #416]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	69db      	ldr	r3, [r3, #28]
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	4965      	ldr	r1, [pc, #404]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 800113c:	4313      	orrs	r3, r2
 800113e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d109      	bne.n	800115a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a1b      	ldr	r3, [r3, #32]
 800114a:	4618      	mov	r0, r3
 800114c:	f000 fd38 	bl	8001bc0 <RCC_SetFlashLatencyFromMSIRange>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e389      	b.n	800186e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800115a:	f000 fc6f 	bl	8001a3c <HAL_RCC_GetSysClockFreq>
 800115e:	4601      	mov	r1, r0
 8001160:	4b5b      	ldr	r3, [pc, #364]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	091b      	lsrs	r3, r3, #4
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	4a5a      	ldr	r2, [pc, #360]	; (80012d4 <HAL_RCC_OscConfig+0x29c>)
 800116c:	5cd3      	ldrb	r3, [r2, r3]
 800116e:	f003 031f 	and.w	r3, r3, #31
 8001172:	fa21 f303 	lsr.w	r3, r1, r3
 8001176:	4a58      	ldr	r2, [pc, #352]	; (80012d8 <HAL_RCC_OscConfig+0x2a0>)
 8001178:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800117a:	4b58      	ldr	r3, [pc, #352]	; (80012dc <HAL_RCC_OscConfig+0x2a4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fc28 	bl	80009d4 <HAL_InitTick>
 8001184:	4603      	mov	r3, r0
 8001186:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d052      	beq.n	8001234 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	e36d      	b.n	800186e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d032      	beq.n	8001200 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800119a:	4b4d      	ldr	r3, [pc, #308]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a4c      	ldr	r2, [pc, #304]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011a6:	f7ff fc65 	bl	8000a74 <HAL_GetTick>
 80011aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011ac:	e008      	b.n	80011c0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011ae:	f7ff fc61 	bl	8000a74 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e356      	b.n	800186e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011c0:	4b43      	ldr	r3, [pc, #268]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0f0      	beq.n	80011ae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011cc:	4b40      	ldr	r3, [pc, #256]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a3f      	ldr	r2, [pc, #252]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 80011d2:	f043 0308 	orr.w	r3, r3, #8
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	4b3d      	ldr	r3, [pc, #244]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	493a      	ldr	r1, [pc, #232]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 80011e6:	4313      	orrs	r3, r2
 80011e8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011ea:	4b39      	ldr	r3, [pc, #228]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	4935      	ldr	r1, [pc, #212]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	604b      	str	r3, [r1, #4]
 80011fe:	e01a      	b.n	8001236 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001200:	4b33      	ldr	r3, [pc, #204]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a32      	ldr	r2, [pc, #200]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 8001206:	f023 0301 	bic.w	r3, r3, #1
 800120a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800120c:	f7ff fc32 	bl	8000a74 <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001214:	f7ff fc2e 	bl	8000a74 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e323      	b.n	800186e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001226:	4b2a      	ldr	r3, [pc, #168]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f0      	bne.n	8001214 <HAL_RCC_OscConfig+0x1dc>
 8001232:	e000      	b.n	8001236 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001234:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	2b00      	cmp	r3, #0
 8001240:	d073      	beq.n	800132a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	2b08      	cmp	r3, #8
 8001246:	d005      	beq.n	8001254 <HAL_RCC_OscConfig+0x21c>
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	2b0c      	cmp	r3, #12
 800124c:	d10e      	bne.n	800126c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	2b03      	cmp	r3, #3
 8001252:	d10b      	bne.n	800126c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001254:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d063      	beq.n	8001328 <HAL_RCC_OscConfig+0x2f0>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d15f      	bne.n	8001328 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e300      	b.n	800186e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001274:	d106      	bne.n	8001284 <HAL_RCC_OscConfig+0x24c>
 8001276:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a15      	ldr	r2, [pc, #84]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 800127c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	e01d      	b.n	80012c0 <HAL_RCC_OscConfig+0x288>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800128c:	d10c      	bne.n	80012a8 <HAL_RCC_OscConfig+0x270>
 800128e:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a0f      	ldr	r2, [pc, #60]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 8001294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a0c      	ldr	r2, [pc, #48]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 80012a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e00b      	b.n	80012c0 <HAL_RCC_OscConfig+0x288>
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a08      	ldr	r2, [pc, #32]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 80012ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a05      	ldr	r2, [pc, #20]	; (80012d0 <HAL_RCC_OscConfig+0x298>)
 80012ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d01b      	beq.n	8001300 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c8:	f7ff fbd4 	bl	8000a74 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012ce:	e010      	b.n	80012f2 <HAL_RCC_OscConfig+0x2ba>
 80012d0:	40021000 	.word	0x40021000
 80012d4:	08003394 	.word	0x08003394
 80012d8:	20000000 	.word	0x20000000
 80012dc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e0:	f7ff fbc8 	bl	8000a74 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b64      	cmp	r3, #100	; 0x64
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e2bd      	b.n	800186e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012f2:	4baf      	ldr	r3, [pc, #700]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0f0      	beq.n	80012e0 <HAL_RCC_OscConfig+0x2a8>
 80012fe:	e014      	b.n	800132a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001300:	f7ff fbb8 	bl	8000a74 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001308:	f7ff fbb4 	bl	8000a74 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b64      	cmp	r3, #100	; 0x64
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e2a9      	b.n	800186e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800131a:	4ba5      	ldr	r3, [pc, #660]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f0      	bne.n	8001308 <HAL_RCC_OscConfig+0x2d0>
 8001326:	e000      	b.n	800132a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d060      	beq.n	80013f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	2b04      	cmp	r3, #4
 800133a:	d005      	beq.n	8001348 <HAL_RCC_OscConfig+0x310>
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	2b0c      	cmp	r3, #12
 8001340:	d119      	bne.n	8001376 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d116      	bne.n	8001376 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001348:	4b99      	ldr	r3, [pc, #612]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001350:	2b00      	cmp	r3, #0
 8001352:	d005      	beq.n	8001360 <HAL_RCC_OscConfig+0x328>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d101      	bne.n	8001360 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e286      	b.n	800186e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001360:	4b93      	ldr	r3, [pc, #588]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	061b      	lsls	r3, r3, #24
 800136e:	4990      	ldr	r1, [pc, #576]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001370:	4313      	orrs	r3, r2
 8001372:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001374:	e040      	b.n	80013f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d023      	beq.n	80013c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800137e:	4b8c      	ldr	r3, [pc, #560]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a8b      	ldr	r2, [pc, #556]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001388:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138a:	f7ff fb73 	bl	8000a74 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001392:	f7ff fb6f 	bl	8000a74 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e264      	b.n	800186e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013a4:	4b82      	ldr	r3, [pc, #520]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0f0      	beq.n	8001392 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b0:	4b7f      	ldr	r3, [pc, #508]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	061b      	lsls	r3, r3, #24
 80013be:	497c      	ldr	r1, [pc, #496]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	604b      	str	r3, [r1, #4]
 80013c4:	e018      	b.n	80013f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c6:	4b7a      	ldr	r3, [pc, #488]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a79      	ldr	r2, [pc, #484]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 80013cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d2:	f7ff fb4f 	bl	8000a74 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013da:	f7ff fb4b 	bl	8000a74 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e240      	b.n	800186e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013ec:	4b70      	ldr	r3, [pc, #448]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1f0      	bne.n	80013da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	2b00      	cmp	r3, #0
 8001402:	d03c      	beq.n	800147e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d01c      	beq.n	8001446 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800140c:	4b68      	ldr	r3, [pc, #416]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 800140e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001412:	4a67      	ldr	r2, [pc, #412]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800141c:	f7ff fb2a 	bl	8000a74 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001424:	f7ff fb26 	bl	8000a74 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e21b      	b.n	800186e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001436:	4b5e      	ldr	r3, [pc, #376]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001438:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0ef      	beq.n	8001424 <HAL_RCC_OscConfig+0x3ec>
 8001444:	e01b      	b.n	800147e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001446:	4b5a      	ldr	r3, [pc, #360]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800144c:	4a58      	ldr	r2, [pc, #352]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 800144e:	f023 0301 	bic.w	r3, r3, #1
 8001452:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001456:	f7ff fb0d 	bl	8000a74 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800145e:	f7ff fb09 	bl	8000a74 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e1fe      	b.n	800186e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001470:	4b4f      	ldr	r3, [pc, #316]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001472:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1ef      	bne.n	800145e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0304 	and.w	r3, r3, #4
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 80a6 	beq.w	80015d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800148c:	2300      	movs	r3, #0
 800148e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001490:	4b47      	ldr	r3, [pc, #284]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d10d      	bne.n	80014b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800149c:	4b44      	ldr	r3, [pc, #272]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 800149e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a0:	4a43      	ldr	r2, [pc, #268]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 80014a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a6:	6593      	str	r3, [r2, #88]	; 0x58
 80014a8:	4b41      	ldr	r3, [pc, #260]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 80014aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014b4:	2301      	movs	r3, #1
 80014b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014b8:	4b3e      	ldr	r3, [pc, #248]	; (80015b4 <HAL_RCC_OscConfig+0x57c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d118      	bne.n	80014f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014c4:	4b3b      	ldr	r3, [pc, #236]	; (80015b4 <HAL_RCC_OscConfig+0x57c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a3a      	ldr	r2, [pc, #232]	; (80015b4 <HAL_RCC_OscConfig+0x57c>)
 80014ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014d0:	f7ff fad0 	bl	8000a74 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014d8:	f7ff facc 	bl	8000a74 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e1c1      	b.n	800186e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ea:	4b32      	ldr	r3, [pc, #200]	; (80015b4 <HAL_RCC_OscConfig+0x57c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f0      	beq.n	80014d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d108      	bne.n	8001510 <HAL_RCC_OscConfig+0x4d8>
 80014fe:	4b2c      	ldr	r3, [pc, #176]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001504:	4a2a      	ldr	r2, [pc, #168]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800150e:	e024      	b.n	800155a <HAL_RCC_OscConfig+0x522>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	2b05      	cmp	r3, #5
 8001516:	d110      	bne.n	800153a <HAL_RCC_OscConfig+0x502>
 8001518:	4b25      	ldr	r3, [pc, #148]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 800151a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800151e:	4a24      	ldr	r2, [pc, #144]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001520:	f043 0304 	orr.w	r3, r3, #4
 8001524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001528:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 800152a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800152e:	4a20      	ldr	r2, [pc, #128]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001538:	e00f      	b.n	800155a <HAL_RCC_OscConfig+0x522>
 800153a:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 800153c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001540:	4a1b      	ldr	r2, [pc, #108]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001542:	f023 0301 	bic.w	r3, r3, #1
 8001546:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800154a:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 800154c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001550:	4a17      	ldr	r2, [pc, #92]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001552:	f023 0304 	bic.w	r3, r3, #4
 8001556:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d016      	beq.n	8001590 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001562:	f7ff fa87 	bl	8000a74 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001568:	e00a      	b.n	8001580 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800156a:	f7ff fa83 	bl	8000a74 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	f241 3288 	movw	r2, #5000	; 0x1388
 8001578:	4293      	cmp	r3, r2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e176      	b.n	800186e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0ed      	beq.n	800156a <HAL_RCC_OscConfig+0x532>
 800158e:	e01a      	b.n	80015c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001590:	f7ff fa70 	bl	8000a74 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001596:	e00f      	b.n	80015b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001598:	f7ff fa6c 	bl	8000a74 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d906      	bls.n	80015b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e15f      	b.n	800186e <HAL_RCC_OscConfig+0x836>
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015b8:	4baa      	ldr	r3, [pc, #680]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 80015ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1e8      	bne.n	8001598 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015c6:	7ffb      	ldrb	r3, [r7, #31]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d105      	bne.n	80015d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015cc:	4ba5      	ldr	r3, [pc, #660]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 80015ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d0:	4aa4      	ldr	r2, [pc, #656]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 80015d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0320 	and.w	r3, r3, #32
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d03c      	beq.n	800165e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d01c      	beq.n	8001626 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015ec:	4b9d      	ldr	r3, [pc, #628]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 80015ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015f2:	4a9c      	ldr	r2, [pc, #624]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fc:	f7ff fa3a 	bl	8000a74 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001604:	f7ff fa36 	bl	8000a74 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e12b      	b.n	800186e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001616:	4b93      	ldr	r3, [pc, #588]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 8001618:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0ef      	beq.n	8001604 <HAL_RCC_OscConfig+0x5cc>
 8001624:	e01b      	b.n	800165e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001626:	4b8f      	ldr	r3, [pc, #572]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 8001628:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800162c:	4a8d      	ldr	r2, [pc, #564]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 800162e:	f023 0301 	bic.w	r3, r3, #1
 8001632:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001636:	f7ff fa1d 	bl	8000a74 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800163e:	f7ff fa19 	bl	8000a74 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e10e      	b.n	800186e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001650:	4b84      	ldr	r3, [pc, #528]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 8001652:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1ef      	bne.n	800163e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 8102 	beq.w	800186c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	2b02      	cmp	r3, #2
 800166e:	f040 80c5 	bne.w	80017fc <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001672:	4b7c      	ldr	r3, [pc, #496]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f003 0203 	and.w	r2, r3, #3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001682:	429a      	cmp	r2, r3
 8001684:	d12c      	bne.n	80016e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001690:	3b01      	subs	r3, #1
 8001692:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001694:	429a      	cmp	r2, r3
 8001696:	d123      	bne.n	80016e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d11b      	bne.n	80016e0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d113      	bne.n	80016e0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c2:	085b      	lsrs	r3, r3, #1
 80016c4:	3b01      	subs	r3, #1
 80016c6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d109      	bne.n	80016e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	085b      	lsrs	r3, r3, #1
 80016d8:	3b01      	subs	r3, #1
 80016da:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016dc:	429a      	cmp	r2, r3
 80016de:	d067      	beq.n	80017b0 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	2b0c      	cmp	r3, #12
 80016e4:	d062      	beq.n	80017ac <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016e6:	4b5f      	ldr	r3, [pc, #380]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e0bb      	b.n	800186e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016f6:	4b5b      	ldr	r3, [pc, #364]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a5a      	ldr	r2, [pc, #360]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 80016fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001700:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001702:	f7ff f9b7 	bl	8000a74 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170a:	f7ff f9b3 	bl	8000a74 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e0a8      	b.n	800186e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800171c:	4b51      	ldr	r3, [pc, #324]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1f0      	bne.n	800170a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001728:	4b4e      	ldr	r3, [pc, #312]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	4b4e      	ldr	r3, [pc, #312]	; (8001868 <HAL_RCC_OscConfig+0x830>)
 800172e:	4013      	ands	r3, r2
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001738:	3a01      	subs	r2, #1
 800173a:	0112      	lsls	r2, r2, #4
 800173c:	4311      	orrs	r1, r2
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001742:	0212      	lsls	r2, r2, #8
 8001744:	4311      	orrs	r1, r2
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800174a:	0852      	lsrs	r2, r2, #1
 800174c:	3a01      	subs	r2, #1
 800174e:	0552      	lsls	r2, r2, #21
 8001750:	4311      	orrs	r1, r2
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001756:	0852      	lsrs	r2, r2, #1
 8001758:	3a01      	subs	r2, #1
 800175a:	0652      	lsls	r2, r2, #25
 800175c:	4311      	orrs	r1, r2
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001762:	06d2      	lsls	r2, r2, #27
 8001764:	430a      	orrs	r2, r1
 8001766:	493f      	ldr	r1, [pc, #252]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 8001768:	4313      	orrs	r3, r2
 800176a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800176c:	4b3d      	ldr	r3, [pc, #244]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a3c      	ldr	r2, [pc, #240]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 8001772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001776:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001778:	4b3a      	ldr	r3, [pc, #232]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	4a39      	ldr	r2, [pc, #228]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 800177e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001782:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001784:	f7ff f976 	bl	8000a74 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178c:	f7ff f972 	bl	8000a74 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e067      	b.n	800186e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800179e:	4b31      	ldr	r3, [pc, #196]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017aa:	e05f      	b.n	800186c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e05e      	b.n	800186e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017b0:	4b2c      	ldr	r3, [pc, #176]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d157      	bne.n	800186c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80017bc:	4b29      	ldr	r3, [pc, #164]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a28      	ldr	r2, [pc, #160]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 80017c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017c8:	4b26      	ldr	r3, [pc, #152]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	4a25      	ldr	r2, [pc, #148]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 80017ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017d4:	f7ff f94e 	bl	8000a74 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017dc:	f7ff f94a 	bl	8000a74 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e03f      	b.n	800186e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ee:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0x7a4>
 80017fa:	e037      	b.n	800186c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	2b0c      	cmp	r3, #12
 8001800:	d02d      	beq.n	800185e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001802:	4b18      	ldr	r3, [pc, #96]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a17      	ldr	r2, [pc, #92]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 8001808:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800180c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d105      	bne.n	8001826 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	4a11      	ldr	r2, [pc, #68]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 8001820:	f023 0303 	bic.w	r3, r3, #3
 8001824:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001826:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	4a0e      	ldr	r2, [pc, #56]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 800182c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001830:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001834:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001836:	f7ff f91d 	bl	8000a74 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183e:	f7ff f919 	bl	8000a74 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e00e      	b.n	800186e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <HAL_RCC_OscConfig+0x82c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f0      	bne.n	800183e <HAL_RCC_OscConfig+0x806>
 800185c:	e006      	b.n	800186c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e005      	b.n	800186e <HAL_RCC_OscConfig+0x836>
 8001862:	bf00      	nop
 8001864:	40021000 	.word	0x40021000
 8001868:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3720      	adds	r7, #32
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop

08001878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e0c8      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800188c:	4b66      	ldr	r3, [pc, #408]	; (8001a28 <HAL_RCC_ClockConfig+0x1b0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d910      	bls.n	80018bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189a:	4b63      	ldr	r3, [pc, #396]	; (8001a28 <HAL_RCC_ClockConfig+0x1b0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 0207 	bic.w	r2, r3, #7
 80018a2:	4961      	ldr	r1, [pc, #388]	; (8001a28 <HAL_RCC_ClockConfig+0x1b0>)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018aa:	4b5f      	ldr	r3, [pc, #380]	; (8001a28 <HAL_RCC_ClockConfig+0x1b0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d001      	beq.n	80018bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e0b0      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d04c      	beq.n	8001962 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d107      	bne.n	80018e0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d0:	4b56      	ldr	r3, [pc, #344]	; (8001a2c <HAL_RCC_ClockConfig+0x1b4>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d121      	bne.n	8001920 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e09e      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d107      	bne.n	80018f8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018e8:	4b50      	ldr	r3, [pc, #320]	; (8001a2c <HAL_RCC_ClockConfig+0x1b4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d115      	bne.n	8001920 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e092      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d107      	bne.n	8001910 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001900:	4b4a      	ldr	r3, [pc, #296]	; (8001a2c <HAL_RCC_ClockConfig+0x1b4>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d109      	bne.n	8001920 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e086      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001910:	4b46      	ldr	r3, [pc, #280]	; (8001a2c <HAL_RCC_ClockConfig+0x1b4>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e07e      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001920:	4b42      	ldr	r3, [pc, #264]	; (8001a2c <HAL_RCC_ClockConfig+0x1b4>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f023 0203 	bic.w	r2, r3, #3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	493f      	ldr	r1, [pc, #252]	; (8001a2c <HAL_RCC_ClockConfig+0x1b4>)
 800192e:	4313      	orrs	r3, r2
 8001930:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001932:	f7ff f89f 	bl	8000a74 <HAL_GetTick>
 8001936:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001938:	e00a      	b.n	8001950 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800193a:	f7ff f89b 	bl	8000a74 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	f241 3288 	movw	r2, #5000	; 0x1388
 8001948:	4293      	cmp	r3, r2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e066      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001950:	4b36      	ldr	r3, [pc, #216]	; (8001a2c <HAL_RCC_ClockConfig+0x1b4>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 020c 	and.w	r2, r3, #12
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	429a      	cmp	r2, r3
 8001960:	d1eb      	bne.n	800193a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d008      	beq.n	8001980 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800196e:	4b2f      	ldr	r3, [pc, #188]	; (8001a2c <HAL_RCC_ClockConfig+0x1b4>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	492c      	ldr	r1, [pc, #176]	; (8001a2c <HAL_RCC_ClockConfig+0x1b4>)
 800197c:	4313      	orrs	r3, r2
 800197e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001980:	4b29      	ldr	r3, [pc, #164]	; (8001a28 <HAL_RCC_ClockConfig+0x1b0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d210      	bcs.n	80019b0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198e:	4b26      	ldr	r3, [pc, #152]	; (8001a28 <HAL_RCC_ClockConfig+0x1b0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f023 0207 	bic.w	r2, r3, #7
 8001996:	4924      	ldr	r1, [pc, #144]	; (8001a28 <HAL_RCC_ClockConfig+0x1b0>)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	4313      	orrs	r3, r2
 800199c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800199e:	4b22      	ldr	r3, [pc, #136]	; (8001a28 <HAL_RCC_ClockConfig+0x1b0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d001      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e036      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d008      	beq.n	80019ce <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019bc:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <HAL_RCC_ClockConfig+0x1b4>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	4918      	ldr	r1, [pc, #96]	; (8001a2c <HAL_RCC_ClockConfig+0x1b4>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0308 	and.w	r3, r3, #8
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d009      	beq.n	80019ee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019da:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <HAL_RCC_ClockConfig+0x1b4>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	4910      	ldr	r1, [pc, #64]	; (8001a2c <HAL_RCC_ClockConfig+0x1b4>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019ee:	f000 f825 	bl	8001a3c <HAL_RCC_GetSysClockFreq>
 80019f2:	4601      	mov	r1, r0
 80019f4:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <HAL_RCC_ClockConfig+0x1b4>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	091b      	lsrs	r3, r3, #4
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	4a0c      	ldr	r2, [pc, #48]	; (8001a30 <HAL_RCC_ClockConfig+0x1b8>)
 8001a00:	5cd3      	ldrb	r3, [r2, r3]
 8001a02:	f003 031f 	and.w	r3, r3, #31
 8001a06:	fa21 f303 	lsr.w	r3, r1, r3
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <HAL_RCC_ClockConfig+0x1c0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe ffde 	bl	80009d4 <HAL_InitTick>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a1c:	7afb      	ldrb	r3, [r7, #11]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40022000 	.word	0x40022000
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	08003394 	.word	0x08003394
 8001a34:	20000000 	.word	0x20000000
 8001a38:	20000004 	.word	0x20000004

08001a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b089      	sub	sp, #36	; 0x24
 8001a40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
 8001a46:	2300      	movs	r3, #0
 8001a48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a4a:	4b3d      	ldr	r3, [pc, #244]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x104>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
 8001a52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a54:	4b3a      	ldr	r3, [pc, #232]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x104>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_RCC_GetSysClockFreq+0x34>
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	2b0c      	cmp	r3, #12
 8001a68:	d121      	bne.n	8001aae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d11e      	bne.n	8001aae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a70:	4b33      	ldr	r3, [pc, #204]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x104>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d107      	bne.n	8001a8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a7c:	4b30      	ldr	r3, [pc, #192]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x104>)
 8001a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a82:	0a1b      	lsrs	r3, r3, #8
 8001a84:	f003 030f 	and.w	r3, r3, #15
 8001a88:	61fb      	str	r3, [r7, #28]
 8001a8a:	e005      	b.n	8001a98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a8c:	4b2c      	ldr	r3, [pc, #176]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x104>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	091b      	lsrs	r3, r3, #4
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a98:	4a2a      	ldr	r2, [pc, #168]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d10d      	bne.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001aac:	e00a      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d102      	bne.n	8001aba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ab4:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ab6:	61bb      	str	r3, [r7, #24]
 8001ab8:	e004      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d101      	bne.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ac0:	4b22      	ldr	r3, [pc, #136]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ac2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	2b0c      	cmp	r3, #12
 8001ac8:	d133      	bne.n	8001b32 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001aca:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x104>)
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d002      	beq.n	8001ae0 <HAL_RCC_GetSysClockFreq+0xa4>
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d003      	beq.n	8001ae6 <HAL_RCC_GetSysClockFreq+0xaa>
 8001ade:	e005      	b.n	8001aec <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ae0:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ae2:	617b      	str	r3, [r7, #20]
      break;
 8001ae4:	e005      	b.n	8001af2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ae6:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ae8:	617b      	str	r3, [r7, #20]
      break;
 8001aea:	e002      	b.n	8001af2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	617b      	str	r3, [r7, #20]
      break;
 8001af0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x104>)
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	091b      	lsrs	r3, r3, #4
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	3301      	adds	r3, #1
 8001afe:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	fb02 f203 	mul.w	r2, r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b16:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	0e5b      	lsrs	r3, r3, #25
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	3301      	adds	r3, #1
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b30:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b32:	69bb      	ldr	r3, [r7, #24]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3724      	adds	r7, #36	; 0x24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	40021000 	.word	0x40021000
 8001b44:	080033ac 	.word	0x080033ac
 8001b48:	00f42400 	.word	0x00f42400
 8001b4c:	007a1200 	.word	0x007a1200

08001b50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b56:	681b      	ldr	r3, [r3, #0]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000000 	.word	0x20000000

08001b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b6c:	f7ff fff0 	bl	8001b50 <HAL_RCC_GetHCLKFreq>
 8001b70:	4601      	mov	r1, r0
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	0a1b      	lsrs	r3, r3, #8
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b7e:	5cd3      	ldrb	r3, [r2, r3]
 8001b80:	f003 031f 	and.w	r3, r3, #31
 8001b84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	080033a4 	.word	0x080033a4

08001b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b98:	f7ff ffda 	bl	8001b50 <HAL_RCC_GetHCLKFreq>
 8001b9c:	4601      	mov	r1, r0
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	0adb      	lsrs	r3, r3, #11
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	4a04      	ldr	r2, [pc, #16]	; (8001bbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001baa:	5cd3      	ldrb	r3, [r2, r3]
 8001bac:	f003 031f 	and.w	r3, r3, #31
 8001bb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	080033a4 	.word	0x080033a4

08001bc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001bc8:	2300      	movs	r3, #0
 8001bca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001bcc:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001bd8:	f7ff f9ca 	bl	8000f70 <HAL_PWREx_GetVoltageRange>
 8001bdc:	6178      	str	r0, [r7, #20]
 8001bde:	e014      	b.n	8001c0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001be0:	4b25      	ldr	r3, [pc, #148]	; (8001c78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be4:	4a24      	ldr	r2, [pc, #144]	; (8001c78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bea:	6593      	str	r3, [r2, #88]	; 0x58
 8001bec:	4b22      	ldr	r3, [pc, #136]	; (8001c78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001bf8:	f7ff f9ba 	bl	8000f70 <HAL_PWREx_GetVoltageRange>
 8001bfc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c02:	4a1d      	ldr	r2, [pc, #116]	; (8001c78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c10:	d10b      	bne.n	8001c2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b80      	cmp	r3, #128	; 0x80
 8001c16:	d919      	bls.n	8001c4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2ba0      	cmp	r3, #160	; 0xa0
 8001c1c:	d902      	bls.n	8001c24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c1e:	2302      	movs	r3, #2
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	e013      	b.n	8001c4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c24:	2301      	movs	r3, #1
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	e010      	b.n	8001c4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b80      	cmp	r3, #128	; 0x80
 8001c2e:	d902      	bls.n	8001c36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c30:	2303      	movs	r3, #3
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	e00a      	b.n	8001c4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b80      	cmp	r3, #128	; 0x80
 8001c3a:	d102      	bne.n	8001c42 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	e004      	b.n	8001c4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b70      	cmp	r3, #112	; 0x70
 8001c46:	d101      	bne.n	8001c4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c48:	2301      	movs	r3, #1
 8001c4a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f023 0207 	bic.w	r2, r3, #7
 8001c54:	4909      	ldr	r1, [pc, #36]	; (8001c7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c5c:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d001      	beq.n	8001c6e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40022000 	.word	0x40022000

08001c80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c88:	2300      	movs	r3, #0
 8001c8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d02f      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ca4:	d005      	beq.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001ca6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001caa:	d015      	beq.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d007      	beq.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001cb0:	e00f      	b.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001cb2:	4bac      	ldr	r3, [pc, #688]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	4aab      	ldr	r2, [pc, #684]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cbc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cbe:	e00c      	b.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3304      	adds	r3, #4
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 f9cc 	bl	8002064 <RCCEx_PLLSAI1_Config>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cd0:	e003      	b.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	74fb      	strb	r3, [r7, #19]
      break;
 8001cd6:	e000      	b.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8001cd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001cda:	7cfb      	ldrb	r3, [r7, #19]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10b      	bne.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ce0:	4ba0      	ldr	r3, [pc, #640]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cee:	499d      	ldr	r1, [pc, #628]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001cf6:	e001      	b.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001cf8:	7cfb      	ldrb	r3, [r7, #19]
 8001cfa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 8099 	beq.w	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d0e:	4b95      	ldr	r3, [pc, #596]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00d      	beq.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d24:	4b8f      	ldr	r3, [pc, #572]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d28:	4a8e      	ldr	r2, [pc, #568]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d30:	4b8c      	ldr	r3, [pc, #560]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d40:	4b89      	ldr	r3, [pc, #548]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a88      	ldr	r2, [pc, #544]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d4c:	f7fe fe92 	bl	8000a74 <HAL_GetTick>
 8001d50:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d52:	e009      	b.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d54:	f7fe fe8e 	bl	8000a74 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d902      	bls.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	74fb      	strb	r3, [r7, #19]
        break;
 8001d66:	e005      	b.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d68:	4b7f      	ldr	r3, [pc, #508]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0ef      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8001d74:	7cfb      	ldrb	r3, [r7, #19]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d155      	bne.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d7a:	4b7a      	ldr	r3, [pc, #488]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d84:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d01e      	beq.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d019      	beq.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d96:	4b73      	ldr	r3, [pc, #460]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001da0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001da2:	4b70      	ldr	r3, [pc, #448]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da8:	4a6e      	ldr	r2, [pc, #440]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001db2:	4b6c      	ldr	r3, [pc, #432]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db8:	4a6a      	ldr	r2, [pc, #424]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001dc2:	4a68      	ldr	r2, [pc, #416]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d016      	beq.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd4:	f7fe fe4e 	bl	8000a74 <HAL_GetTick>
 8001dd8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dda:	e00b      	b.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ddc:	f7fe fe4a 	bl	8000a74 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d902      	bls.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	74fb      	strb	r3, [r7, #19]
            break;
 8001df2:	e006      	b.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001df4:	4b5b      	ldr	r3, [pc, #364]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0ec      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8001e02:	7cfb      	ldrb	r3, [r7, #19]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d10b      	bne.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e08:	4b56      	ldr	r3, [pc, #344]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e16:	4953      	ldr	r1, [pc, #332]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001e1e:	e004      	b.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e20:	7cfb      	ldrb	r3, [r7, #19]
 8001e22:	74bb      	strb	r3, [r7, #18]
 8001e24:	e001      	b.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e26:	7cfb      	ldrb	r3, [r7, #19]
 8001e28:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e2a:	7c7b      	ldrb	r3, [r7, #17]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d105      	bne.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e30:	4b4c      	ldr	r3, [pc, #304]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e34:	4a4b      	ldr	r2, [pc, #300]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00a      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e48:	4b46      	ldr	r3, [pc, #280]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4e:	f023 0203 	bic.w	r2, r3, #3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	4943      	ldr	r1, [pc, #268]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00a      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e6a:	4b3e      	ldr	r3, [pc, #248]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e70:	f023 020c 	bic.w	r2, r3, #12
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	493a      	ldr	r1, [pc, #232]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0320 	and.w	r3, r3, #32
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00a      	beq.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e8c:	4b35      	ldr	r3, [pc, #212]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9a:	4932      	ldr	r1, [pc, #200]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00a      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001eae:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ebc:	4929      	ldr	r1, [pc, #164]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00a      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001ed0:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ede:	4921      	ldr	r1, [pc, #132]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00a      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ef2:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f00:	4918      	ldr	r1, [pc, #96]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00a      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f14:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	4910      	ldr	r1, [pc, #64]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d02c      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f36:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f3c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	4907      	ldr	r1, [pc, #28]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f54:	d10a      	bne.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f56:	4b03      	ldr	r3, [pc, #12]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	4a02      	ldr	r2, [pc, #8]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f60:	60d3      	str	r3, [r2, #12]
 8001f62:	e015      	b.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f74:	d10c      	bne.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 f871 	bl	8002064 <RCCEx_PLLSAI1_Config>
 8001f82:	4603      	mov	r3, r0
 8001f84:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001f86:	7cfb      	ldrb	r3, [r7, #19]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8001f8c:	7cfb      	ldrb	r3, [r7, #19]
 8001f8e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d028      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f9c:	4b30      	ldr	r3, [pc, #192]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	492d      	ldr	r1, [pc, #180]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fba:	d106      	bne.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fbc:	4b28      	ldr	r3, [pc, #160]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4a27      	ldr	r2, [pc, #156]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fc6:	60d3      	str	r3, [r2, #12]
 8001fc8:	e011      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001fd2:	d10c      	bne.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	2101      	movs	r1, #1
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 f842 	bl	8002064 <RCCEx_PLLSAI1_Config>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001fe4:	7cfb      	ldrb	r3, [r7, #19]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8001fea:	7cfb      	ldrb	r3, [r7, #19]
 8001fec:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d01c      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ffa:	4b19      	ldr	r3, [pc, #100]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002000:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002008:	4915      	ldr	r1, [pc, #84]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800200a:	4313      	orrs	r3, r2
 800200c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002014:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002018:	d10c      	bne.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3304      	adds	r3, #4
 800201e:	2102      	movs	r1, #2
 8002020:	4618      	mov	r0, r3
 8002022:	f000 f81f 	bl	8002064 <RCCEx_PLLSAI1_Config>
 8002026:	4603      	mov	r3, r0
 8002028:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800202a:	7cfb      	ldrb	r3, [r7, #19]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002030:	7cfb      	ldrb	r3, [r7, #19]
 8002032:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00a      	beq.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002040:	4b07      	ldr	r3, [pc, #28]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002046:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204e:	4904      	ldr	r1, [pc, #16]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002050:	4313      	orrs	r3, r2
 8002052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002056:	7cbb      	ldrb	r3, [r7, #18]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40021000 	.word	0x40021000

08002064 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800206e:	2300      	movs	r3, #0
 8002070:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002072:	4b73      	ldr	r3, [pc, #460]	; (8002240 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d018      	beq.n	80020b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800207e:	4b70      	ldr	r3, [pc, #448]	; (8002240 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f003 0203 	and.w	r2, r3, #3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d10d      	bne.n	80020aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
       ||
 8002092:	2b00      	cmp	r3, #0
 8002094:	d009      	beq.n	80020aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002096:	4b6a      	ldr	r3, [pc, #424]	; (8002240 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	091b      	lsrs	r3, r3, #4
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	1c5a      	adds	r2, r3, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
       ||
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d044      	beq.n	8002134 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	73fb      	strb	r3, [r7, #15]
 80020ae:	e041      	b.n	8002134 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d00c      	beq.n	80020d2 <RCCEx_PLLSAI1_Config+0x6e>
 80020b8:	2b03      	cmp	r3, #3
 80020ba:	d013      	beq.n	80020e4 <RCCEx_PLLSAI1_Config+0x80>
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d120      	bne.n	8002102 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80020c0:	4b5f      	ldr	r3, [pc, #380]	; (8002240 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d11d      	bne.n	8002108 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020d0:	e01a      	b.n	8002108 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80020d2:	4b5b      	ldr	r3, [pc, #364]	; (8002240 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d116      	bne.n	800210c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020e2:	e013      	b.n	800210c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80020e4:	4b56      	ldr	r3, [pc, #344]	; (8002240 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10f      	bne.n	8002110 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80020f0:	4b53      	ldr	r3, [pc, #332]	; (8002240 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d109      	bne.n	8002110 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002100:	e006      	b.n	8002110 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	73fb      	strb	r3, [r7, #15]
      break;
 8002106:	e004      	b.n	8002112 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002108:	bf00      	nop
 800210a:	e002      	b.n	8002112 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800210c:	bf00      	nop
 800210e:	e000      	b.n	8002112 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002110:	bf00      	nop
    }

    if(status == HAL_OK)
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10d      	bne.n	8002134 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002118:	4b49      	ldr	r3, [pc, #292]	; (8002240 <RCCEx_PLLSAI1_Config+0x1dc>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6819      	ldr	r1, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	3b01      	subs	r3, #1
 800212a:	011b      	lsls	r3, r3, #4
 800212c:	430b      	orrs	r3, r1
 800212e:	4944      	ldr	r1, [pc, #272]	; (8002240 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002130:	4313      	orrs	r3, r2
 8002132:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002134:	7bfb      	ldrb	r3, [r7, #15]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d17c      	bne.n	8002234 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800213a:	4b41      	ldr	r3, [pc, #260]	; (8002240 <RCCEx_PLLSAI1_Config+0x1dc>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a40      	ldr	r2, [pc, #256]	; (8002240 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002140:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002144:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002146:	f7fe fc95 	bl	8000a74 <HAL_GetTick>
 800214a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800214c:	e009      	b.n	8002162 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800214e:	f7fe fc91 	bl	8000a74 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d902      	bls.n	8002162 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	73fb      	strb	r3, [r7, #15]
        break;
 8002160:	e005      	b.n	800216e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002162:	4b37      	ldr	r3, [pc, #220]	; (8002240 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1ef      	bne.n	800214e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d15f      	bne.n	8002234 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d110      	bne.n	800219c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800217a:	4b31      	ldr	r3, [pc, #196]	; (8002240 <RCCEx_PLLSAI1_Config+0x1dc>)
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002182:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6892      	ldr	r2, [r2, #8]
 800218a:	0211      	lsls	r1, r2, #8
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	68d2      	ldr	r2, [r2, #12]
 8002190:	06d2      	lsls	r2, r2, #27
 8002192:	430a      	orrs	r2, r1
 8002194:	492a      	ldr	r1, [pc, #168]	; (8002240 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002196:	4313      	orrs	r3, r2
 8002198:	610b      	str	r3, [r1, #16]
 800219a:	e027      	b.n	80021ec <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d112      	bne.n	80021c8 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80021a2:	4b27      	ldr	r3, [pc, #156]	; (8002240 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80021aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6892      	ldr	r2, [r2, #8]
 80021b2:	0211      	lsls	r1, r2, #8
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6912      	ldr	r2, [r2, #16]
 80021b8:	0852      	lsrs	r2, r2, #1
 80021ba:	3a01      	subs	r2, #1
 80021bc:	0552      	lsls	r2, r2, #21
 80021be:	430a      	orrs	r2, r1
 80021c0:	491f      	ldr	r1, [pc, #124]	; (8002240 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	610b      	str	r3, [r1, #16]
 80021c6:	e011      	b.n	80021ec <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80021c8:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80021d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6892      	ldr	r2, [r2, #8]
 80021d8:	0211      	lsls	r1, r2, #8
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6952      	ldr	r2, [r2, #20]
 80021de:	0852      	lsrs	r2, r2, #1
 80021e0:	3a01      	subs	r2, #1
 80021e2:	0652      	lsls	r2, r2, #25
 80021e4:	430a      	orrs	r2, r1
 80021e6:	4916      	ldr	r1, [pc, #88]	; (8002240 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80021ec:	4b14      	ldr	r3, [pc, #80]	; (8002240 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a13      	ldr	r2, [pc, #76]	; (8002240 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f8:	f7fe fc3c 	bl	8000a74 <HAL_GetTick>
 80021fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80021fe:	e009      	b.n	8002214 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002200:	f7fe fc38 	bl	8000a74 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d902      	bls.n	8002214 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	73fb      	strb	r3, [r7, #15]
          break;
 8002212:	e005      	b.n	8002220 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002214:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0ef      	beq.n	8002200 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d106      	bne.n	8002234 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002228:	691a      	ldr	r2, [r3, #16]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	4904      	ldr	r1, [pc, #16]	; (8002240 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002230:	4313      	orrs	r3, r2
 8002232:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002234:	7bfb      	ldrb	r3, [r7, #15]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000

08002244 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e040      	b.n	80022d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800225a:	2b00      	cmp	r3, #0
 800225c:	d106      	bne.n	800226c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7fe fa96 	bl	8000798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2224      	movs	r2, #36	; 0x24
 8002270:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0201 	bic.w	r2, r2, #1
 8002280:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f8c0 	bl	8002408 <UART_SetConfig>
 8002288:	4603      	mov	r3, r0
 800228a:	2b01      	cmp	r3, #1
 800228c:	d101      	bne.n	8002292 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e022      	b.n	80022d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 fac4 	bl	8002828 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0201 	orr.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 fb4b 	bl	800296c <UART_CheckIdleState>
 80022d6:	4603      	mov	r3, r0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	; 0x28
 80022e4:	af02      	add	r7, sp, #8
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	603b      	str	r3, [r7, #0]
 80022ec:	4613      	mov	r3, r2
 80022ee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	f040 8081 	bne.w	80023fc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <HAL_UART_Transmit+0x26>
 8002300:	88fb      	ldrh	r3, [r7, #6]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e079      	b.n	80023fe <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <HAL_UART_Transmit+0x38>
 8002314:	2302      	movs	r3, #2
 8002316:	e072      	b.n	80023fe <HAL_UART_Transmit+0x11e>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2221      	movs	r2, #33	; 0x21
 800232a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800232c:	f7fe fba2 	bl	8000a74 <HAL_GetTick>
 8002330:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	88fa      	ldrh	r2, [r7, #6]
 8002336:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	88fa      	ldrh	r2, [r7, #6]
 800233e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800234a:	d108      	bne.n	800235e <HAL_UART_Transmit+0x7e>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d104      	bne.n	800235e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002354:	2300      	movs	r3, #0
 8002356:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	61bb      	str	r3, [r7, #24]
 800235c:	e003      	b.n	8002366 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002362:	2300      	movs	r3, #0
 8002364:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800236e:	e02d      	b.n	80023cc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	2200      	movs	r2, #0
 8002378:	2180      	movs	r1, #128	; 0x80
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 fb3b 	bl	80029f6 <UART_WaitOnFlagUntilTimeout>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e039      	b.n	80023fe <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10b      	bne.n	80023a8 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	881a      	ldrh	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800239c:	b292      	uxth	r2, r2
 800239e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	3302      	adds	r3, #2
 80023a4:	61bb      	str	r3, [r7, #24]
 80023a6:	e008      	b.n	80023ba <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	781a      	ldrb	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	b292      	uxth	r2, r2
 80023b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	3301      	adds	r3, #1
 80023b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	3b01      	subs	r3, #1
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1cb      	bne.n	8002370 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	2200      	movs	r2, #0
 80023e0:	2140      	movs	r1, #64	; 0x40
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 fb07 	bl	80029f6 <UART_WaitOnFlagUntilTimeout>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e005      	b.n	80023fe <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2220      	movs	r2, #32
 80023f6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	e000      	b.n	80023fe <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80023fc:	2302      	movs	r3, #2
  }
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3720      	adds	r7, #32
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002408:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800240c:	b088      	sub	sp, #32
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	4313      	orrs	r3, r2
 800242c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4bb0      	ldr	r3, [pc, #704]	; (80026f8 <UART_SetConfig+0x2f0>)
 8002436:	4013      	ands	r3, r2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	69f9      	ldr	r1, [r7, #28]
 800243e:	430b      	orrs	r3, r1
 8002440:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4aa6      	ldr	r2, [pc, #664]	; (80026fc <UART_SetConfig+0x2f4>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d004      	beq.n	8002472 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	69fa      	ldr	r2, [r7, #28]
 800246e:	4313      	orrs	r3, r2
 8002470:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	69fa      	ldr	r2, [r7, #28]
 8002482:	430a      	orrs	r2, r1
 8002484:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a9d      	ldr	r2, [pc, #628]	; (8002700 <UART_SetConfig+0x2f8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d121      	bne.n	80024d4 <UART_SetConfig+0xcc>
 8002490:	4b9c      	ldr	r3, [pc, #624]	; (8002704 <UART_SetConfig+0x2fc>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	2b03      	cmp	r3, #3
 800249c:	d816      	bhi.n	80024cc <UART_SetConfig+0xc4>
 800249e:	a201      	add	r2, pc, #4	; (adr r2, 80024a4 <UART_SetConfig+0x9c>)
 80024a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a4:	080024b5 	.word	0x080024b5
 80024a8:	080024c1 	.word	0x080024c1
 80024ac:	080024bb 	.word	0x080024bb
 80024b0:	080024c7 	.word	0x080024c7
 80024b4:	2301      	movs	r3, #1
 80024b6:	76fb      	strb	r3, [r7, #27]
 80024b8:	e072      	b.n	80025a0 <UART_SetConfig+0x198>
 80024ba:	2302      	movs	r3, #2
 80024bc:	76fb      	strb	r3, [r7, #27]
 80024be:	e06f      	b.n	80025a0 <UART_SetConfig+0x198>
 80024c0:	2304      	movs	r3, #4
 80024c2:	76fb      	strb	r3, [r7, #27]
 80024c4:	e06c      	b.n	80025a0 <UART_SetConfig+0x198>
 80024c6:	2308      	movs	r3, #8
 80024c8:	76fb      	strb	r3, [r7, #27]
 80024ca:	e069      	b.n	80025a0 <UART_SetConfig+0x198>
 80024cc:	2310      	movs	r3, #16
 80024ce:	76fb      	strb	r3, [r7, #27]
 80024d0:	bf00      	nop
 80024d2:	e065      	b.n	80025a0 <UART_SetConfig+0x198>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a8b      	ldr	r2, [pc, #556]	; (8002708 <UART_SetConfig+0x300>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d134      	bne.n	8002548 <UART_SetConfig+0x140>
 80024de:	4b89      	ldr	r3, [pc, #548]	; (8002704 <UART_SetConfig+0x2fc>)
 80024e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e4:	f003 030c 	and.w	r3, r3, #12
 80024e8:	2b0c      	cmp	r3, #12
 80024ea:	d829      	bhi.n	8002540 <UART_SetConfig+0x138>
 80024ec:	a201      	add	r2, pc, #4	; (adr r2, 80024f4 <UART_SetConfig+0xec>)
 80024ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f2:	bf00      	nop
 80024f4:	08002529 	.word	0x08002529
 80024f8:	08002541 	.word	0x08002541
 80024fc:	08002541 	.word	0x08002541
 8002500:	08002541 	.word	0x08002541
 8002504:	08002535 	.word	0x08002535
 8002508:	08002541 	.word	0x08002541
 800250c:	08002541 	.word	0x08002541
 8002510:	08002541 	.word	0x08002541
 8002514:	0800252f 	.word	0x0800252f
 8002518:	08002541 	.word	0x08002541
 800251c:	08002541 	.word	0x08002541
 8002520:	08002541 	.word	0x08002541
 8002524:	0800253b 	.word	0x0800253b
 8002528:	2300      	movs	r3, #0
 800252a:	76fb      	strb	r3, [r7, #27]
 800252c:	e038      	b.n	80025a0 <UART_SetConfig+0x198>
 800252e:	2302      	movs	r3, #2
 8002530:	76fb      	strb	r3, [r7, #27]
 8002532:	e035      	b.n	80025a0 <UART_SetConfig+0x198>
 8002534:	2304      	movs	r3, #4
 8002536:	76fb      	strb	r3, [r7, #27]
 8002538:	e032      	b.n	80025a0 <UART_SetConfig+0x198>
 800253a:	2308      	movs	r3, #8
 800253c:	76fb      	strb	r3, [r7, #27]
 800253e:	e02f      	b.n	80025a0 <UART_SetConfig+0x198>
 8002540:	2310      	movs	r3, #16
 8002542:	76fb      	strb	r3, [r7, #27]
 8002544:	bf00      	nop
 8002546:	e02b      	b.n	80025a0 <UART_SetConfig+0x198>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a6b      	ldr	r2, [pc, #428]	; (80026fc <UART_SetConfig+0x2f4>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d124      	bne.n	800259c <UART_SetConfig+0x194>
 8002552:	4b6c      	ldr	r3, [pc, #432]	; (8002704 <UART_SetConfig+0x2fc>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800255c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002560:	d012      	beq.n	8002588 <UART_SetConfig+0x180>
 8002562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002566:	d802      	bhi.n	800256e <UART_SetConfig+0x166>
 8002568:	2b00      	cmp	r3, #0
 800256a:	d007      	beq.n	800257c <UART_SetConfig+0x174>
 800256c:	e012      	b.n	8002594 <UART_SetConfig+0x18c>
 800256e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002572:	d006      	beq.n	8002582 <UART_SetConfig+0x17a>
 8002574:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002578:	d009      	beq.n	800258e <UART_SetConfig+0x186>
 800257a:	e00b      	b.n	8002594 <UART_SetConfig+0x18c>
 800257c:	2300      	movs	r3, #0
 800257e:	76fb      	strb	r3, [r7, #27]
 8002580:	e00e      	b.n	80025a0 <UART_SetConfig+0x198>
 8002582:	2302      	movs	r3, #2
 8002584:	76fb      	strb	r3, [r7, #27]
 8002586:	e00b      	b.n	80025a0 <UART_SetConfig+0x198>
 8002588:	2304      	movs	r3, #4
 800258a:	76fb      	strb	r3, [r7, #27]
 800258c:	e008      	b.n	80025a0 <UART_SetConfig+0x198>
 800258e:	2308      	movs	r3, #8
 8002590:	76fb      	strb	r3, [r7, #27]
 8002592:	e005      	b.n	80025a0 <UART_SetConfig+0x198>
 8002594:	2310      	movs	r3, #16
 8002596:	76fb      	strb	r3, [r7, #27]
 8002598:	bf00      	nop
 800259a:	e001      	b.n	80025a0 <UART_SetConfig+0x198>
 800259c:	2310      	movs	r3, #16
 800259e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a55      	ldr	r2, [pc, #340]	; (80026fc <UART_SetConfig+0x2f4>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d174      	bne.n	8002694 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80025aa:	7efb      	ldrb	r3, [r7, #27]
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d824      	bhi.n	80025fa <UART_SetConfig+0x1f2>
 80025b0:	a201      	add	r2, pc, #4	; (adr r2, 80025b8 <UART_SetConfig+0x1b0>)
 80025b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b6:	bf00      	nop
 80025b8:	080025dd 	.word	0x080025dd
 80025bc:	080025fb 	.word	0x080025fb
 80025c0:	080025e5 	.word	0x080025e5
 80025c4:	080025fb 	.word	0x080025fb
 80025c8:	080025eb 	.word	0x080025eb
 80025cc:	080025fb 	.word	0x080025fb
 80025d0:	080025fb 	.word	0x080025fb
 80025d4:	080025fb 	.word	0x080025fb
 80025d8:	080025f3 	.word	0x080025f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025dc:	f7ff fac4 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 80025e0:	6178      	str	r0, [r7, #20]
        break;
 80025e2:	e00f      	b.n	8002604 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025e4:	4b49      	ldr	r3, [pc, #292]	; (800270c <UART_SetConfig+0x304>)
 80025e6:	617b      	str	r3, [r7, #20]
        break;
 80025e8:	e00c      	b.n	8002604 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025ea:	f7ff fa27 	bl	8001a3c <HAL_RCC_GetSysClockFreq>
 80025ee:	6178      	str	r0, [r7, #20]
        break;
 80025f0:	e008      	b.n	8002604 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025f6:	617b      	str	r3, [r7, #20]
        break;
 80025f8:	e004      	b.n	8002604 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	76bb      	strb	r3, [r7, #26]
        break;
 8002602:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 8100 	beq.w	800280c <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	4413      	add	r3, r2
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	429a      	cmp	r2, r3
 800261a:	d305      	bcc.n	8002628 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	429a      	cmp	r2, r3
 8002626:	d902      	bls.n	800262e <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	76bb      	strb	r3, [r7, #26]
 800262c:	e0ee      	b.n	800280c <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	4619      	mov	r1, r3
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	f04f 0300 	mov.w	r3, #0
 800263a:	f04f 0400 	mov.w	r4, #0
 800263e:	0214      	lsls	r4, r2, #8
 8002640:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002644:	020b      	lsls	r3, r1, #8
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6852      	ldr	r2, [r2, #4]
 800264a:	0852      	lsrs	r2, r2, #1
 800264c:	4611      	mov	r1, r2
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	eb13 0b01 	adds.w	fp, r3, r1
 8002656:	eb44 0c02 	adc.w	ip, r4, r2
 800265a:	4658      	mov	r0, fp
 800265c:	4661      	mov	r1, ip
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f04f 0400 	mov.w	r4, #0
 8002666:	461a      	mov	r2, r3
 8002668:	4623      	mov	r3, r4
 800266a:	f7fd fe01 	bl	8000270 <__aeabi_uldivmod>
 800266e:	4603      	mov	r3, r0
 8002670:	460c      	mov	r4, r1
 8002672:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800267a:	d308      	bcc.n	800268e <UART_SetConfig+0x286>
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002682:	d204      	bcs.n	800268e <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	60da      	str	r2, [r3, #12]
 800268c:	e0be      	b.n	800280c <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	76bb      	strb	r3, [r7, #26]
 8002692:	e0bb      	b.n	800280c <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800269c:	d169      	bne.n	8002772 <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 800269e:	7efb      	ldrb	r3, [r7, #27]
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d835      	bhi.n	8002710 <UART_SetConfig+0x308>
 80026a4:	a201      	add	r2, pc, #4	; (adr r2, 80026ac <UART_SetConfig+0x2a4>)
 80026a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026aa:	bf00      	nop
 80026ac:	080026d1 	.word	0x080026d1
 80026b0:	080026d9 	.word	0x080026d9
 80026b4:	080026e1 	.word	0x080026e1
 80026b8:	08002711 	.word	0x08002711
 80026bc:	080026e7 	.word	0x080026e7
 80026c0:	08002711 	.word	0x08002711
 80026c4:	08002711 	.word	0x08002711
 80026c8:	08002711 	.word	0x08002711
 80026cc:	080026ef 	.word	0x080026ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026d0:	f7ff fa4a 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 80026d4:	6178      	str	r0, [r7, #20]
        break;
 80026d6:	e020      	b.n	800271a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80026d8:	f7ff fa5c 	bl	8001b94 <HAL_RCC_GetPCLK2Freq>
 80026dc:	6178      	str	r0, [r7, #20]
        break;
 80026de:	e01c      	b.n	800271a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026e0:	4b0a      	ldr	r3, [pc, #40]	; (800270c <UART_SetConfig+0x304>)
 80026e2:	617b      	str	r3, [r7, #20]
        break;
 80026e4:	e019      	b.n	800271a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026e6:	f7ff f9a9 	bl	8001a3c <HAL_RCC_GetSysClockFreq>
 80026ea:	6178      	str	r0, [r7, #20]
        break;
 80026ec:	e015      	b.n	800271a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026f2:	617b      	str	r3, [r7, #20]
        break;
 80026f4:	e011      	b.n	800271a <UART_SetConfig+0x312>
 80026f6:	bf00      	nop
 80026f8:	efff69f3 	.word	0xefff69f3
 80026fc:	40008000 	.word	0x40008000
 8002700:	40013800 	.word	0x40013800
 8002704:	40021000 	.word	0x40021000
 8002708:	40004400 	.word	0x40004400
 800270c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	76bb      	strb	r3, [r7, #26]
        break;
 8002718:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d075      	beq.n	800280c <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	005a      	lsls	r2, r3, #1
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	085b      	lsrs	r3, r3, #1
 800272a:	441a      	add	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	fbb2 f3f3 	udiv	r3, r2, r3
 8002734:	b29b      	uxth	r3, r3
 8002736:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	2b0f      	cmp	r3, #15
 800273c:	d916      	bls.n	800276c <UART_SetConfig+0x364>
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002744:	d212      	bcs.n	800276c <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	b29b      	uxth	r3, r3
 800274a:	f023 030f 	bic.w	r3, r3, #15
 800274e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	085b      	lsrs	r3, r3, #1
 8002754:	b29b      	uxth	r3, r3
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	b29a      	uxth	r2, r3
 800275c:	89fb      	ldrh	r3, [r7, #14]
 800275e:	4313      	orrs	r3, r2
 8002760:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	89fa      	ldrh	r2, [r7, #14]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	e04f      	b.n	800280c <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	76bb      	strb	r3, [r7, #26]
 8002770:	e04c      	b.n	800280c <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002772:	7efb      	ldrb	r3, [r7, #27]
 8002774:	2b08      	cmp	r3, #8
 8002776:	d828      	bhi.n	80027ca <UART_SetConfig+0x3c2>
 8002778:	a201      	add	r2, pc, #4	; (adr r2, 8002780 <UART_SetConfig+0x378>)
 800277a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277e:	bf00      	nop
 8002780:	080027a5 	.word	0x080027a5
 8002784:	080027ad 	.word	0x080027ad
 8002788:	080027b5 	.word	0x080027b5
 800278c:	080027cb 	.word	0x080027cb
 8002790:	080027bb 	.word	0x080027bb
 8002794:	080027cb 	.word	0x080027cb
 8002798:	080027cb 	.word	0x080027cb
 800279c:	080027cb 	.word	0x080027cb
 80027a0:	080027c3 	.word	0x080027c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027a4:	f7ff f9e0 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 80027a8:	6178      	str	r0, [r7, #20]
        break;
 80027aa:	e013      	b.n	80027d4 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80027ac:	f7ff f9f2 	bl	8001b94 <HAL_RCC_GetPCLK2Freq>
 80027b0:	6178      	str	r0, [r7, #20]
        break;
 80027b2:	e00f      	b.n	80027d4 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027b4:	4b1b      	ldr	r3, [pc, #108]	; (8002824 <UART_SetConfig+0x41c>)
 80027b6:	617b      	str	r3, [r7, #20]
        break;
 80027b8:	e00c      	b.n	80027d4 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027ba:	f7ff f93f 	bl	8001a3c <HAL_RCC_GetSysClockFreq>
 80027be:	6178      	str	r0, [r7, #20]
        break;
 80027c0:	e008      	b.n	80027d4 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027c6:	617b      	str	r3, [r7, #20]
        break;
 80027c8:	e004      	b.n	80027d4 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	76bb      	strb	r3, [r7, #26]
        break;
 80027d2:	bf00      	nop
    }

    if (pclk != 0U)
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d018      	beq.n	800280c <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	085a      	lsrs	r2, r3, #1
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	441a      	add	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	2b0f      	cmp	r3, #15
 80027f4:	d908      	bls.n	8002808 <UART_SetConfig+0x400>
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027fc:	d204      	bcs.n	8002808 <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	60da      	str	r2, [r3, #12]
 8002806:	e001      	b.n	800280c <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002818:	7ebb      	ldrb	r3, [r7, #26]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3720      	adds	r7, #32
 800281e:	46bd      	mov	sp, r7
 8002820:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002824:	00f42400 	.word	0x00f42400

08002828 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00a      	beq.n	8002852 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00a      	beq.n	8002896 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00a      	beq.n	80028b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	f003 0310 	and.w	r3, r3, #16
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00a      	beq.n	80028da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	f003 0320 	and.w	r3, r3, #32
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002904:	2b00      	cmp	r3, #0
 8002906:	d01a      	beq.n	800293e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002926:	d10a      	bne.n	800293e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00a      	beq.n	8002960 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	605a      	str	r2, [r3, #4]
  }
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af02      	add	r7, sp, #8
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800297a:	f7fe f87b 	bl	8000a74 <HAL_GetTick>
 800297e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b08      	cmp	r3, #8
 800298c:	d10e      	bne.n	80029ac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800298e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f82a 	bl	80029f6 <UART_WaitOnFlagUntilTimeout>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e020      	b.n	80029ee <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d10e      	bne.n	80029d8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f814 	bl	80029f6 <UART_WaitOnFlagUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e00a      	b.n	80029ee <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2220      	movs	r2, #32
 80029dc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2220      	movs	r2, #32
 80029e2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	60f8      	str	r0, [r7, #12]
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	603b      	str	r3, [r7, #0]
 8002a02:	4613      	mov	r3, r2
 8002a04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a06:	e05d      	b.n	8002ac4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a0e:	d059      	beq.n	8002ac4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a10:	f7fe f830 	bl	8000a74 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d302      	bcc.n	8002a26 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d11b      	bne.n	8002a5e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a34:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0201 	bic.w	r2, r2, #1
 8002a44:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2220      	movs	r2, #32
 8002a4a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e042      	b.n	8002ae4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d02b      	beq.n	8002ac4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a7a:	d123      	bne.n	8002ac4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a84:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a94:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0201 	bic.w	r2, r2, #1
 8002aa4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e00f      	b.n	8002ae4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	69da      	ldr	r2, [r3, #28]
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	4013      	ands	r3, r2
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	bf0c      	ite	eq
 8002ad4:	2301      	moveq	r3, #1
 8002ad6:	2300      	movne	r3, #0
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	461a      	mov	r2, r3
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d092      	beq.n	8002a08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <__errno>:
 8002aec:	4b01      	ldr	r3, [pc, #4]	; (8002af4 <__errno+0x8>)
 8002aee:	6818      	ldr	r0, [r3, #0]
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	2000000c 	.word	0x2000000c

08002af8 <__libc_init_array>:
 8002af8:	b570      	push	{r4, r5, r6, lr}
 8002afa:	4e0d      	ldr	r6, [pc, #52]	; (8002b30 <__libc_init_array+0x38>)
 8002afc:	4c0d      	ldr	r4, [pc, #52]	; (8002b34 <__libc_init_array+0x3c>)
 8002afe:	1ba4      	subs	r4, r4, r6
 8002b00:	10a4      	asrs	r4, r4, #2
 8002b02:	2500      	movs	r5, #0
 8002b04:	42a5      	cmp	r5, r4
 8002b06:	d109      	bne.n	8002b1c <__libc_init_array+0x24>
 8002b08:	4e0b      	ldr	r6, [pc, #44]	; (8002b38 <__libc_init_array+0x40>)
 8002b0a:	4c0c      	ldr	r4, [pc, #48]	; (8002b3c <__libc_init_array+0x44>)
 8002b0c:	f000 fc26 	bl	800335c <_init>
 8002b10:	1ba4      	subs	r4, r4, r6
 8002b12:	10a4      	asrs	r4, r4, #2
 8002b14:	2500      	movs	r5, #0
 8002b16:	42a5      	cmp	r5, r4
 8002b18:	d105      	bne.n	8002b26 <__libc_init_array+0x2e>
 8002b1a:	bd70      	pop	{r4, r5, r6, pc}
 8002b1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b20:	4798      	blx	r3
 8002b22:	3501      	adds	r5, #1
 8002b24:	e7ee      	b.n	8002b04 <__libc_init_array+0xc>
 8002b26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b2a:	4798      	blx	r3
 8002b2c:	3501      	adds	r5, #1
 8002b2e:	e7f2      	b.n	8002b16 <__libc_init_array+0x1e>
 8002b30:	08003418 	.word	0x08003418
 8002b34:	08003418 	.word	0x08003418
 8002b38:	08003418 	.word	0x08003418
 8002b3c:	0800341c 	.word	0x0800341c

08002b40 <memset>:
 8002b40:	4402      	add	r2, r0
 8002b42:	4603      	mov	r3, r0
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d100      	bne.n	8002b4a <memset+0xa>
 8002b48:	4770      	bx	lr
 8002b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b4e:	e7f9      	b.n	8002b44 <memset+0x4>

08002b50 <siprintf>:
 8002b50:	b40e      	push	{r1, r2, r3}
 8002b52:	b500      	push	{lr}
 8002b54:	b09c      	sub	sp, #112	; 0x70
 8002b56:	ab1d      	add	r3, sp, #116	; 0x74
 8002b58:	9002      	str	r0, [sp, #8]
 8002b5a:	9006      	str	r0, [sp, #24]
 8002b5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002b60:	4809      	ldr	r0, [pc, #36]	; (8002b88 <siprintf+0x38>)
 8002b62:	9107      	str	r1, [sp, #28]
 8002b64:	9104      	str	r1, [sp, #16]
 8002b66:	4909      	ldr	r1, [pc, #36]	; (8002b8c <siprintf+0x3c>)
 8002b68:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b6c:	9105      	str	r1, [sp, #20]
 8002b6e:	6800      	ldr	r0, [r0, #0]
 8002b70:	9301      	str	r3, [sp, #4]
 8002b72:	a902      	add	r1, sp, #8
 8002b74:	f000 f866 	bl	8002c44 <_svfiprintf_r>
 8002b78:	9b02      	ldr	r3, [sp, #8]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	701a      	strb	r2, [r3, #0]
 8002b7e:	b01c      	add	sp, #112	; 0x70
 8002b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b84:	b003      	add	sp, #12
 8002b86:	4770      	bx	lr
 8002b88:	2000000c 	.word	0x2000000c
 8002b8c:	ffff0208 	.word	0xffff0208

08002b90 <__ssputs_r>:
 8002b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b94:	688e      	ldr	r6, [r1, #8]
 8002b96:	429e      	cmp	r6, r3
 8002b98:	4682      	mov	sl, r0
 8002b9a:	460c      	mov	r4, r1
 8002b9c:	4690      	mov	r8, r2
 8002b9e:	4699      	mov	r9, r3
 8002ba0:	d837      	bhi.n	8002c12 <__ssputs_r+0x82>
 8002ba2:	898a      	ldrh	r2, [r1, #12]
 8002ba4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002ba8:	d031      	beq.n	8002c0e <__ssputs_r+0x7e>
 8002baa:	6825      	ldr	r5, [r4, #0]
 8002bac:	6909      	ldr	r1, [r1, #16]
 8002bae:	1a6f      	subs	r7, r5, r1
 8002bb0:	6965      	ldr	r5, [r4, #20]
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002bb8:	fb95 f5f3 	sdiv	r5, r5, r3
 8002bbc:	f109 0301 	add.w	r3, r9, #1
 8002bc0:	443b      	add	r3, r7
 8002bc2:	429d      	cmp	r5, r3
 8002bc4:	bf38      	it	cc
 8002bc6:	461d      	movcc	r5, r3
 8002bc8:	0553      	lsls	r3, r2, #21
 8002bca:	d530      	bpl.n	8002c2e <__ssputs_r+0x9e>
 8002bcc:	4629      	mov	r1, r5
 8002bce:	f000 fb2b 	bl	8003228 <_malloc_r>
 8002bd2:	4606      	mov	r6, r0
 8002bd4:	b950      	cbnz	r0, 8002bec <__ssputs_r+0x5c>
 8002bd6:	230c      	movs	r3, #12
 8002bd8:	f8ca 3000 	str.w	r3, [sl]
 8002bdc:	89a3      	ldrh	r3, [r4, #12]
 8002bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002be2:	81a3      	strh	r3, [r4, #12]
 8002be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bec:	463a      	mov	r2, r7
 8002bee:	6921      	ldr	r1, [r4, #16]
 8002bf0:	f000 faa8 	bl	8003144 <memcpy>
 8002bf4:	89a3      	ldrh	r3, [r4, #12]
 8002bf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bfe:	81a3      	strh	r3, [r4, #12]
 8002c00:	6126      	str	r6, [r4, #16]
 8002c02:	6165      	str	r5, [r4, #20]
 8002c04:	443e      	add	r6, r7
 8002c06:	1bed      	subs	r5, r5, r7
 8002c08:	6026      	str	r6, [r4, #0]
 8002c0a:	60a5      	str	r5, [r4, #8]
 8002c0c:	464e      	mov	r6, r9
 8002c0e:	454e      	cmp	r6, r9
 8002c10:	d900      	bls.n	8002c14 <__ssputs_r+0x84>
 8002c12:	464e      	mov	r6, r9
 8002c14:	4632      	mov	r2, r6
 8002c16:	4641      	mov	r1, r8
 8002c18:	6820      	ldr	r0, [r4, #0]
 8002c1a:	f000 fa9e 	bl	800315a <memmove>
 8002c1e:	68a3      	ldr	r3, [r4, #8]
 8002c20:	1b9b      	subs	r3, r3, r6
 8002c22:	60a3      	str	r3, [r4, #8]
 8002c24:	6823      	ldr	r3, [r4, #0]
 8002c26:	441e      	add	r6, r3
 8002c28:	6026      	str	r6, [r4, #0]
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	e7dc      	b.n	8002be8 <__ssputs_r+0x58>
 8002c2e:	462a      	mov	r2, r5
 8002c30:	f000 fb54 	bl	80032dc <_realloc_r>
 8002c34:	4606      	mov	r6, r0
 8002c36:	2800      	cmp	r0, #0
 8002c38:	d1e2      	bne.n	8002c00 <__ssputs_r+0x70>
 8002c3a:	6921      	ldr	r1, [r4, #16]
 8002c3c:	4650      	mov	r0, sl
 8002c3e:	f000 faa5 	bl	800318c <_free_r>
 8002c42:	e7c8      	b.n	8002bd6 <__ssputs_r+0x46>

08002c44 <_svfiprintf_r>:
 8002c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c48:	461d      	mov	r5, r3
 8002c4a:	898b      	ldrh	r3, [r1, #12]
 8002c4c:	061f      	lsls	r7, r3, #24
 8002c4e:	b09d      	sub	sp, #116	; 0x74
 8002c50:	4680      	mov	r8, r0
 8002c52:	460c      	mov	r4, r1
 8002c54:	4616      	mov	r6, r2
 8002c56:	d50f      	bpl.n	8002c78 <_svfiprintf_r+0x34>
 8002c58:	690b      	ldr	r3, [r1, #16]
 8002c5a:	b96b      	cbnz	r3, 8002c78 <_svfiprintf_r+0x34>
 8002c5c:	2140      	movs	r1, #64	; 0x40
 8002c5e:	f000 fae3 	bl	8003228 <_malloc_r>
 8002c62:	6020      	str	r0, [r4, #0]
 8002c64:	6120      	str	r0, [r4, #16]
 8002c66:	b928      	cbnz	r0, 8002c74 <_svfiprintf_r+0x30>
 8002c68:	230c      	movs	r3, #12
 8002c6a:	f8c8 3000 	str.w	r3, [r8]
 8002c6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c72:	e0c8      	b.n	8002e06 <_svfiprintf_r+0x1c2>
 8002c74:	2340      	movs	r3, #64	; 0x40
 8002c76:	6163      	str	r3, [r4, #20]
 8002c78:	2300      	movs	r3, #0
 8002c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8002c7c:	2320      	movs	r3, #32
 8002c7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c82:	2330      	movs	r3, #48	; 0x30
 8002c84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c88:	9503      	str	r5, [sp, #12]
 8002c8a:	f04f 0b01 	mov.w	fp, #1
 8002c8e:	4637      	mov	r7, r6
 8002c90:	463d      	mov	r5, r7
 8002c92:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002c96:	b10b      	cbz	r3, 8002c9c <_svfiprintf_r+0x58>
 8002c98:	2b25      	cmp	r3, #37	; 0x25
 8002c9a:	d13e      	bne.n	8002d1a <_svfiprintf_r+0xd6>
 8002c9c:	ebb7 0a06 	subs.w	sl, r7, r6
 8002ca0:	d00b      	beq.n	8002cba <_svfiprintf_r+0x76>
 8002ca2:	4653      	mov	r3, sl
 8002ca4:	4632      	mov	r2, r6
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	4640      	mov	r0, r8
 8002caa:	f7ff ff71 	bl	8002b90 <__ssputs_r>
 8002cae:	3001      	adds	r0, #1
 8002cb0:	f000 80a4 	beq.w	8002dfc <_svfiprintf_r+0x1b8>
 8002cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cb6:	4453      	add	r3, sl
 8002cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8002cba:	783b      	ldrb	r3, [r7, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 809d 	beq.w	8002dfc <_svfiprintf_r+0x1b8>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ccc:	9304      	str	r3, [sp, #16]
 8002cce:	9307      	str	r3, [sp, #28]
 8002cd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002cd4:	931a      	str	r3, [sp, #104]	; 0x68
 8002cd6:	462f      	mov	r7, r5
 8002cd8:	2205      	movs	r2, #5
 8002cda:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002cde:	4850      	ldr	r0, [pc, #320]	; (8002e20 <_svfiprintf_r+0x1dc>)
 8002ce0:	f7fd fa76 	bl	80001d0 <memchr>
 8002ce4:	9b04      	ldr	r3, [sp, #16]
 8002ce6:	b9d0      	cbnz	r0, 8002d1e <_svfiprintf_r+0xda>
 8002ce8:	06d9      	lsls	r1, r3, #27
 8002cea:	bf44      	itt	mi
 8002cec:	2220      	movmi	r2, #32
 8002cee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002cf2:	071a      	lsls	r2, r3, #28
 8002cf4:	bf44      	itt	mi
 8002cf6:	222b      	movmi	r2, #43	; 0x2b
 8002cf8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002cfc:	782a      	ldrb	r2, [r5, #0]
 8002cfe:	2a2a      	cmp	r2, #42	; 0x2a
 8002d00:	d015      	beq.n	8002d2e <_svfiprintf_r+0xea>
 8002d02:	9a07      	ldr	r2, [sp, #28]
 8002d04:	462f      	mov	r7, r5
 8002d06:	2000      	movs	r0, #0
 8002d08:	250a      	movs	r5, #10
 8002d0a:	4639      	mov	r1, r7
 8002d0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d10:	3b30      	subs	r3, #48	; 0x30
 8002d12:	2b09      	cmp	r3, #9
 8002d14:	d94d      	bls.n	8002db2 <_svfiprintf_r+0x16e>
 8002d16:	b1b8      	cbz	r0, 8002d48 <_svfiprintf_r+0x104>
 8002d18:	e00f      	b.n	8002d3a <_svfiprintf_r+0xf6>
 8002d1a:	462f      	mov	r7, r5
 8002d1c:	e7b8      	b.n	8002c90 <_svfiprintf_r+0x4c>
 8002d1e:	4a40      	ldr	r2, [pc, #256]	; (8002e20 <_svfiprintf_r+0x1dc>)
 8002d20:	1a80      	subs	r0, r0, r2
 8002d22:	fa0b f000 	lsl.w	r0, fp, r0
 8002d26:	4318      	orrs	r0, r3
 8002d28:	9004      	str	r0, [sp, #16]
 8002d2a:	463d      	mov	r5, r7
 8002d2c:	e7d3      	b.n	8002cd6 <_svfiprintf_r+0x92>
 8002d2e:	9a03      	ldr	r2, [sp, #12]
 8002d30:	1d11      	adds	r1, r2, #4
 8002d32:	6812      	ldr	r2, [r2, #0]
 8002d34:	9103      	str	r1, [sp, #12]
 8002d36:	2a00      	cmp	r2, #0
 8002d38:	db01      	blt.n	8002d3e <_svfiprintf_r+0xfa>
 8002d3a:	9207      	str	r2, [sp, #28]
 8002d3c:	e004      	b.n	8002d48 <_svfiprintf_r+0x104>
 8002d3e:	4252      	negs	r2, r2
 8002d40:	f043 0302 	orr.w	r3, r3, #2
 8002d44:	9207      	str	r2, [sp, #28]
 8002d46:	9304      	str	r3, [sp, #16]
 8002d48:	783b      	ldrb	r3, [r7, #0]
 8002d4a:	2b2e      	cmp	r3, #46	; 0x2e
 8002d4c:	d10c      	bne.n	8002d68 <_svfiprintf_r+0x124>
 8002d4e:	787b      	ldrb	r3, [r7, #1]
 8002d50:	2b2a      	cmp	r3, #42	; 0x2a
 8002d52:	d133      	bne.n	8002dbc <_svfiprintf_r+0x178>
 8002d54:	9b03      	ldr	r3, [sp, #12]
 8002d56:	1d1a      	adds	r2, r3, #4
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	9203      	str	r2, [sp, #12]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	bfb8      	it	lt
 8002d60:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002d64:	3702      	adds	r7, #2
 8002d66:	9305      	str	r3, [sp, #20]
 8002d68:	4d2e      	ldr	r5, [pc, #184]	; (8002e24 <_svfiprintf_r+0x1e0>)
 8002d6a:	7839      	ldrb	r1, [r7, #0]
 8002d6c:	2203      	movs	r2, #3
 8002d6e:	4628      	mov	r0, r5
 8002d70:	f7fd fa2e 	bl	80001d0 <memchr>
 8002d74:	b138      	cbz	r0, 8002d86 <_svfiprintf_r+0x142>
 8002d76:	2340      	movs	r3, #64	; 0x40
 8002d78:	1b40      	subs	r0, r0, r5
 8002d7a:	fa03 f000 	lsl.w	r0, r3, r0
 8002d7e:	9b04      	ldr	r3, [sp, #16]
 8002d80:	4303      	orrs	r3, r0
 8002d82:	3701      	adds	r7, #1
 8002d84:	9304      	str	r3, [sp, #16]
 8002d86:	7839      	ldrb	r1, [r7, #0]
 8002d88:	4827      	ldr	r0, [pc, #156]	; (8002e28 <_svfiprintf_r+0x1e4>)
 8002d8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d8e:	2206      	movs	r2, #6
 8002d90:	1c7e      	adds	r6, r7, #1
 8002d92:	f7fd fa1d 	bl	80001d0 <memchr>
 8002d96:	2800      	cmp	r0, #0
 8002d98:	d038      	beq.n	8002e0c <_svfiprintf_r+0x1c8>
 8002d9a:	4b24      	ldr	r3, [pc, #144]	; (8002e2c <_svfiprintf_r+0x1e8>)
 8002d9c:	bb13      	cbnz	r3, 8002de4 <_svfiprintf_r+0x1a0>
 8002d9e:	9b03      	ldr	r3, [sp, #12]
 8002da0:	3307      	adds	r3, #7
 8002da2:	f023 0307 	bic.w	r3, r3, #7
 8002da6:	3308      	adds	r3, #8
 8002da8:	9303      	str	r3, [sp, #12]
 8002daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dac:	444b      	add	r3, r9
 8002dae:	9309      	str	r3, [sp, #36]	; 0x24
 8002db0:	e76d      	b.n	8002c8e <_svfiprintf_r+0x4a>
 8002db2:	fb05 3202 	mla	r2, r5, r2, r3
 8002db6:	2001      	movs	r0, #1
 8002db8:	460f      	mov	r7, r1
 8002dba:	e7a6      	b.n	8002d0a <_svfiprintf_r+0xc6>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	3701      	adds	r7, #1
 8002dc0:	9305      	str	r3, [sp, #20]
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	250a      	movs	r5, #10
 8002dc6:	4638      	mov	r0, r7
 8002dc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002dcc:	3a30      	subs	r2, #48	; 0x30
 8002dce:	2a09      	cmp	r2, #9
 8002dd0:	d903      	bls.n	8002dda <_svfiprintf_r+0x196>
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0c8      	beq.n	8002d68 <_svfiprintf_r+0x124>
 8002dd6:	9105      	str	r1, [sp, #20]
 8002dd8:	e7c6      	b.n	8002d68 <_svfiprintf_r+0x124>
 8002dda:	fb05 2101 	mla	r1, r5, r1, r2
 8002dde:	2301      	movs	r3, #1
 8002de0:	4607      	mov	r7, r0
 8002de2:	e7f0      	b.n	8002dc6 <_svfiprintf_r+0x182>
 8002de4:	ab03      	add	r3, sp, #12
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	4622      	mov	r2, r4
 8002dea:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <_svfiprintf_r+0x1ec>)
 8002dec:	a904      	add	r1, sp, #16
 8002dee:	4640      	mov	r0, r8
 8002df0:	f3af 8000 	nop.w
 8002df4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002df8:	4681      	mov	r9, r0
 8002dfa:	d1d6      	bne.n	8002daa <_svfiprintf_r+0x166>
 8002dfc:	89a3      	ldrh	r3, [r4, #12]
 8002dfe:	065b      	lsls	r3, r3, #25
 8002e00:	f53f af35 	bmi.w	8002c6e <_svfiprintf_r+0x2a>
 8002e04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e06:	b01d      	add	sp, #116	; 0x74
 8002e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e0c:	ab03      	add	r3, sp, #12
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	4622      	mov	r2, r4
 8002e12:	4b07      	ldr	r3, [pc, #28]	; (8002e30 <_svfiprintf_r+0x1ec>)
 8002e14:	a904      	add	r1, sp, #16
 8002e16:	4640      	mov	r0, r8
 8002e18:	f000 f882 	bl	8002f20 <_printf_i>
 8002e1c:	e7ea      	b.n	8002df4 <_svfiprintf_r+0x1b0>
 8002e1e:	bf00      	nop
 8002e20:	080033dc 	.word	0x080033dc
 8002e24:	080033e2 	.word	0x080033e2
 8002e28:	080033e6 	.word	0x080033e6
 8002e2c:	00000000 	.word	0x00000000
 8002e30:	08002b91 	.word	0x08002b91

08002e34 <_printf_common>:
 8002e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e38:	4691      	mov	r9, r2
 8002e3a:	461f      	mov	r7, r3
 8002e3c:	688a      	ldr	r2, [r1, #8]
 8002e3e:	690b      	ldr	r3, [r1, #16]
 8002e40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e44:	4293      	cmp	r3, r2
 8002e46:	bfb8      	it	lt
 8002e48:	4613      	movlt	r3, r2
 8002e4a:	f8c9 3000 	str.w	r3, [r9]
 8002e4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e52:	4606      	mov	r6, r0
 8002e54:	460c      	mov	r4, r1
 8002e56:	b112      	cbz	r2, 8002e5e <_printf_common+0x2a>
 8002e58:	3301      	adds	r3, #1
 8002e5a:	f8c9 3000 	str.w	r3, [r9]
 8002e5e:	6823      	ldr	r3, [r4, #0]
 8002e60:	0699      	lsls	r1, r3, #26
 8002e62:	bf42      	ittt	mi
 8002e64:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002e68:	3302      	addmi	r3, #2
 8002e6a:	f8c9 3000 	strmi.w	r3, [r9]
 8002e6e:	6825      	ldr	r5, [r4, #0]
 8002e70:	f015 0506 	ands.w	r5, r5, #6
 8002e74:	d107      	bne.n	8002e86 <_printf_common+0x52>
 8002e76:	f104 0a19 	add.w	sl, r4, #25
 8002e7a:	68e3      	ldr	r3, [r4, #12]
 8002e7c:	f8d9 2000 	ldr.w	r2, [r9]
 8002e80:	1a9b      	subs	r3, r3, r2
 8002e82:	42ab      	cmp	r3, r5
 8002e84:	dc28      	bgt.n	8002ed8 <_printf_common+0xa4>
 8002e86:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002e8a:	6822      	ldr	r2, [r4, #0]
 8002e8c:	3300      	adds	r3, #0
 8002e8e:	bf18      	it	ne
 8002e90:	2301      	movne	r3, #1
 8002e92:	0692      	lsls	r2, r2, #26
 8002e94:	d42d      	bmi.n	8002ef2 <_printf_common+0xbe>
 8002e96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e9a:	4639      	mov	r1, r7
 8002e9c:	4630      	mov	r0, r6
 8002e9e:	47c0      	blx	r8
 8002ea0:	3001      	adds	r0, #1
 8002ea2:	d020      	beq.n	8002ee6 <_printf_common+0xb2>
 8002ea4:	6823      	ldr	r3, [r4, #0]
 8002ea6:	68e5      	ldr	r5, [r4, #12]
 8002ea8:	f8d9 2000 	ldr.w	r2, [r9]
 8002eac:	f003 0306 	and.w	r3, r3, #6
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	bf08      	it	eq
 8002eb4:	1aad      	subeq	r5, r5, r2
 8002eb6:	68a3      	ldr	r3, [r4, #8]
 8002eb8:	6922      	ldr	r2, [r4, #16]
 8002eba:	bf0c      	ite	eq
 8002ebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ec0:	2500      	movne	r5, #0
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	bfc4      	itt	gt
 8002ec6:	1a9b      	subgt	r3, r3, r2
 8002ec8:	18ed      	addgt	r5, r5, r3
 8002eca:	f04f 0900 	mov.w	r9, #0
 8002ece:	341a      	adds	r4, #26
 8002ed0:	454d      	cmp	r5, r9
 8002ed2:	d11a      	bne.n	8002f0a <_printf_common+0xd6>
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	e008      	b.n	8002eea <_printf_common+0xb6>
 8002ed8:	2301      	movs	r3, #1
 8002eda:	4652      	mov	r2, sl
 8002edc:	4639      	mov	r1, r7
 8002ede:	4630      	mov	r0, r6
 8002ee0:	47c0      	blx	r8
 8002ee2:	3001      	adds	r0, #1
 8002ee4:	d103      	bne.n	8002eee <_printf_common+0xba>
 8002ee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002eee:	3501      	adds	r5, #1
 8002ef0:	e7c3      	b.n	8002e7a <_printf_common+0x46>
 8002ef2:	18e1      	adds	r1, r4, r3
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	2030      	movs	r0, #48	; 0x30
 8002ef8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002efc:	4422      	add	r2, r4
 8002efe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f06:	3302      	adds	r3, #2
 8002f08:	e7c5      	b.n	8002e96 <_printf_common+0x62>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	4622      	mov	r2, r4
 8002f0e:	4639      	mov	r1, r7
 8002f10:	4630      	mov	r0, r6
 8002f12:	47c0      	blx	r8
 8002f14:	3001      	adds	r0, #1
 8002f16:	d0e6      	beq.n	8002ee6 <_printf_common+0xb2>
 8002f18:	f109 0901 	add.w	r9, r9, #1
 8002f1c:	e7d8      	b.n	8002ed0 <_printf_common+0x9c>
	...

08002f20 <_printf_i>:
 8002f20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f24:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002f28:	460c      	mov	r4, r1
 8002f2a:	7e09      	ldrb	r1, [r1, #24]
 8002f2c:	b085      	sub	sp, #20
 8002f2e:	296e      	cmp	r1, #110	; 0x6e
 8002f30:	4617      	mov	r7, r2
 8002f32:	4606      	mov	r6, r0
 8002f34:	4698      	mov	r8, r3
 8002f36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002f38:	f000 80b3 	beq.w	80030a2 <_printf_i+0x182>
 8002f3c:	d822      	bhi.n	8002f84 <_printf_i+0x64>
 8002f3e:	2963      	cmp	r1, #99	; 0x63
 8002f40:	d036      	beq.n	8002fb0 <_printf_i+0x90>
 8002f42:	d80a      	bhi.n	8002f5a <_printf_i+0x3a>
 8002f44:	2900      	cmp	r1, #0
 8002f46:	f000 80b9 	beq.w	80030bc <_printf_i+0x19c>
 8002f4a:	2958      	cmp	r1, #88	; 0x58
 8002f4c:	f000 8083 	beq.w	8003056 <_printf_i+0x136>
 8002f50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f54:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002f58:	e032      	b.n	8002fc0 <_printf_i+0xa0>
 8002f5a:	2964      	cmp	r1, #100	; 0x64
 8002f5c:	d001      	beq.n	8002f62 <_printf_i+0x42>
 8002f5e:	2969      	cmp	r1, #105	; 0x69
 8002f60:	d1f6      	bne.n	8002f50 <_printf_i+0x30>
 8002f62:	6820      	ldr	r0, [r4, #0]
 8002f64:	6813      	ldr	r3, [r2, #0]
 8002f66:	0605      	lsls	r5, r0, #24
 8002f68:	f103 0104 	add.w	r1, r3, #4
 8002f6c:	d52a      	bpl.n	8002fc4 <_printf_i+0xa4>
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6011      	str	r1, [r2, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	da03      	bge.n	8002f7e <_printf_i+0x5e>
 8002f76:	222d      	movs	r2, #45	; 0x2d
 8002f78:	425b      	negs	r3, r3
 8002f7a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002f7e:	486f      	ldr	r0, [pc, #444]	; (800313c <_printf_i+0x21c>)
 8002f80:	220a      	movs	r2, #10
 8002f82:	e039      	b.n	8002ff8 <_printf_i+0xd8>
 8002f84:	2973      	cmp	r1, #115	; 0x73
 8002f86:	f000 809d 	beq.w	80030c4 <_printf_i+0x1a4>
 8002f8a:	d808      	bhi.n	8002f9e <_printf_i+0x7e>
 8002f8c:	296f      	cmp	r1, #111	; 0x6f
 8002f8e:	d020      	beq.n	8002fd2 <_printf_i+0xb2>
 8002f90:	2970      	cmp	r1, #112	; 0x70
 8002f92:	d1dd      	bne.n	8002f50 <_printf_i+0x30>
 8002f94:	6823      	ldr	r3, [r4, #0]
 8002f96:	f043 0320 	orr.w	r3, r3, #32
 8002f9a:	6023      	str	r3, [r4, #0]
 8002f9c:	e003      	b.n	8002fa6 <_printf_i+0x86>
 8002f9e:	2975      	cmp	r1, #117	; 0x75
 8002fa0:	d017      	beq.n	8002fd2 <_printf_i+0xb2>
 8002fa2:	2978      	cmp	r1, #120	; 0x78
 8002fa4:	d1d4      	bne.n	8002f50 <_printf_i+0x30>
 8002fa6:	2378      	movs	r3, #120	; 0x78
 8002fa8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002fac:	4864      	ldr	r0, [pc, #400]	; (8003140 <_printf_i+0x220>)
 8002fae:	e055      	b.n	800305c <_printf_i+0x13c>
 8002fb0:	6813      	ldr	r3, [r2, #0]
 8002fb2:	1d19      	adds	r1, r3, #4
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6011      	str	r1, [r2, #0]
 8002fb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e08c      	b.n	80030de <_printf_i+0x1be>
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6011      	str	r1, [r2, #0]
 8002fc8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002fcc:	bf18      	it	ne
 8002fce:	b21b      	sxthne	r3, r3
 8002fd0:	e7cf      	b.n	8002f72 <_printf_i+0x52>
 8002fd2:	6813      	ldr	r3, [r2, #0]
 8002fd4:	6825      	ldr	r5, [r4, #0]
 8002fd6:	1d18      	adds	r0, r3, #4
 8002fd8:	6010      	str	r0, [r2, #0]
 8002fda:	0628      	lsls	r0, r5, #24
 8002fdc:	d501      	bpl.n	8002fe2 <_printf_i+0xc2>
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	e002      	b.n	8002fe8 <_printf_i+0xc8>
 8002fe2:	0668      	lsls	r0, r5, #25
 8002fe4:	d5fb      	bpl.n	8002fde <_printf_i+0xbe>
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	4854      	ldr	r0, [pc, #336]	; (800313c <_printf_i+0x21c>)
 8002fea:	296f      	cmp	r1, #111	; 0x6f
 8002fec:	bf14      	ite	ne
 8002fee:	220a      	movne	r2, #10
 8002ff0:	2208      	moveq	r2, #8
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002ff8:	6865      	ldr	r5, [r4, #4]
 8002ffa:	60a5      	str	r5, [r4, #8]
 8002ffc:	2d00      	cmp	r5, #0
 8002ffe:	f2c0 8095 	blt.w	800312c <_printf_i+0x20c>
 8003002:	6821      	ldr	r1, [r4, #0]
 8003004:	f021 0104 	bic.w	r1, r1, #4
 8003008:	6021      	str	r1, [r4, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d13d      	bne.n	800308a <_printf_i+0x16a>
 800300e:	2d00      	cmp	r5, #0
 8003010:	f040 808e 	bne.w	8003130 <_printf_i+0x210>
 8003014:	4665      	mov	r5, ip
 8003016:	2a08      	cmp	r2, #8
 8003018:	d10b      	bne.n	8003032 <_printf_i+0x112>
 800301a:	6823      	ldr	r3, [r4, #0]
 800301c:	07db      	lsls	r3, r3, #31
 800301e:	d508      	bpl.n	8003032 <_printf_i+0x112>
 8003020:	6923      	ldr	r3, [r4, #16]
 8003022:	6862      	ldr	r2, [r4, #4]
 8003024:	429a      	cmp	r2, r3
 8003026:	bfde      	ittt	le
 8003028:	2330      	movle	r3, #48	; 0x30
 800302a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800302e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003032:	ebac 0305 	sub.w	r3, ip, r5
 8003036:	6123      	str	r3, [r4, #16]
 8003038:	f8cd 8000 	str.w	r8, [sp]
 800303c:	463b      	mov	r3, r7
 800303e:	aa03      	add	r2, sp, #12
 8003040:	4621      	mov	r1, r4
 8003042:	4630      	mov	r0, r6
 8003044:	f7ff fef6 	bl	8002e34 <_printf_common>
 8003048:	3001      	adds	r0, #1
 800304a:	d14d      	bne.n	80030e8 <_printf_i+0x1c8>
 800304c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003050:	b005      	add	sp, #20
 8003052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003056:	4839      	ldr	r0, [pc, #228]	; (800313c <_printf_i+0x21c>)
 8003058:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800305c:	6813      	ldr	r3, [r2, #0]
 800305e:	6821      	ldr	r1, [r4, #0]
 8003060:	1d1d      	adds	r5, r3, #4
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6015      	str	r5, [r2, #0]
 8003066:	060a      	lsls	r2, r1, #24
 8003068:	d50b      	bpl.n	8003082 <_printf_i+0x162>
 800306a:	07ca      	lsls	r2, r1, #31
 800306c:	bf44      	itt	mi
 800306e:	f041 0120 	orrmi.w	r1, r1, #32
 8003072:	6021      	strmi	r1, [r4, #0]
 8003074:	b91b      	cbnz	r3, 800307e <_printf_i+0x15e>
 8003076:	6822      	ldr	r2, [r4, #0]
 8003078:	f022 0220 	bic.w	r2, r2, #32
 800307c:	6022      	str	r2, [r4, #0]
 800307e:	2210      	movs	r2, #16
 8003080:	e7b7      	b.n	8002ff2 <_printf_i+0xd2>
 8003082:	064d      	lsls	r5, r1, #25
 8003084:	bf48      	it	mi
 8003086:	b29b      	uxthmi	r3, r3
 8003088:	e7ef      	b.n	800306a <_printf_i+0x14a>
 800308a:	4665      	mov	r5, ip
 800308c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003090:	fb02 3311 	mls	r3, r2, r1, r3
 8003094:	5cc3      	ldrb	r3, [r0, r3]
 8003096:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800309a:	460b      	mov	r3, r1
 800309c:	2900      	cmp	r1, #0
 800309e:	d1f5      	bne.n	800308c <_printf_i+0x16c>
 80030a0:	e7b9      	b.n	8003016 <_printf_i+0xf6>
 80030a2:	6813      	ldr	r3, [r2, #0]
 80030a4:	6825      	ldr	r5, [r4, #0]
 80030a6:	6961      	ldr	r1, [r4, #20]
 80030a8:	1d18      	adds	r0, r3, #4
 80030aa:	6010      	str	r0, [r2, #0]
 80030ac:	0628      	lsls	r0, r5, #24
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	d501      	bpl.n	80030b6 <_printf_i+0x196>
 80030b2:	6019      	str	r1, [r3, #0]
 80030b4:	e002      	b.n	80030bc <_printf_i+0x19c>
 80030b6:	066a      	lsls	r2, r5, #25
 80030b8:	d5fb      	bpl.n	80030b2 <_printf_i+0x192>
 80030ba:	8019      	strh	r1, [r3, #0]
 80030bc:	2300      	movs	r3, #0
 80030be:	6123      	str	r3, [r4, #16]
 80030c0:	4665      	mov	r5, ip
 80030c2:	e7b9      	b.n	8003038 <_printf_i+0x118>
 80030c4:	6813      	ldr	r3, [r2, #0]
 80030c6:	1d19      	adds	r1, r3, #4
 80030c8:	6011      	str	r1, [r2, #0]
 80030ca:	681d      	ldr	r5, [r3, #0]
 80030cc:	6862      	ldr	r2, [r4, #4]
 80030ce:	2100      	movs	r1, #0
 80030d0:	4628      	mov	r0, r5
 80030d2:	f7fd f87d 	bl	80001d0 <memchr>
 80030d6:	b108      	cbz	r0, 80030dc <_printf_i+0x1bc>
 80030d8:	1b40      	subs	r0, r0, r5
 80030da:	6060      	str	r0, [r4, #4]
 80030dc:	6863      	ldr	r3, [r4, #4]
 80030de:	6123      	str	r3, [r4, #16]
 80030e0:	2300      	movs	r3, #0
 80030e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030e6:	e7a7      	b.n	8003038 <_printf_i+0x118>
 80030e8:	6923      	ldr	r3, [r4, #16]
 80030ea:	462a      	mov	r2, r5
 80030ec:	4639      	mov	r1, r7
 80030ee:	4630      	mov	r0, r6
 80030f0:	47c0      	blx	r8
 80030f2:	3001      	adds	r0, #1
 80030f4:	d0aa      	beq.n	800304c <_printf_i+0x12c>
 80030f6:	6823      	ldr	r3, [r4, #0]
 80030f8:	079b      	lsls	r3, r3, #30
 80030fa:	d413      	bmi.n	8003124 <_printf_i+0x204>
 80030fc:	68e0      	ldr	r0, [r4, #12]
 80030fe:	9b03      	ldr	r3, [sp, #12]
 8003100:	4298      	cmp	r0, r3
 8003102:	bfb8      	it	lt
 8003104:	4618      	movlt	r0, r3
 8003106:	e7a3      	b.n	8003050 <_printf_i+0x130>
 8003108:	2301      	movs	r3, #1
 800310a:	464a      	mov	r2, r9
 800310c:	4639      	mov	r1, r7
 800310e:	4630      	mov	r0, r6
 8003110:	47c0      	blx	r8
 8003112:	3001      	adds	r0, #1
 8003114:	d09a      	beq.n	800304c <_printf_i+0x12c>
 8003116:	3501      	adds	r5, #1
 8003118:	68e3      	ldr	r3, [r4, #12]
 800311a:	9a03      	ldr	r2, [sp, #12]
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	42ab      	cmp	r3, r5
 8003120:	dcf2      	bgt.n	8003108 <_printf_i+0x1e8>
 8003122:	e7eb      	b.n	80030fc <_printf_i+0x1dc>
 8003124:	2500      	movs	r5, #0
 8003126:	f104 0919 	add.w	r9, r4, #25
 800312a:	e7f5      	b.n	8003118 <_printf_i+0x1f8>
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1ac      	bne.n	800308a <_printf_i+0x16a>
 8003130:	7803      	ldrb	r3, [r0, #0]
 8003132:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003136:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800313a:	e76c      	b.n	8003016 <_printf_i+0xf6>
 800313c:	080033ed 	.word	0x080033ed
 8003140:	080033fe 	.word	0x080033fe

08003144 <memcpy>:
 8003144:	b510      	push	{r4, lr}
 8003146:	1e43      	subs	r3, r0, #1
 8003148:	440a      	add	r2, r1
 800314a:	4291      	cmp	r1, r2
 800314c:	d100      	bne.n	8003150 <memcpy+0xc>
 800314e:	bd10      	pop	{r4, pc}
 8003150:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003154:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003158:	e7f7      	b.n	800314a <memcpy+0x6>

0800315a <memmove>:
 800315a:	4288      	cmp	r0, r1
 800315c:	b510      	push	{r4, lr}
 800315e:	eb01 0302 	add.w	r3, r1, r2
 8003162:	d807      	bhi.n	8003174 <memmove+0x1a>
 8003164:	1e42      	subs	r2, r0, #1
 8003166:	4299      	cmp	r1, r3
 8003168:	d00a      	beq.n	8003180 <memmove+0x26>
 800316a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800316e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003172:	e7f8      	b.n	8003166 <memmove+0xc>
 8003174:	4283      	cmp	r3, r0
 8003176:	d9f5      	bls.n	8003164 <memmove+0xa>
 8003178:	1881      	adds	r1, r0, r2
 800317a:	1ad2      	subs	r2, r2, r3
 800317c:	42d3      	cmn	r3, r2
 800317e:	d100      	bne.n	8003182 <memmove+0x28>
 8003180:	bd10      	pop	{r4, pc}
 8003182:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003186:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800318a:	e7f7      	b.n	800317c <memmove+0x22>

0800318c <_free_r>:
 800318c:	b538      	push	{r3, r4, r5, lr}
 800318e:	4605      	mov	r5, r0
 8003190:	2900      	cmp	r1, #0
 8003192:	d045      	beq.n	8003220 <_free_r+0x94>
 8003194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003198:	1f0c      	subs	r4, r1, #4
 800319a:	2b00      	cmp	r3, #0
 800319c:	bfb8      	it	lt
 800319e:	18e4      	addlt	r4, r4, r3
 80031a0:	f000 f8d2 	bl	8003348 <__malloc_lock>
 80031a4:	4a1f      	ldr	r2, [pc, #124]	; (8003224 <_free_r+0x98>)
 80031a6:	6813      	ldr	r3, [r2, #0]
 80031a8:	4610      	mov	r0, r2
 80031aa:	b933      	cbnz	r3, 80031ba <_free_r+0x2e>
 80031ac:	6063      	str	r3, [r4, #4]
 80031ae:	6014      	str	r4, [r2, #0]
 80031b0:	4628      	mov	r0, r5
 80031b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031b6:	f000 b8c8 	b.w	800334a <__malloc_unlock>
 80031ba:	42a3      	cmp	r3, r4
 80031bc:	d90c      	bls.n	80031d8 <_free_r+0x4c>
 80031be:	6821      	ldr	r1, [r4, #0]
 80031c0:	1862      	adds	r2, r4, r1
 80031c2:	4293      	cmp	r3, r2
 80031c4:	bf04      	itt	eq
 80031c6:	681a      	ldreq	r2, [r3, #0]
 80031c8:	685b      	ldreq	r3, [r3, #4]
 80031ca:	6063      	str	r3, [r4, #4]
 80031cc:	bf04      	itt	eq
 80031ce:	1852      	addeq	r2, r2, r1
 80031d0:	6022      	streq	r2, [r4, #0]
 80031d2:	6004      	str	r4, [r0, #0]
 80031d4:	e7ec      	b.n	80031b0 <_free_r+0x24>
 80031d6:	4613      	mov	r3, r2
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	b10a      	cbz	r2, 80031e0 <_free_r+0x54>
 80031dc:	42a2      	cmp	r2, r4
 80031de:	d9fa      	bls.n	80031d6 <_free_r+0x4a>
 80031e0:	6819      	ldr	r1, [r3, #0]
 80031e2:	1858      	adds	r0, r3, r1
 80031e4:	42a0      	cmp	r0, r4
 80031e6:	d10b      	bne.n	8003200 <_free_r+0x74>
 80031e8:	6820      	ldr	r0, [r4, #0]
 80031ea:	4401      	add	r1, r0
 80031ec:	1858      	adds	r0, r3, r1
 80031ee:	4282      	cmp	r2, r0
 80031f0:	6019      	str	r1, [r3, #0]
 80031f2:	d1dd      	bne.n	80031b0 <_free_r+0x24>
 80031f4:	6810      	ldr	r0, [r2, #0]
 80031f6:	6852      	ldr	r2, [r2, #4]
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	4401      	add	r1, r0
 80031fc:	6019      	str	r1, [r3, #0]
 80031fe:	e7d7      	b.n	80031b0 <_free_r+0x24>
 8003200:	d902      	bls.n	8003208 <_free_r+0x7c>
 8003202:	230c      	movs	r3, #12
 8003204:	602b      	str	r3, [r5, #0]
 8003206:	e7d3      	b.n	80031b0 <_free_r+0x24>
 8003208:	6820      	ldr	r0, [r4, #0]
 800320a:	1821      	adds	r1, r4, r0
 800320c:	428a      	cmp	r2, r1
 800320e:	bf04      	itt	eq
 8003210:	6811      	ldreq	r1, [r2, #0]
 8003212:	6852      	ldreq	r2, [r2, #4]
 8003214:	6062      	str	r2, [r4, #4]
 8003216:	bf04      	itt	eq
 8003218:	1809      	addeq	r1, r1, r0
 800321a:	6021      	streq	r1, [r4, #0]
 800321c:	605c      	str	r4, [r3, #4]
 800321e:	e7c7      	b.n	80031b0 <_free_r+0x24>
 8003220:	bd38      	pop	{r3, r4, r5, pc}
 8003222:	bf00      	nop
 8003224:	20000090 	.word	0x20000090

08003228 <_malloc_r>:
 8003228:	b570      	push	{r4, r5, r6, lr}
 800322a:	1ccd      	adds	r5, r1, #3
 800322c:	f025 0503 	bic.w	r5, r5, #3
 8003230:	3508      	adds	r5, #8
 8003232:	2d0c      	cmp	r5, #12
 8003234:	bf38      	it	cc
 8003236:	250c      	movcc	r5, #12
 8003238:	2d00      	cmp	r5, #0
 800323a:	4606      	mov	r6, r0
 800323c:	db01      	blt.n	8003242 <_malloc_r+0x1a>
 800323e:	42a9      	cmp	r1, r5
 8003240:	d903      	bls.n	800324a <_malloc_r+0x22>
 8003242:	230c      	movs	r3, #12
 8003244:	6033      	str	r3, [r6, #0]
 8003246:	2000      	movs	r0, #0
 8003248:	bd70      	pop	{r4, r5, r6, pc}
 800324a:	f000 f87d 	bl	8003348 <__malloc_lock>
 800324e:	4a21      	ldr	r2, [pc, #132]	; (80032d4 <_malloc_r+0xac>)
 8003250:	6814      	ldr	r4, [r2, #0]
 8003252:	4621      	mov	r1, r4
 8003254:	b991      	cbnz	r1, 800327c <_malloc_r+0x54>
 8003256:	4c20      	ldr	r4, [pc, #128]	; (80032d8 <_malloc_r+0xb0>)
 8003258:	6823      	ldr	r3, [r4, #0]
 800325a:	b91b      	cbnz	r3, 8003264 <_malloc_r+0x3c>
 800325c:	4630      	mov	r0, r6
 800325e:	f000 f863 	bl	8003328 <_sbrk_r>
 8003262:	6020      	str	r0, [r4, #0]
 8003264:	4629      	mov	r1, r5
 8003266:	4630      	mov	r0, r6
 8003268:	f000 f85e 	bl	8003328 <_sbrk_r>
 800326c:	1c43      	adds	r3, r0, #1
 800326e:	d124      	bne.n	80032ba <_malloc_r+0x92>
 8003270:	230c      	movs	r3, #12
 8003272:	6033      	str	r3, [r6, #0]
 8003274:	4630      	mov	r0, r6
 8003276:	f000 f868 	bl	800334a <__malloc_unlock>
 800327a:	e7e4      	b.n	8003246 <_malloc_r+0x1e>
 800327c:	680b      	ldr	r3, [r1, #0]
 800327e:	1b5b      	subs	r3, r3, r5
 8003280:	d418      	bmi.n	80032b4 <_malloc_r+0x8c>
 8003282:	2b0b      	cmp	r3, #11
 8003284:	d90f      	bls.n	80032a6 <_malloc_r+0x7e>
 8003286:	600b      	str	r3, [r1, #0]
 8003288:	50cd      	str	r5, [r1, r3]
 800328a:	18cc      	adds	r4, r1, r3
 800328c:	4630      	mov	r0, r6
 800328e:	f000 f85c 	bl	800334a <__malloc_unlock>
 8003292:	f104 000b 	add.w	r0, r4, #11
 8003296:	1d23      	adds	r3, r4, #4
 8003298:	f020 0007 	bic.w	r0, r0, #7
 800329c:	1ac3      	subs	r3, r0, r3
 800329e:	d0d3      	beq.n	8003248 <_malloc_r+0x20>
 80032a0:	425a      	negs	r2, r3
 80032a2:	50e2      	str	r2, [r4, r3]
 80032a4:	e7d0      	b.n	8003248 <_malloc_r+0x20>
 80032a6:	428c      	cmp	r4, r1
 80032a8:	684b      	ldr	r3, [r1, #4]
 80032aa:	bf16      	itet	ne
 80032ac:	6063      	strne	r3, [r4, #4]
 80032ae:	6013      	streq	r3, [r2, #0]
 80032b0:	460c      	movne	r4, r1
 80032b2:	e7eb      	b.n	800328c <_malloc_r+0x64>
 80032b4:	460c      	mov	r4, r1
 80032b6:	6849      	ldr	r1, [r1, #4]
 80032b8:	e7cc      	b.n	8003254 <_malloc_r+0x2c>
 80032ba:	1cc4      	adds	r4, r0, #3
 80032bc:	f024 0403 	bic.w	r4, r4, #3
 80032c0:	42a0      	cmp	r0, r4
 80032c2:	d005      	beq.n	80032d0 <_malloc_r+0xa8>
 80032c4:	1a21      	subs	r1, r4, r0
 80032c6:	4630      	mov	r0, r6
 80032c8:	f000 f82e 	bl	8003328 <_sbrk_r>
 80032cc:	3001      	adds	r0, #1
 80032ce:	d0cf      	beq.n	8003270 <_malloc_r+0x48>
 80032d0:	6025      	str	r5, [r4, #0]
 80032d2:	e7db      	b.n	800328c <_malloc_r+0x64>
 80032d4:	20000090 	.word	0x20000090
 80032d8:	20000094 	.word	0x20000094

080032dc <_realloc_r>:
 80032dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032de:	4607      	mov	r7, r0
 80032e0:	4614      	mov	r4, r2
 80032e2:	460e      	mov	r6, r1
 80032e4:	b921      	cbnz	r1, 80032f0 <_realloc_r+0x14>
 80032e6:	4611      	mov	r1, r2
 80032e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80032ec:	f7ff bf9c 	b.w	8003228 <_malloc_r>
 80032f0:	b922      	cbnz	r2, 80032fc <_realloc_r+0x20>
 80032f2:	f7ff ff4b 	bl	800318c <_free_r>
 80032f6:	4625      	mov	r5, r4
 80032f8:	4628      	mov	r0, r5
 80032fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032fc:	f000 f826 	bl	800334c <_malloc_usable_size_r>
 8003300:	42a0      	cmp	r0, r4
 8003302:	d20f      	bcs.n	8003324 <_realloc_r+0x48>
 8003304:	4621      	mov	r1, r4
 8003306:	4638      	mov	r0, r7
 8003308:	f7ff ff8e 	bl	8003228 <_malloc_r>
 800330c:	4605      	mov	r5, r0
 800330e:	2800      	cmp	r0, #0
 8003310:	d0f2      	beq.n	80032f8 <_realloc_r+0x1c>
 8003312:	4631      	mov	r1, r6
 8003314:	4622      	mov	r2, r4
 8003316:	f7ff ff15 	bl	8003144 <memcpy>
 800331a:	4631      	mov	r1, r6
 800331c:	4638      	mov	r0, r7
 800331e:	f7ff ff35 	bl	800318c <_free_r>
 8003322:	e7e9      	b.n	80032f8 <_realloc_r+0x1c>
 8003324:	4635      	mov	r5, r6
 8003326:	e7e7      	b.n	80032f8 <_realloc_r+0x1c>

08003328 <_sbrk_r>:
 8003328:	b538      	push	{r3, r4, r5, lr}
 800332a:	4c06      	ldr	r4, [pc, #24]	; (8003344 <_sbrk_r+0x1c>)
 800332c:	2300      	movs	r3, #0
 800332e:	4605      	mov	r5, r0
 8003330:	4608      	mov	r0, r1
 8003332:	6023      	str	r3, [r4, #0]
 8003334:	f7fd faa0 	bl	8000878 <_sbrk>
 8003338:	1c43      	adds	r3, r0, #1
 800333a:	d102      	bne.n	8003342 <_sbrk_r+0x1a>
 800333c:	6823      	ldr	r3, [r4, #0]
 800333e:	b103      	cbz	r3, 8003342 <_sbrk_r+0x1a>
 8003340:	602b      	str	r3, [r5, #0]
 8003342:	bd38      	pop	{r3, r4, r5, pc}
 8003344:	2000011c 	.word	0x2000011c

08003348 <__malloc_lock>:
 8003348:	4770      	bx	lr

0800334a <__malloc_unlock>:
 800334a:	4770      	bx	lr

0800334c <_malloc_usable_size_r>:
 800334c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003350:	1f18      	subs	r0, r3, #4
 8003352:	2b00      	cmp	r3, #0
 8003354:	bfbc      	itt	lt
 8003356:	580b      	ldrlt	r3, [r1, r0]
 8003358:	18c0      	addlt	r0, r0, r3
 800335a:	4770      	bx	lr

0800335c <_init>:
 800335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335e:	bf00      	nop
 8003360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003362:	bc08      	pop	{r3}
 8003364:	469e      	mov	lr, r3
 8003366:	4770      	bx	lr

08003368 <_fini>:
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336a:	bf00      	nop
 800336c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336e:	bc08      	pop	{r3}
 8003370:	469e      	mov	lr, r3
 8003372:	4770      	bx	lr
